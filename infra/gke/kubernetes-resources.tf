locals {
  gitlab_address = var.gitlab_address_name == "" ? google_compute_address.gitlab_address.0.address : data.google_compute_address.gitlab_address.0.address
  domain         = var.domain != "" ? var.domain : format("%s.xip.io", local.gitlab_address)
  nginx_address  = data.google_compute_address.nginx.address
}

# Define underlying storage layer
resource "kubernetes_storage_class" "pd-ssd" {
  metadata {
    name = "pd-ssd"
  }
  storage_provisioner = "kubernetes.io/gce-pd"
  parameters = {
    type = "pd-ssd"
  }
}

# Secrets
resource "kubernetes_secret" "gitlab_pg" {
  metadata {
    name = "gitlab-pg"
  }
  data = {
    password = "${var.gitlab_db_password != "" ? var.gitlab_db_password : random_string.autogenerated_gitlab_db_password.result}"
  }
}

resource "kubernetes_secret" "gitlab_rails_storage" {
  metadata {
    name = "gitlab-rails-storage"
  }

  data = {
    connection = <<EOT
provider: Google
google_project: ${var.project_id}
google_client_email: ${google_service_account.gitlab_gcs.email}
google_json_key_string: '${base64decode(google_service_account_key.gitlab_gcs.private_key)}'
EOT
  }
}

resource "kubernetes_secret" "gitlab_registry_storage" {
  metadata {
    name = "gitlab-registry-storage"
  }

  data = {
    "gcs.json" = <<EOT
${base64decode(google_service_account_key.gitlab_gcs.private_key)}
EOT
    storage    = <<EOT
gcs:
  bucket: ${var.project_id}-registry
  keyfile: /etc/docker/registry/storage/gcs.json
EOT
  }
}

resource "kubernetes_secret" "gitlab_gcs_credentials" {
  metadata {
    name = "google-application-credentials"
  }

  data = {
    gcs-application-credentials-file = base64decode(google_service_account_key.gitlab_gcs.private_key)
  }
}

data "google_compute_address" "gitlab_address" {
  name   = var.gitlab_address_name
  region = var.region

  # Do not get data if the address is being created as part of the run
  count = var.gitlab_address_name == "" ? 0 : 1
}

# GitLab Helm
data "template_file" "gitlab_values" {
  template = file("${path.module}/templates/gitlab-values.yaml.tpl")
  vars = {
    DOMAIN                = local.domain
    INGRESS_IP            = local.gitlab_address
    DB_PRIVATE_IP         = google_sql_database_instance.gitlab_db.private_ip_address
    REDIS_PRIVATE_IP      = google_redis_instance.gitlab_redis.host
    PROJECT_ID            = var.project_id
    CERT_MANAGER_EMAIL    = var.email_address
    GITLAB_RUNNER_INSTALL = var.gitlab_runner_install
  }
}

resource "local_file" "gitlab_yaml" {
  content    = data.template_file.gitlab_values.rendered
  filename   = "${path.module}/values/gitlab-values.yaml"
  depends_on = [kubernetes_namespace.flux]
}

resource "helm_release" "gitlab" {
  name         = "gitlab"
  repository   = "https://charts.gitlab.io"
  chart        = "gitlab"
  version      = var.gitlab_helm_chart_version
  timeout      = "1600"
  wait         = "false"
  force_update = "true"

  values = [data.template_file.gitlab_values.rendered]

  depends_on = [
    google_redis_instance.gitlab_redis,
    google_sql_user.gitlab,
    kubernetes_storage_class.pd-ssd,
    time_sleep.sleep_for_cluster_fix_helm_6361,
  ]
}

# Creates nginx namespace
resource "kubernetes_namespace" "nginx" {
  metadata {
    name = "nginx"
  }
  depends_on = [time_sleep.sleep_for_cluster_fix_helm_6361]
}

resource "helm_release" "ingress_nginx" {
  name         = "ingress-nginx"
  repository   = "https://kubernetes.github.io/ingress-nginx"
  namespace    = "nginx"
  chart        = "ingress-nginx"
  version      = "3.19.0"
  timeout      = "300"
  force_update = "true"

  values = [
    "${data.template_file.ingress_nginx.rendered}"
  ]
  depends_on = [
    time_sleep.nginx_helm,
    kubernetes_namespace.nginx,
    google_compute_address.nginx,
    data.template_file.ingress_nginx,
  ]
}

data "google_compute_address" "nginx" {
  name       = var.nginx_address_name
  depends_on = [module.project_services]
  region     = var.region
  project    = module.project_services.project_id
}

data "template_file" "ingress_nginx" {
  template = file("${path.module}/templates/ingress-nginx.yaml.tpl")
  vars = {
    NGINXIP = local.nginx_address
  }
  depends_on = [
    google_compute_address.nginx
  ]
}

resource "local_file" "ingress_nginx_yaml" {
  content  = data.template_file.ingress_nginx.rendered
  filename = "${path.module}/values/ingress-nginx.yaml"
  depends_on = [
    google_compute_address.nginx,
    data.template_file.ingress_nginx,
    time_sleep.nginx_helm,
    helm_release.helm_operator
  ]
}

resource "time_sleep" "nginx_helm" {
  create_duration  = "120s"
  destroy_duration = "10s"
  depends_on = [
    module.gke.endpoint,
    google_compute_address.nginx,
  ]
}

# Creates key for flux & github
resource "tls_private_key" "flux_deploy_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

# Creates public key in github
resource "github_repository_deploy_key" "lrc_portfolio_repo" {
  title      = "Flux Key"
  repository = "lrc-portfolio"
  key        = tls_private_key.flux_deploy_key.public_key_openssh
  read_only  = "false"
}

resource "time_sleep" "sleep_for_cluster_fix_helm_6361" {
  create_duration  = "300s"
  destroy_duration = "60s"
  depends_on       = [module.gke.endpoint, google_sql_database.gitlabhq_production]
}

# Creates flux namespace
resource "kubernetes_namespace" "flux" {
  metadata {
    name = "flux"
  }
  depends_on = [
    time_sleep.sleep_for_cluster_fix_helm_6361,
  ]
}

# Creates kubernetes secret for flux to pull changes from github and sync with gke
resource "kubernetes_secret" "flux_ssh" {
  metadata {
    name      = "flux-ssh"
    namespace = "flux"
  }
  data = {
    "identity" = "${tls_private_key.flux_deploy_key.private_key_pem}"
  }
  depends_on = [
    kubernetes_namespace.flux,
    tls_private_key.flux_deploy_key,
    time_sleep.sleep_for_cluster_fix_helm_6361
  ]
}

# Creates flux values.yaml file
data "template_file" "flux_yaml" {
  template = file("${path.module}/templates/flux-values.yaml.tpl")

  vars = {
    EMAIL    = var.email_address
    USERNAME = var.username
    REPO     = var.repo
  }
}

# Creates the flux values.yaml file from the redered data above
resource "local_file" "flux_yaml" {
  content    = data.template_file.flux_yaml.rendered
  filename   = "${path.module}/values/flux-values.yaml"
  depends_on = [kubernetes_namespace.flux, time_sleep.sleep_for_cluster_fix_helm_6361]
}

# Creates flux helmrelease
resource "helm_release" "fluxcd" {
  name          = "flux"
  repository    = "https://charts.fluxcd.io"
  namespace     = "flux"
  chart         = "flux"
  version       = "1.6.0"
  recreate_pods = "true"
  wait          = "false"

  values = [data.template_file.flux_yaml.rendered]
  depends_on = [
    kubernetes_secret.flux_ssh,
    data.template_file.flux_yaml,
    kubernetes_namespace.flux,
    time_sleep.sleep_for_cluster_fix_helm_6361,
  ]
}

# helm operator release
resource "helm_release" "helm_operator" {
  name       = "helm-operator"
  namespace  = "flux"
  repository = "https://charts.fluxcd.io"
  chart      = "helm-operator"
  version    = "1.2.0"

  values = [
    "${file("${path.module}/templates/helm-operator-values.yaml")}"
  ]
  depends_on = [
    kubernetes_secret.flux_ssh,
    kubernetes_namespace.flux,
    time_sleep.sleep_for_cluster_fix_helm_6361
  ]
}
