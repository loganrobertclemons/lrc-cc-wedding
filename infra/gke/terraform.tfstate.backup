{
  "version": 4,
  "terraform_version": "0.13.5",
  "serial": 158,
  "lineage": "e27ba9c7-47df-6329-16cb-1c457770a24a",
  "outputs": {
    "project_id": {
      "value": "lrc-portfolio-1138",
      "type": "string"
    },
    "region": {
      "value": "us-central1",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "google_compute_address",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "34.123.121.124",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "name": "nginx",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "status": "RESERVED"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "flux_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2cb21ef4bfd1af994df7f37a200aa227b04321720b5a268298015258247c418d",
            "rendered": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "template": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "vars": {
              "EMAIL": "loganrclemons@gmail.com",
              "REPO": "https://github.com/loganrobertclemons/lrc-portfolio.git",
              "USERNAME": "loganrobertclemons"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "gitlab_values",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "d68171632b5db809db78d4e09fede88b3aaab7b2fe926c8ddf91594b4364ed26",
            "rendered": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.226.182.91.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.226.182.91\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.3\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.32.54.20\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "template": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: ${DOMAIN}\n    https: true\n    gitlab: {}\n    externalIP: ${INGRESS_IP}\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: ${DB_PRIVATE_IP}\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: ${REDIS_PRIVATE_IP}\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: ${PROJECT_ID}-gitlab-backups\n    lfs:\n      bucket: ${PROJECT_ID}-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: ${PROJECT_ID}-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: ${PROJECT_ID}-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: ${PROJECT_ID}-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: ${PROJECT_ID}-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: ${CERT_MANAGER_EMAIL}\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: ${PROJECT_ID}\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: ${GITLAB_RUNNER_INSTALL}\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: ${PROJECT_ID}-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "vars": {
              "CERT_MANAGER_EMAIL": "loganrclemons@gmail.com",
              "DB_PRIVATE_IP": "10.1.0.3",
              "DOMAIN": "35.226.182.91.xip.io",
              "GITLAB_RUNNER_INSTALL": "false",
              "INGRESS_IP": "35.226.182.91",
              "PROJECT_ID": "lrc-portfolio-1138",
              "REDIS_PRIVATE_IP": "10.32.54.20"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "ingress_nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "e29f1026bf7c90f668d26657f0b03d42d24c87bdf43bf6db7b3383ba249a43d6",
            "rendered": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 34.123.121.124\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "template": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: ${NGINXIP}\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "vars": {
              "NGINXIP": "34.123.121.124"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "gitlab_address",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "address": "35.226.182.91",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-03-26T11:31:20.868-07:00",
            "description": "Gitlab Ingress IP",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/lrc-portfolio-cluster-gitlab-compute-address",
            "name": "lrc-portfolio-cluster-gitlab-compute-address",
            "network_tier": "PREMIUM",
            "project": "lrc-portfolio-1138",
            "purpose": "",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/lrc-portfolio-cluster-gitlab-compute-address",
            "subnetwork": "",
            "timeouts": null,
            "users": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/forwardingRules/a31459db8811346119ddeec3838030ef"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "google_compute_address.nginx",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "34.123.121.124",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-03-26T11:31:08.747-07:00",
            "description": "Nginx Ingress IP",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "name": "nginx",
            "network_tier": "PREMIUM",
            "project": "lrc-portfolio-1138",
            "purpose": "",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "subnetwork": "",
            "timeouts": null,
            "users": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_global_address",
      "name": "gitlab_sql",
      "provider": "provider[\"registry.terraform.io/hashicorp/google-beta\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "10.1.0.0",
            "address_type": "INTERNAL",
            "creation_timestamp": "2021-03-26T13:21:02.883-07:00",
            "description": "",
            "id": "projects/lrc-portfolio-1138/global/addresses/lrc-portfolio-cluster-gitlab-sql",
            "ip_version": "",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": {},
            "name": "lrc-portfolio-cluster-gitlab-sql",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "prefix_length": 16,
            "project": "lrc-portfolio-1138",
            "purpose": "VPC_PEERING",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/addresses/lrc-portfolio-cluster-gitlab-sql",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "gitlab_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": false,
            "delete_default_routes_on_create": false,
            "description": "",
            "gateway_ipv4": "",
            "id": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "mtu": 0,
            "name": "lrc-portfolio-cluster-gitlab-compute-network",
            "project": "lrc-portfolio-1138",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "gitlab_subnetwork",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2021-03-26T11:31:20.663-07:00",
            "description": "",
            "fingerprint": null,
            "gateway_address": "10.0.0.1",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "ip_cidr_range": "10.0.0.0/16",
            "log_config": [],
            "name": "lrc-portfolio-cluster-gitlab-compute-subnet",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "secondary_ip_range": [
              {
                "ip_cidr_range": "10.3.0.0/16",
                "range_name": "gitlab-cluster-pod-cidr"
              },
              {
                "ip_cidr_range": "10.2.0.0/16",
                "range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozNjAwMDAwMDAwMDAsImRlbGV0ZSI6MzYwMDAwMDAwMDAwLCJ1cGRhdGUiOjM2MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+dqYlsjE=",
            "id": "lrc-portfolio-1138/roles/storage.admin/serviceaccount:gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/storage.admin"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_service",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "cloudresourcemanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/cloudresourcemanager.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "cloudresourcemanager.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "compute.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/compute.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "compute.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "container.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/container.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "container.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_redis_instance",
      "name": "gitlab_redis",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alternative_location_id": "us-central1-f",
            "auth_enabled": false,
            "auth_string": "",
            "authorized_network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "connect_mode": "DIRECT_PEERING",
            "create_time": "2021-03-26T20:21:03.049528283Z",
            "current_location_id": "us-central1-c",
            "display_name": "GitLab Redis",
            "host": "10.32.54.20",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/instances/lrc-portfolio-cluster-gitlab-redis",
            "labels": {},
            "location_id": "us-central1-c",
            "memory_size_gb": 5,
            "name": "lrc-portfolio-cluster-gitlab-redis",
            "persistence_iam_identity": "serviceAccount:196595168067-compute@developer.gserviceaccount.com",
            "port": 6379,
            "project": "lrc-portfolio-1138",
            "redis_configs": {},
            "redis_version": "REDIS_4_0",
            "region": "us-central1",
            "reserved_ip_range": "10.32.54.16/29",
            "tier": "STANDARD_HA",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account",
      "name": "gitlab_gcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "gitlab-gcs",
            "description": "",
            "display_name": "GitLab Cloud Storage",
            "email": "gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "unique_id": "106980907605845205331"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account_key",
      "name": "gitlab_gcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com/keys/bcc90165e8a3e28133ba61bb165aca5dc46e3618",
            "keepers": null,
            "key_algorithm": "KEY_ALG_RSA_2048",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com/keys/bcc90165e8a3e28133ba61bb165aca5dc46e3618",
            "private_key": "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibHJjLXBvcnRmb2xpby0xMTM4IiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiYmNjOTAxNjVlOGEzZTI4MTMzYmE2MWJiMTY1YWNhNWRjNDZlMzYxOCIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFDcHVYYkcwb0hnbDkzYVxuY2Z0eGlRTFFwaTltZGJ1cHZOSnV3a1JSMGNOenB4cS9OekpjRUdNTFhYU0w4eFVwSUNTcG1JMFVERDgzd1I3WlxuRHZLaDZNV1lwZmVuZ0Z5L2NaQXBRbTBMYmZ0c1pneU9Ga21YSUIzbVB6UC9HNStyYU81ZlQxc2x5MzNLWHJBOFxucVo1anlQQTZXdDR4aVNER0NVRlFjVWZ5bGNTS2VJeVhnZDVpYS85dFV3cFUxQXI5cVJwcDFJd0dJbGtUTStqUlxuRTV6VTRENVZwWXZLalZQTlIzbFJ3ZkRqMWVLQTIrblcxeUpTZFZIUTlzOUdVS1ZsUVV2bDZaTUNvRzllUFA4dFxuOGJXODZxNGt2cWlCS1BleiszWFhXV1VtWndTNFZKTHhQbkJKcldId0dFcGphK3d6dFIxUFl5cE5hOGNJNGJocFxuZFk2ZzM3SnpBZ01CQUFFQ2dnRUFUMjNPNHV4WVFOSUJ6djNoMVRmd0c5SnlRMnFjeVNwbmR0TXVvdlhlbVF6ZVxuclJjNVY3R0prS09MYkFWMlpUazRQekIzOGFacm5YMmhJS2Jvc1JJZEN6dTh3MlNFdzBsejFJTlVRZkdXSlJ3N1xuQ3ZIdVBhNFhvQTM3R1F3RjlQT1Yvdi9GNGRHeVRGZDA5ZWJSaTlSWmJJM2pCMTZyK2xJUmdZS0tUOEo4YU9xT1xuUXN5aDhuSVdWbjhGZnBIcGxNUHZvMVBmNzZhK3JMWXpRYmlWMWZPSFlWcjJYcU9YejJralVuKzNUS2lHUjVEdVxuRHhxSnUvdEVCMjNwSXVxOUpPRW9YK2pDK21UNDM5NDdKRnVsb3dDT3RyeUZCMVpwd1F6S01iM1k4OUdSVTNHclxuWGgyR0ROYkJFUDhIZVVGaythUGVkQjd0dnM1NXpTNmFvbEVXT0NONDBRS0JnUURxRXlTc0NpdGVjOTIyTDEwK1xuRHpVTWxvYUZYdG96dnZ3eWYwbFVhell6aGpEWDFlZnNiMEhhcUFHT01QTUNRZW5SczY3WWk1REczMHNhSVFmTVxuU09TSFFjcDg5YUdTV2hWcFUvNVRWaWZvTDQzaks0U0hmOFdIV1hkM25yT0MrczNzUGNGKytjM3pQcWlLSEM4alxuM1NHVFY4L25pQjBNKzVnVkZWbnNzVk5MUXdLQmdRQzVuMFZTbzBYbXo3QWh3WXkzeUl6cWE1cXdZWUZnZ2c0V1xuU0huNlhhaVVLbjdiN29VVzhpeHhZWEo2ZFgwZ0FaWTBHVWxYd2ZPU0wvbk53TjZnWFR3M3ZRNXFGS2lIdzNaR1xuU2dJTzNaV0J3Z2Y0TklmNGlFSWJoc3JZN2NnOUx4YVNlR2J2V1BTcHlVYy9vcUd5aWsrY3JqL3VqTHN2RitXdVxud1lZcGlTTFJFUUtCZ0gzcFFEKysxS2RoSWpFZTkwUXJ2L2grZSt3QUl0WFU5U3BncDl4ZU0zQ3h6Vkk4d1IzQVxubHliOFdxSFhHTkR0RGM1OG5oL2pxMFFlMXZJK05FaWlLVFBNb3hSbXVMdlY4MUNPR3U5UEYvWmdwaTA5dW5OOFxudW85ZEE5TjNyYzVXQlRELzR6YmZQdmFLalBTRnhxRy9FSkdHbWRKTXVIdkVWb0Y0MDc5cmY0ZXJBb0dCQUlyYVxuMHgvRFZhb1ltUGhYY2kyVkQ1ell5OG0vMXVsYndLLzRuWTZsZTFNREN3ejR1NFJ6dXIxQ0dVSDBHNXJTdFFyYVxuRTV4YlVScDlXeEFJaEVGUUhaalFpelRkcVVpTjlpOFVjNyt0RUljVm42S1RvVmRRanF0S3hQbEx2dXZPQ3NPY1xuMzl1U0hzdlg3cjF5cWlVR0JCSC80NEZPczBQQ1M2WFR6TW5MZFVrUkFvR0JBS2thNlBUbyttNjBJNWtLUXpyMVxuRzhISUM1S3o1VnVpN1M5ZmUyRmlBVEFnbnQ2OTBVSVZaM0I3RU1hbVN1ZndSMFhXYW81dlJZMHhlOFFDdUx0UFxubmUwbFZmd3NmRHBacDV6QzNPREl4aUVNbUx0Tms3S0JwdjAzQ3k3YmxUZSsydlE2aWI5T1BhOGVoSDcxbHZMYlxuZm8xOGJwbGFPdGZKY08xcXBLWTQ2R2VyXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiZ2l0bGFiLWdjc0BscmMtcG9ydGZvbGlvLTExMzguaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTA2OTgwOTA3NjA1ODQ1MjA1MzMxIiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9naXRsYWItZ2NzJTQwbHJjLXBvcnRmb2xpby0xMTM4LmlhbS5nc2VydmljZWFjY291bnQuY29tIgp9Cg==",
            "private_key_type": "TYPE_GOOGLE_CREDENTIALS_FILE",
            "public_key": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lJTDQwRm02S0RTdEF3RFFZSktvWklodmNOQVFFRkJRQXdJREVlTUJ3R0ExVUUKQXhNVk1UQTJPVGd3T1RBM05qQTFPRFExTWpBMU16TXhNQ0FYRFRJeE1ETXlOakl3TkRnd01sb1lEems1T1RreApNak14TWpNMU9UVTVXakFnTVI0d0hBWURWUVFERXhVeE1EWTVPREE1TURjMk1EVTRORFV5TURVek16RXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3B1WGJHMG9IZ2w5M2FjZnR4aVFMUXBpOW0KZGJ1cHZOSnV3a1JSMGNOenB4cS9OekpjRUdNTFhYU0w4eFVwSUNTcG1JMFVERDgzd1I3WkR2S2g2TVdZcGZlbgpnRnkvY1pBcFFtMExiZnRzWmd5T0ZrbVhJQjNtUHpQL0c1K3JhTzVmVDFzbHkzM0tYckE4cVo1anlQQTZXdDR4CmlTREdDVUZRY1VmeWxjU0tlSXlYZ2Q1aWEvOXRVd3BVMUFyOXFScHAxSXdHSWxrVE0ralJFNXpVNEQ1VnBZdksKalZQTlIzbFJ3ZkRqMWVLQTIrblcxeUpTZFZIUTlzOUdVS1ZsUVV2bDZaTUNvRzllUFA4dDhiVzg2cTRrdnFpQgpLUGV6KzNYWFdXVW1ad1M0VkpMeFBuQkpyV0h3R0VwamErd3p0UjFQWXlwTmE4Y0k0YmhwZFk2ZzM3SnpBZ01CCkFBR2pPREEyTUF3R0ExVWRFd0VCL3dRQ01BQXdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1CWUdBMVVkSlFFQi93UU0KTUFvR0NDc0dBUVVGQndNQ01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRQms5TnpsRlBmd2lRSTI3Und4ZmJTNwp5VzlpbUNPTEdMamZTL1Y3SkRreW1PWnJJUTB0aEo3a1h0dUNSZmJ1b043MFBveWk1SkRMYnIxc0YvTjc5V2x3Ck9UMDFYWmJwNS9ISmpIMTJqUmZNQ3FsMUg4TGNwbHFtZzM1ZUV4ZVN1UDFvczZhbzNHTXI3a0YyeHA5eXFHeG0KRlFxNUF5bmpVTXVFZ1dUQkNDVGp4VEt3aFI3VmlidDlMd1NWd3BYTHlabmZTQURQRnRSTXM4MHRTZmJ1aXlSbQowNnVOd1ZaU1BYKy9PbWRteFVXbUk2VXo4ajVTSTU0MXBON0g5UXFuQy94ZGRST0syaFptMkhZYkRKTVptTUUwCmpDZllwQjF2ZFZlVDF0QjRKdk51RUxoaDJRV25jcHEvVlRZOVNVQWU5Yisvd0Q4U0xtMEQ3V2VISDh2Zi9IQnoKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
            "public_key_data": null,
            "public_key_type": "TYPE_X509_PEM_FILE",
            "service_account_id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "valid_after": "2021-03-26T20:48:02Z",
            "valid_before": "9999-12-31T23:59:59Z"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_networking_connection",
      "name": "private_vpc_connection",
      "provider": "provider[\"registry.terraform.io/hashicorp/google-beta\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "https%3A%2F%2Fwww.googleapis.com%2Fcompute%2Fv1%2Fprojects%2Flrc-portfolio-1138%2Fglobal%2Fnetworks%2Flrc-portfolio-cluster-gitlab-compute-network:servicenetworking.googleapis.com",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "peering": "servicenetworking-googleapis-com",
            "reserved_peering_ranges": [
              "lrc-portfolio-cluster-gitlab-sql"
            ],
            "service": "servicenetworking.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_database",
      "name": "gitlabhq_production",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "charset": "UTF8",
            "collation": "en_US.UTF8",
            "id": "projects/lrc-portfolio-1138/instances/gitlab-db-2b47/databases/gitlabhq_production",
            "instance": "gitlab-db-2b47",
            "name": "gitlabhq_production",
            "project": "lrc-portfolio-1138",
            "self_link": "https://sqladmin.googleapis.com/sql/v1beta4/projects/lrc-portfolio-1138/instances/gitlab-db-2b47/databases/gitlabhq_production",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "google_sql_database_instance.gitlab_db",
            "google_sql_user.gitlab",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_database_instance",
      "name": "gitlab_db",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "clone": [],
            "connection_name": "lrc-portfolio-1138:us-central1:gitlab-db-2b47",
            "database_version": "POSTGRES_11",
            "deletion_protection": false,
            "first_ip_address": "10.1.0.3",
            "id": "gitlab-db-2b47",
            "ip_address": [
              {
                "ip_address": "10.1.0.3",
                "time_to_retire": "",
                "type": "PRIVATE"
              }
            ],
            "master_instance_name": "",
            "name": "gitlab-db-2b47",
            "private_ip_address": "10.1.0.3",
            "project": "lrc-portfolio-1138",
            "public_ip_address": "",
            "region": "us-central1",
            "replica_configuration": [],
            "restore_backup_context": [],
            "root_password": null,
            "self_link": "https://sqladmin.googleapis.com/sql/v1beta4/projects/lrc-portfolio-1138/instances/gitlab-db-2b47",
            "server_ca_cert": [
              {
                "cert": "-----BEGIN CERTIFICATE-----\nMIIDfzCCAmegAwIBAgIBADANBgkqhkiG9w0BAQsFADB3MS0wKwYDVQQuEyQwYTcy\nNjQ1ZS0wYjJiLTRkN2QtODkxMS1mNTFjODI0MDEwNzgxIzAhBgNVBAMTGkdvb2ds\nZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUsIEluYzELMAkG\nA1UEBhMCVVMwHhcNMjEwMzI2MjAyNTA0WhcNMzEwMzI0MjAyNjA0WjB3MS0wKwYD\nVQQuEyQwYTcyNjQ1ZS0wYjJiLTRkN2QtODkxMS1mNTFjODI0MDEwNzgxIzAhBgNV\nBAMTGkdvb2dsZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUs\nIEluYzELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQCa4vS+vH5d5KKys2+LbPde33BzdVw5V5QJ9D18CIEQ9NePgKV6J5uT0moH8NWc\nydSb6RJowqotd+rYPzBAJWHp6Cs6KLjRFXHpx1ijgXeBVPoFOgIl75rOYZ/jeb2w\n3Lg2hwIFpTTHGLVnU4hWxJCn9fDwOU4Bb6Gxls/dmectoNxcpzZsalsgSw+6XOZE\nGAQhdi+oDTzzbsPPF79s4HCxsOFKmjiOGOy7uTr6y31PXB8JQmd+1lOaIKP73mmM\nEPk9PyiqIyNTyU+ZYZ6p7smVqerSS+m1urj/oqItCoxbjg7Xs/3twjyqmeaWib22\nLwN1otY2Zvp9ZX6vfsrlp5PVAgMBAAGjFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQAw\nDQYJKoZIhvcNAQELBQADggEBAFzrtn7tLs9qJ5U2NbLAomX5igDpj4mdm7ZWux1h\nHfAvcEQaRxh3/xtnIkGjCk0BwfClUeUpEkRKmSR2wrKmOBnxkwAjl9jpj0pIMx5j\navk7z5FCtRnGTJLay5Dsnkfs0c+IAv2ITYoW4u9NROoQHKe2WHJdWcUzlQ4Gohil\nRapkL/7f0jEsTVA3lLSKYD4RnQHWiqfwmQ5gZMpEwwDXlAlnWNatLnllQsGj75eR\n7vZvXSH6IxSNGY2VvYwOCyPhN5nTsjMoIlei4gMLPa83CMUTFmei1XR00iCQ4RWH\nMtRBaIq0DI+bS+cGgxm7Q90O0I2ZepOboD1RJEGl/gISFSQ=\n-----END CERTIFICATE-----",
                "common_name": "C=US,O=Google\\, Inc,CN=Google Cloud SQL Server CA,dnQualifier=0a72645e-0b2b-4d7d-8911-f51c82401078",
                "create_time": "2021-03-26T20:25:04.605Z",
                "expiration_time": "2031-03-24T20:26:04.605Z",
                "sha1_fingerprint": "eb26f039239932e4871da5962d2e44c4d4e9debc"
              }
            ],
            "service_account_email_address": "p23732155832-0wzqtc@gcp-sa-cloud-sql.iam.gserviceaccount.com",
            "settings": [
              {
                "activation_policy": "ALWAYS",
                "authorized_gae_applications": [],
                "availability_type": "ZONAL",
                "backup_configuration": [
                  {
                    "backup_retention_settings": [
                      {
                        "retained_backups": 7,
                        "retention_unit": "COUNT"
                      }
                    ],
                    "binary_log_enabled": false,
                    "enabled": false,
                    "location": "",
                    "point_in_time_recovery_enabled": false,
                    "start_time": "00:00",
                    "transaction_log_retention_days": 7
                  }
                ],
                "crash_safe_replication": false,
                "database_flags": [],
                "disk_autoresize": true,
                "disk_size": 10,
                "disk_type": "PD_SSD",
                "insights_config": [],
                "ip_configuration": [
                  {
                    "authorized_networks": [],
                    "ipv4_enabled": false,
                    "private_network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
                    "require_ssl": false
                  }
                ],
                "location_preference": [
                  {
                    "follow_gae_application": "",
                    "zone": "us-central1-f"
                  }
                ],
                "maintenance_window": [],
                "pricing_plan": "PER_USE",
                "replication_type": "SYNCHRONOUS",
                "tier": "db-custom-4-15360",
                "user_labels": {},
                "version": 1
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_user",
      "name": "gitlab",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "deletion_policy": null,
            "host": "",
            "id": "gitlab//gitlab-db-2b47",
            "instance": "gitlab-db-2b47",
            "name": "gitlab",
            "password": "dB1tsBBoxelmaxXI",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "type": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "google_sql_database_instance.gitlab_db",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "git-lfs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-lfs",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-lfs",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-lfs",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-lfs",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-artifacts",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-artifacts",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-artifacts",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-artifacts",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-artifacts",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-backups",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-backups",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-backups",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-backups",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-backups",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-packages",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-packages",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-packages",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-packages",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-packages",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-pseudo",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-pseudo",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-pseudo",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-pseudo",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-pseudo",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-registry",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-registry",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-registry",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-registry",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-registry",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-runner-cache",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-runner-cache",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-runner-cache",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-runner-cache",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-runner-cache",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-uploads",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-uploads",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-uploads",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-uploads",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-uploads",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "fluxcd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "flux",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "flux",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.21.0",
                "chart": "flux",
                "name": "flux",
                "namespace": "flux",
                "revision": 1,
                "values": "{\"git\":{\"branch\":\"main\",\"email\":\"loganrobertclemons@gmail.com\",\"label\":\"flux\",\"path\":\"releases\",\"pollInterval\":\"5m\",\"secretName\":\"flux-ssh\",\"url\":\"ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\",\"user\":\"loganrobertclemons\"},\"registry\":{\"disableScanning\":true},\"sync\":{\"state\":\"git\",\"timeout\":\"1m\"},\"syncGarbageCollection\":{\"enabled\":true}}",
                "version": "1.6.0"
              }
            ],
            "name": "flux",
            "namespace": "flux",
            "postrender": [],
            "recreate_pods": true,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.fluxcd.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true"
            ],
            "verify": false,
            "version": "1.6.0",
            "wait": false
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.flux_yaml",
            "google_sql_database.gitlabhq_production",
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "gitlab",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "gitlab",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "gitlab",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "13.6.0",
                "chart": "gitlab",
                "name": "gitlab",
                "namespace": "default",
                "revision": 1,
                "values": "{\"certmanager-issuer\":{\"email\":\"loganrclemons@gmail.com\"},\"gitlab\":{\"gitaly\":{\"persistence\":{\"size\":\"200Gi\",\"storageClass\":\"pd-ssd\"}},\"task-runner\":{\"backups\":{\"objectStorage\":{\"backend\":\"gcs\",\"config\":{\"gcpProject\":\"lrc-portfolio-1138\",\"key\":\"gcs-application-credentials-file\",\"secret\":\"google-application-credentials\"}}}}},\"gitlab-runner\":{\"install\":false,\"rbac\":{\"create\":true},\"runners\":{\"cache\":{\"cacheShared\":true,\"cacheType\":\"gcs\",\"gcsBucketName\":\"lrc-portfolio-1138-runner-cache\",\"secretName\":\"google-application-credentials\"},\"locked\":false}},\"global\":{\"appConfig\":{\"artifacts\":{\"bucket\":\"lrc-portfolio-1138-gitlab-artifacts\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"backups\":{\"bucket\":\"lrc-portfolio-1138-gitlab-backups\"},\"enableUsagePing\":false,\"initialDefaults\":{\"signupEnabled\":false},\"lfs\":{\"bucket\":\"lrc-portfolio-1138-git-lfs\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"packages\":{\"bucket\":\"lrc-portfolio-1138-gitlab-packages\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"pseudonymizer\":{\"bucket\":\"lrc-portfolio-1138-gitlab-pseudo\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"uploads\":{\"bucket\":\"lrc-portfolio-1138-gitlab-uploads\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}}},\"edition\":\"ce\",\"hosts\":{\"domain\":\"35.226.182.91.xip.io\",\"externalIP\":\"35.226.182.91\",\"gitlab\":{},\"https\":true,\"ssh\":null},\"ingress\":{\"configureCertmanager\":true,\"enabled\":true,\"tls\":{\"enabled\":true,\"secretName\":\"my-secret\"}},\"minio\":{\"enabled\":false},\"psql\":{\"database\":\"gitlabhq_production\",\"host\":\"10.1.0.3\",\"password\":{\"key\":\"password\",\"secret\":\"gitlab-pg\"},\"port\":5432,\"username\":\"gitlab\"},\"redis\":{\"host\":\"10.32.54.20\",\"password\":{\"enabled\":false}}},\"postgresql\":{\"install\":false},\"prometheus\":{\"install\":false},\"redis\":{\"install\":false},\"registry\":{\"enabled\":true,\"storage\":{\"extraKey\":\"gcs.json\",\"key\":\"storage\",\"secret\":\"gitlab-registry-storage\"}}}",
                "version": "4.6.0"
              }
            ],
            "name": "gitlab",
            "namespace": "default",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.gitlab.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "failed",
            "timeout": 1600,
            "values": [
              "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.226.182.91.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.226.182.91\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.3\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.32.54.20\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json"
            ],
            "verify": false,
            "version": "4.6.0",
            "wait": false
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.gitlab_values",
            "google_redis_instance.gitlab_redis",
            "google_sql_database.gitlabhq_production",
            "google_sql_user.gitlab",
            "kubernetes_storage_class.pd-ssd",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "helm_operator",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "helm-operator",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "helm-operator",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.2.0",
                "chart": "helm-operator",
                "name": "helm-operator",
                "namespace": "flux",
                "revision": 1,
                "values": "{\"chartsSyncInterval\":\"5m\",\"git\":{\"pollInterval\":\"5m\",\"ssh\":{\"secretName\":\"flux-ssh\"}},\"helm\":{\"versions\":\"v3\"},\"logReleaseDiffs\":true}",
                "version": "1.2.0"
              }
            ],
            "name": "helm-operator",
            "namespace": "flux",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.fluxcd.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "helm:\n  versions: v3\nlogReleaseDiffs: true\nchartsSyncInterval: 5m\ngit:\n  pollInterval: 5m\n  ssh:\n    secretName: flux-ssh"
            ],
            "verify": false,
            "version": "1.2.0",
            "wait": true
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_sql_database.gitlabhq_production",
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "ingress_nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "ingress-nginx",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "ingress-nginx",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.43.0",
                "chart": "ingress-nginx",
                "name": "ingress-nginx",
                "namespace": "nginx",
                "revision": 1,
                "values": "{\"controller\":{\"addHeaders\":{},\"admissionWebhooks\":{\"annotations\":{},\"certificate\":\"/usr/local/certificates/cert\",\"enabled\":true,\"failurePolicy\":\"Fail\",\"key\":\"/usr/local/certificates/key\",\"namespaceSelector\":{},\"objectSelector\":{},\"patch\":{\"enabled\":true,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"docker.io/jettech/kube-webhook-certgen\",\"tag\":\"v1.5.0\"},\"nodeSelector\":{},\"podAnnotations\":{},\"priorityClassName\":\"\",\"runAsUser\":2000,\"tolerations\":[]},\"port\":8443,\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerSourceRanges\":[],\"servicePort\":443,\"type\":\"ClusterIP\"}},\"affinity\":{},\"annotations\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":11,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"autoscalingTemplate\":[],\"config\":{},\"configAnnotations\":{},\"configMapNamespace\":\"\",\"containerPort\":{\"http\":80,\"https\":443},\"customTemplate\":{\"configMapKey\":\"\",\"configMapName\":\"\"},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"electionID\":\"ingress-controller-leader\",\"enableMimalloc\":true,\"extraArgs\":{},\"extraContainers\":[],\"extraEnvs\":[],\"extraInitContainers\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"healthCheckPath\":\"/healthz\",\"hostNetwork\":false,\"hostPort\":{\"enabled\":false,\"ports\":{\"http\":80,\"https\":443}},\"image\":{\"allowPrivilegeEscalation\":true,\"digest\":\"sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\",\"pullPolicy\":\"IfNotPresent\",\"repository\":\"k8s.gcr.io/ingress-nginx/controller\",\"runAsUser\":101,\"tag\":\"v0.43.0\"},\"ingressClass\":\"nginx\",\"keda\":{\"apiVersion\":\"keda.sh/v1alpha1\",\"behavior\":{},\"cooldownPeriod\":300,\"enabled\":false,\"maxReplicas\":11,\"minReplicas\":1,\"pollingInterval\":30,\"restoreToOriginalReplicaCount\":false,\"triggers\":[]},\"kind\":\"Deployment\",\"labels\":{},\"lifecycle\":{\"preStop\":{\"exec\":{\"command\":[\"/wait-shutdown\"]}}},\"livenessProbe\":{\"failureThreshold\":5,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"port\":10254,\"successThreshold\":1,\"timeoutSeconds\":1},\"maxmindLicenseKey\":\"\",\"metrics\":{\"enabled\":false,\"port\":10254,\"prometheusRule\":{\"additionalLabels\":{},\"enabled\":false,\"rules\":[]},\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerSourceRanges\":[],\"servicePort\":9913,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":false,\"metricRelabelings\":[],\"namespace\":\"\",\"namespaceSelector\":{},\"scrapeInterval\":\"30s\",\"targetLabels\":[]}},\"minAvailable\":1,\"minReadySeconds\":0,\"name\":\"controller\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"proxySetHeaders\":{},\"publishService\":{\"enabled\":true,\"pathOverride\":\"\"},\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"port\":10254,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"reportNodeInternalIp\":false,\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"90Mi\"}},\"scope\":{\"enabled\":false,\"namespace\":\"\"},\"service\":{\"annotations\":{},\"enableHttp\":true,\"enableHttps\":true,\"enabled\":true,\"externalIPs\":[],\"internal\":{\"annotations\":{},\"enabled\":false,\"loadBalancerSourceRanges\":[]},\"labels\":{},\"loadBalancerSourceRanges\":[],\"nodePorts\":{\"http\":\"\",\"https\":\"\",\"tcp\":{},\"udp\":{}},\"ports\":{\"http\":80,\"https\":443},\"targetPorts\":{\"http\":\"http\",\"https\":\"https\"},\"type\":\"LoadBalancer\"},\"sysctls\":{},\"tcp\":{\"annotations\":{},\"configMapNamespace\":\"\"},\"terminationGracePeriodSeconds\":300,\"tolerations\":[],\"topologySpreadConstraints\":[],\"udp\":{\"annotations\":{},\"configMapNamespace\":\"\"},\"updateStrategy\":{}},\"defaultBackend\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":2,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"enabled\":false,\"extraArgs\":{},\"extraEnvs\":[],\"image\":{\"allowPrivilegeEscalation\":false,\"pullPolicy\":\"IfNotPresent\",\"readOnlyRootFilesystem\":true,\"repository\":\"k8s.gcr.io/defaultbackend-amd64\",\"runAsNonRoot\":true,\"runAsUser\":65534,\"tag\":\"1.5\"},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"minAvailable\":1,\"name\":\"defaultbackend\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"port\":8080,\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":6,\"initialDelaySeconds\":0,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":5},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerIP\":\"34.123.121.124\",\"loadBalancerSourceRanges\":[],\"servicePort\":80,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true,\"name\":null},\"tolerations\":[]},\"imagePullSecrets\":[],\"podSecurityPolicy\":{\"enabled\":false},\"rbac\":{\"create\":true,\"scope\":false},\"revisionHistoryLimit\":10,\"serviceAccount\":{\"create\":true,\"name\":null},\"tcp\":{},\"udp\":{}}",
                "version": "3.19.0"
              }
            ],
            "name": "ingress-nginx",
            "namespace": "nginx",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/ingress-nginx",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 34.123.121.124\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\""
            ],
            "verify": false,
            "version": "3.19.0",
            "wait": true
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_compute_address.nginx",
            "data.template_file.ingress_nginx",
            "google_compute_address.nginx",
            "google_sql_database.gitlabhq_production",
            "kubernetes_namespace.nginx",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "time_sleep.nginx_helm",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "flux",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "flux",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "flux",
                "resource_version": "178005",
                "self_link": "/api/v1/namespaces/flux",
                "uid": "c0567e9e-ea51-4b18-87dc-00b5ce209aec"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "google_sql_database.gitlabhq_production",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "nginx",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "nginx",
                "resource_version": "178004",
                "self_link": "/api/v1/namespaces/nginx",
                "uid": "cb0e8deb-16f0-433e-b7cb-2df93a7905ed"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "google_sql_database.gitlabhq_production",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "flux_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "identity": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKAIBAAKCAgEAsHUSBK0uqQKQCqXKf+CGSWCOKmroSN+vj0M4suV6QAKXO3xT\nCRb8E74KEO0hmITj3AuLbhbAuvgcwjf/FMPYdkYtlphYJxawqVt16Kv+i9WIPH6J\nFpE9Bx1P885uRJgHmmXAn5Z4EZa757manWF0c5AWdVBAVUhM/Upf7XUfEo1pyqGY\nLEPz8F6cOO+AoeoQIMTLYo53ht5XKQKQCVzVfx3ECQtTf2b/4pEAB6yWVb5IbdZO\nbz3e4eVZYiTIkZZDesYfVdQCtIVXDb2f5GlL1grf/Me4SN7QzfIX8QfO1zuibTFZ\n4KDmZcFruyAvHZCiOI6i1TQXuZqmelUVx2zfKQqT8mBc587Nm23NavCKYMfEzunB\nBrbuM8LG8T4RCuyO2PtZudf8lrXfJaab49GQqmxDyu7rRdBcRAGBP9CsM/kXPlku\nGRsSazXWfvkjSm+8pBfNyheQBwb3TD0w3hZCxosQwZ98Mzuy9ylftqah2uVykMnJ\nwHtG1qSsQN9br2WDBezh8BPy5twQkf0N4MEH+7niq8FRmc04KUhkcIUICfq16ERW\n9oO6M4dQLmfViA/R4RNCWIh8K4E2OJH61S2Dvc2VnsVIMx1QeyDBj1wGqYe1Gp+B\nIYaL7+Nrg3L7thuRavHQk1N+mYOxUQElEIY3u/3CnwXIx+EZ9eei5TWUyz0CAwEA\nAQKCAgAm4HQq0ZkRJX5kyig2Slprujk4QTuSKq48Sxwn1gU8KxX0xixpOUYqd1ky\nZ3xaZRTquyRqCdtGljmH1Nx/T7LWRBnxLvllC0u61GrC63n2hwIwCdTcQv2GHsAp\nwBZtSG2MZ9SrlHQ5s9MMd8kH2ZvVhi5chGTYJUjJGWTPJVnGNZ/URAwJ3KLXF5El\nvibCBZauEY2Z1jehYEUlxOnFFk33ZrB1KaioziGcYkP2bODmXTkJ8ghv29rKPESY\nKfCCmu+dEh9/QmmiKiqG3Xtn0IcjzluRDtOcQnMQnMEHmqfIpdvgYNojcm+whY/d\nt3aJ9f63pT1c6dA8VUVOeIaG3IbB3zQdy0rA88OJFBr1VxWdgUMUdHHxdu9s2ORA\nE9/9Hxj1y2/Vs+TG1GcKrunw/h/z/k6aWsK1zIiFSdpNxuybu5Gk5smDZ+oz1+Hj\n2c5e5o1DLVgpDsWNbKzoPAKQHYh+9GwJzXqe+sb+lX3tzqBccvdjnJUFeTKYg4pt\nk7/jNhKb75JYbG7BUm8ZhOpp8JIlgzEHSgVB6BWd19Eo54TuTNi+0Cy2Cg4lLxNz\nBnFVInE0w1k5HZyIcdqW6n7dNGTsEcXft/CHA2q0Sy3c5K+rU4VAgNPQWB2hEEMP\n4/fEMFxat0qTV5WenaRilrvi4YdR6tmL0PIqsJpcCbIcFSCdxQKCAQEAxrlrMyIW\nTuD985bDZJfiFa/xqjHOnUP6xKOqEDBrV5qJex+PumoHXA5j0f/2ASRiuj1Pbr8r\n1TKP2rB0KyV6waABJftVvY5kX3/c9MZ34gIt/w1kH3BZYfciABTYHC655J/PkHKV\nAoDF/lg/nXlG8eBwQP+fjRznSkgBZ5z8y9I4WZHS5VzYQLyap294UFsQYl7L9Y7f\nmOe930/4/ijAN4v7573jrw8Re6xQemAX+WJlE8PSz3Q+nkD2aMF8cVxfPhE6bjsB\nzOIH8N7UFS4OuLHfS/DLMvgG0JzQnN+crXQ6yJpa90L+/rbETMVfqNd4rhK5aoxA\nsxJxtGQVY2M5mwKCAQEA41C2833wW6iEl1fECaJho4PW/4MzMPa6+1Epx/Knk5Hp\njDgWcLdxWVJA+K2W5tWXvZwpvge+3RHgyd2e5INledJTg5z2AvoO2X/Av4OVve7E\n123b8brvL/p1Jf5S4wlZhyFscCdXvZWq1ruYEv7bxNaJNhq+r5OXe2NAwkXICU17\nE165MKhJoDI6LOULv81GTqiMbgODYLxS/SiqgW6eY/RC5u8YNP2yPNjAw5ep7RVp\n3k3qtuRSrxkPFIB3S+eItawvwcM5k8YqCT/vhECExGZk1JPhT7IHtmFEjoXoYypF\ndfDnPml8EqO0hgUQLC5mISfu7Gva8HP5yHBMq3ooBwKCAQB65/DSNjHf5S2Le2Ir\nk/hje2cW4SktgP7WoXar/pZVHyIKgVGudKdKmyfHmOw4dp2NHCBFmXztphDsq5ed\nm9eZa3FqYVD9JNUVb4pj5V/962UxSsHy49SUT3m63Slv/MJCEUkZyJQ6cRSDo2bs\n6TYkoLAssyyl5QtzmKctwx1ingj19MefzdV97GgmSD38TOYMQR8aJ5xJAIMhW1/f\nKasAb9aD1KC+A67Hc6JunYIWXnGvULzQS8/yprD/xzNFFWFejN87j8kkQ2Ov6ND4\nrHy0ZGZ7nFjAlD/6xBIOBAruCGXW7gh2xvvY44bzCFuKnIFp//CnYkkdt7mVXRUR\nXCwjAoIBAGFlQ/4wB7w+CBGQWT6HhK463vO7k0N3c8YakHxLS+G+swKRRYwmDTro\nM05Zkj51Zf6n2nrBdtXhwx67BkmCwwffRkkuB3pfCd3HDx7/kjk/BLgJKiP4pGM6\nPNd6kKkWaHWtrHihYsaoSfqXhiEdcax0/3VfIDS6WD1V2XljzMGvoPw7qb1fXax1\n2NdDjDUyDt3E+eZpOvFHv4cY1XV/n/3TupaX+xc5XBUWCgHECdq7QhEt8VNLoOHF\nKuDt6i9rlPfCPvQWYaUfUwODkWxo+HnuJWWvtuoerY9HPciTN27Fvd06ytnC+JZD\n7iU+Jh/IAZpTMdu6mqRMDMoE09TlEiECggEBAIrLhnCc8bPBcE/d1oOq170gvkx2\n7Q8WyPCEmLjMxXpzbu7Thws6l8dRL10mFIDPX4pv5Nwve5lscNREYjFblYjeBHrS\ndJ1gBpkHYAbDJhAVnVoOhUKKr4wF4B4Ulw04cjGmHOU1n+6bop80DPrZFKPzo7oD\nFNvW7lsbWaAfvY+Hg4wD7epli18qL7mfk3qE9CPwlRm6vnIuvnxH41xpx7X0iBAh\nC4ISZF3EQUxjTh8EXicgERX75SqgZst92CFtYSqoP2sR+fbXk6LfZIGsLobbEyPj\njf47IlSyRyN6dpVX7fOQ5h3mSXnZ8QJvo+ATi5FgBMgpilSl4celoTPC+SE=\n-----END RSA PRIVATE KEY-----\n"
            },
            "id": "flux/flux-ssh",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "flux-ssh",
                "namespace": "flux",
                "resource_version": "178010",
                "self_link": "/api/v1/namespaces/flux/secrets/flux-ssh",
                "uid": "5a6005a2-6780-4f64-87fd-0a9b596a9e5a"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_sql_database.gitlabhq_production",
            "kubernetes_namespace.flux",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_gcs_credentials",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "gcs-application-credentials-file": "{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"bcc90165e8a3e28133ba61bb165aca5dc46e3618\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCpuXbG0oHgl93a\\ncftxiQLQpi9mdbupvNJuwkRR0cNzpxq/NzJcEGMLXXSL8xUpICSpmI0UDD83wR7Z\\nDvKh6MWYpfengFy/cZApQm0LbftsZgyOFkmXIB3mPzP/G5+raO5fT1sly33KXrA8\\nqZ5jyPA6Wt4xiSDGCUFQcUfylcSKeIyXgd5ia/9tUwpU1Ar9qRpp1IwGIlkTM+jR\\nE5zU4D5VpYvKjVPNR3lRwfDj1eKA2+nW1yJSdVHQ9s9GUKVlQUvl6ZMCoG9ePP8t\\n8bW86q4kvqiBKPez+3XXWWUmZwS4VJLxPnBJrWHwGEpja+wztR1PYypNa8cI4bhp\\ndY6g37JzAgMBAAECggEAT23O4uxYQNIBzv3h1TfwG9JyQ2qcySpndtMuovXemQze\\nrRc5V7GJkKOLbAV2ZTk4PzB38aZrnX2hIKbosRIdCzu8w2SEw0lz1INUQfGWJRw7\\nCvHuPa4XoA37GQwF9POV/v/F4dGyTFd09ebRi9RZbI3jB16r+lIRgYKKT8J8aOqO\\nQsyh8nIWVn8FfpHplMPvo1Pf76a+rLYzQbiV1fOHYVr2XqOXz2kjUn+3TKiGR5Du\\nDxqJu/tEB23pIuq9JOEoX+jC+mT43947JFulowCOtryFB1ZpwQzKMb3Y89GRU3Gr\\nXh2GDNbBEP8HeUFk+aPedB7tvs55zS6aolEWOCN40QKBgQDqEySsCitec922L10+\\nDzUMloaFXtozvvwyf0lUazYzhjDX1efsb0HaqAGOMPMCQenRs67Yi5DG30saIQfM\\nSOSHQcp89aGSWhVpU/5TVifoL43jK4SHf8WHWXd3nrOC+s3sPcF++c3zPqiKHC8j\\n3SGTV8/niB0M+5gVFVnssVNLQwKBgQC5n0VSo0Xmz7AhwYy3yIzqa5qwYYFggg4W\\nSHn6XaiUKn7b7oUW8ixxYXJ6dX0gAZY0GUlXwfOSL/nNwN6gXTw3vQ5qFKiHw3ZG\\nSgIO3ZWBwgf4NIf4iEIbhsrY7cg9LxaSeGbvWPSpyUc/oqGyik+crj/ujLsvF+Wu\\nwYYpiSLREQKBgH3pQD++1KdhIjEe90Qrv/h+e+wAItXU9Spgp9xeM3CxzVI8wR3A\\nlyb8WqHXGNDtDc58nh/jq0Qe1vI+NEiiKTPMoxRmuLvV81COGu9PF/Zgpi09unN8\\nuo9dA9N3rc5WBTD/4zbfPvaKjPSFxqG/EJGGmdJMuHvEVoF4079rf4erAoGBAIra\\n0x/DVaoYmPhXci2VD5zYy8m/1ulbwK/4nY6le1MDCwz4u4Rzur1CGUH0G5rStQra\\nE5xbURp9WxAIhEFQHZjQizTdqUiN9i8Uc7+tEIcVn6KToVdQjqtKxPlLvuvOCsOc\\n39uSHsvX7r1yqiUGBBH/44FOs0PCS6XTzMnLdUkRAoGBAKka6PTo+m60I5kKQzr1\\nG8HIC5Kz5Vui7S9fe2FiATAgnt690UIVZ3B7EMamSufwR0XWao5vRY0xe8QCuLtP\\nne0lVfwsfDpZp5zC3ODIxiEMmLtNk7KBpv03Cy7blTe+2vQ6ib9OPa8ehH71lvLb\\nfo18bplaOtfJcO1qpKY46Ger\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"106980907605845205331\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n"
            },
            "id": "default/google-application-credentials",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "google-application-credentials",
                "namespace": "default",
                "resource_version": "62893",
                "self_link": "/api/v1/namespaces/default/secrets/google-application-credentials",
                "uid": "b391ee9b-83f7-4107-a6a3-86d279ff3438"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_pg",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "password": "dB1tsBBoxelmaxXI"
            },
            "id": "default/gitlab-pg",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-pg",
                "namespace": "default",
                "resource_version": "62875",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-pg",
                "uid": "9db84c91-4de2-4c96-b113-45fc1cd2ac00"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_rails_storage",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "connection": "provider: Google\ngoogle_project: lrc-portfolio-1138\ngoogle_client_email: gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\ngoogle_json_key_string: '{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"bcc90165e8a3e28133ba61bb165aca5dc46e3618\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCpuXbG0oHgl93a\\ncftxiQLQpi9mdbupvNJuwkRR0cNzpxq/NzJcEGMLXXSL8xUpICSpmI0UDD83wR7Z\\nDvKh6MWYpfengFy/cZApQm0LbftsZgyOFkmXIB3mPzP/G5+raO5fT1sly33KXrA8\\nqZ5jyPA6Wt4xiSDGCUFQcUfylcSKeIyXgd5ia/9tUwpU1Ar9qRpp1IwGIlkTM+jR\\nE5zU4D5VpYvKjVPNR3lRwfDj1eKA2+nW1yJSdVHQ9s9GUKVlQUvl6ZMCoG9ePP8t\\n8bW86q4kvqiBKPez+3XXWWUmZwS4VJLxPnBJrWHwGEpja+wztR1PYypNa8cI4bhp\\ndY6g37JzAgMBAAECggEAT23O4uxYQNIBzv3h1TfwG9JyQ2qcySpndtMuovXemQze\\nrRc5V7GJkKOLbAV2ZTk4PzB38aZrnX2hIKbosRIdCzu8w2SEw0lz1INUQfGWJRw7\\nCvHuPa4XoA37GQwF9POV/v/F4dGyTFd09ebRi9RZbI3jB16r+lIRgYKKT8J8aOqO\\nQsyh8nIWVn8FfpHplMPvo1Pf76a+rLYzQbiV1fOHYVr2XqOXz2kjUn+3TKiGR5Du\\nDxqJu/tEB23pIuq9JOEoX+jC+mT43947JFulowCOtryFB1ZpwQzKMb3Y89GRU3Gr\\nXh2GDNbBEP8HeUFk+aPedB7tvs55zS6aolEWOCN40QKBgQDqEySsCitec922L10+\\nDzUMloaFXtozvvwyf0lUazYzhjDX1efsb0HaqAGOMPMCQenRs67Yi5DG30saIQfM\\nSOSHQcp89aGSWhVpU/5TVifoL43jK4SHf8WHWXd3nrOC+s3sPcF++c3zPqiKHC8j\\n3SGTV8/niB0M+5gVFVnssVNLQwKBgQC5n0VSo0Xmz7AhwYy3yIzqa5qwYYFggg4W\\nSHn6XaiUKn7b7oUW8ixxYXJ6dX0gAZY0GUlXwfOSL/nNwN6gXTw3vQ5qFKiHw3ZG\\nSgIO3ZWBwgf4NIf4iEIbhsrY7cg9LxaSeGbvWPSpyUc/oqGyik+crj/ujLsvF+Wu\\nwYYpiSLREQKBgH3pQD++1KdhIjEe90Qrv/h+e+wAItXU9Spgp9xeM3CxzVI8wR3A\\nlyb8WqHXGNDtDc58nh/jq0Qe1vI+NEiiKTPMoxRmuLvV81COGu9PF/Zgpi09unN8\\nuo9dA9N3rc5WBTD/4zbfPvaKjPSFxqG/EJGGmdJMuHvEVoF4079rf4erAoGBAIra\\n0x/DVaoYmPhXci2VD5zYy8m/1ulbwK/4nY6le1MDCwz4u4Rzur1CGUH0G5rStQra\\nE5xbURp9WxAIhEFQHZjQizTdqUiN9i8Uc7+tEIcVn6KToVdQjqtKxPlLvuvOCsOc\\n39uSHsvX7r1yqiUGBBH/44FOs0PCS6XTzMnLdUkRAoGBAKka6PTo+m60I5kKQzr1\\nG8HIC5Kz5Vui7S9fe2FiATAgnt690UIVZ3B7EMamSufwR0XWao5vRY0xe8QCuLtP\\nne0lVfwsfDpZp5zC3ODIxiEMmLtNk7KBpv03Cy7blTe+2vQ6ib9OPa8ehH71lvLb\\nfo18bplaOtfJcO1qpKY46Ger\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"106980907605845205331\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n'\n"
            },
            "id": "default/gitlab-rails-storage",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-rails-storage",
                "namespace": "default",
                "resource_version": "62895",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-rails-storage",
                "uid": "4742d96b-24cc-4a93-abfa-9d8d65098cd2"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_registry_storage",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "gcs.json": "{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"bcc90165e8a3e28133ba61bb165aca5dc46e3618\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCpuXbG0oHgl93a\\ncftxiQLQpi9mdbupvNJuwkRR0cNzpxq/NzJcEGMLXXSL8xUpICSpmI0UDD83wR7Z\\nDvKh6MWYpfengFy/cZApQm0LbftsZgyOFkmXIB3mPzP/G5+raO5fT1sly33KXrA8\\nqZ5jyPA6Wt4xiSDGCUFQcUfylcSKeIyXgd5ia/9tUwpU1Ar9qRpp1IwGIlkTM+jR\\nE5zU4D5VpYvKjVPNR3lRwfDj1eKA2+nW1yJSdVHQ9s9GUKVlQUvl6ZMCoG9ePP8t\\n8bW86q4kvqiBKPez+3XXWWUmZwS4VJLxPnBJrWHwGEpja+wztR1PYypNa8cI4bhp\\ndY6g37JzAgMBAAECggEAT23O4uxYQNIBzv3h1TfwG9JyQ2qcySpndtMuovXemQze\\nrRc5V7GJkKOLbAV2ZTk4PzB38aZrnX2hIKbosRIdCzu8w2SEw0lz1INUQfGWJRw7\\nCvHuPa4XoA37GQwF9POV/v/F4dGyTFd09ebRi9RZbI3jB16r+lIRgYKKT8J8aOqO\\nQsyh8nIWVn8FfpHplMPvo1Pf76a+rLYzQbiV1fOHYVr2XqOXz2kjUn+3TKiGR5Du\\nDxqJu/tEB23pIuq9JOEoX+jC+mT43947JFulowCOtryFB1ZpwQzKMb3Y89GRU3Gr\\nXh2GDNbBEP8HeUFk+aPedB7tvs55zS6aolEWOCN40QKBgQDqEySsCitec922L10+\\nDzUMloaFXtozvvwyf0lUazYzhjDX1efsb0HaqAGOMPMCQenRs67Yi5DG30saIQfM\\nSOSHQcp89aGSWhVpU/5TVifoL43jK4SHf8WHWXd3nrOC+s3sPcF++c3zPqiKHC8j\\n3SGTV8/niB0M+5gVFVnssVNLQwKBgQC5n0VSo0Xmz7AhwYy3yIzqa5qwYYFggg4W\\nSHn6XaiUKn7b7oUW8ixxYXJ6dX0gAZY0GUlXwfOSL/nNwN6gXTw3vQ5qFKiHw3ZG\\nSgIO3ZWBwgf4NIf4iEIbhsrY7cg9LxaSeGbvWPSpyUc/oqGyik+crj/ujLsvF+Wu\\nwYYpiSLREQKBgH3pQD++1KdhIjEe90Qrv/h+e+wAItXU9Spgp9xeM3CxzVI8wR3A\\nlyb8WqHXGNDtDc58nh/jq0Qe1vI+NEiiKTPMoxRmuLvV81COGu9PF/Zgpi09unN8\\nuo9dA9N3rc5WBTD/4zbfPvaKjPSFxqG/EJGGmdJMuHvEVoF4079rf4erAoGBAIra\\n0x/DVaoYmPhXci2VD5zYy8m/1ulbwK/4nY6le1MDCwz4u4Rzur1CGUH0G5rStQra\\nE5xbURp9WxAIhEFQHZjQizTdqUiN9i8Uc7+tEIcVn6KToVdQjqtKxPlLvuvOCsOc\\n39uSHsvX7r1yqiUGBBH/44FOs0PCS6XTzMnLdUkRAoGBAKka6PTo+m60I5kKQzr1\\nG8HIC5Kz5Vui7S9fe2FiATAgnt690UIVZ3B7EMamSufwR0XWao5vRY0xe8QCuLtP\\nne0lVfwsfDpZp5zC3ODIxiEMmLtNk7KBpv03Cy7blTe+2vQ6ib9OPa8ehH71lvLb\\nfo18bplaOtfJcO1qpKY46Ger\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"106980907605845205331\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n\n",
              "storage": "gcs:\n  bucket: lrc-portfolio-1138-registry\n  keyfile: /etc/docker/registry/storage/gcs.json\n"
            },
            "id": "default/gitlab-registry-storage",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-registry-storage",
                "namespace": "default",
                "resource_version": "62894",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-registry-storage",
                "uid": "e1eb3252-4168-4e45-80f2-809c1e077cc6"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_storage_class",
      "name": "pd-ssd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allow_volume_expansion": true,
            "id": "pd-ssd",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "pd-ssd",
                "resource_version": "62876",
                "self_link": "/apis/storage.k8s.io/v1/storageclasses/pd-ssd",
                "uid": "a7d7a306-da39-46b3-988b-ad8f7ad65ffa"
              }
            ],
            "mount_options": [],
            "parameters": {
              "type": "pd-ssd"
            },
            "reclaim_policy": "Delete",
            "storage_provisioner": "kubernetes.io/gce-pd",
            "volume_binding_mode": "Immediate"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "flux_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/flux-values.yaml",
            "id": "99a0324621b8ed1ad1334015c5aaa3a1a8f707c2",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.flux_yaml",
            "google_sql_database.gitlabhq_production",
            "kubernetes_namespace.flux",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_service.project_services",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "gitlab_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.226.182.91.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.226.182.91\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.3\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.32.54.20\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/gitlab-values.yaml",
            "id": "bb0ad33b9604fe8a2d9d0a1b1290771ebde7631b",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.gitlab_values"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "ingress_nginx_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 34.123.121.124\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/ingress-nginx.yaml",
            "id": "9bf68dbcb932eedcb2864856fbdded9457a0b90d",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_compute_address.nginx",
            "data.template_file.ingress_nginx",
            "google_compute_address.nginx",
            "google_sql_database.gitlabhq_production",
            "helm_release.helm_operator",
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "time_sleep.nginx_helm",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_id",
      "name": "suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "b64_std": "K0c=",
            "b64_url": "K0c",
            "byte_length": 2,
            "dec": "11079",
            "hex": "2b47",
            "id": "K0c",
            "keepers": null,
            "prefix": null
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "autogenerated_gitlab_db_password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "dB1tsBBoxelmaxXI",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "dB1tsBBoxelmaxXI",
            "special": false,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "nginx_helm",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "120s",
            "destroy_duration": "10s",
            "id": "2021-03-27T01:03:52Z",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_address.nginx",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "sleep_for_cluster_fix_helm_6361",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "300s",
            "destroy_duration": "60s",
            "id": "2021-03-27T01:06:52Z",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_sql_database.gitlabhq_production",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tls_private_key",
      "name": "flux_deploy_key",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "algorithm": "RSA",
            "ecdsa_curve": "P224",
            "id": "e2f05b2c6a240fe4dd9e2f4c9a85054b57c7ce41",
            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKAIBAAKCAgEAsHUSBK0uqQKQCqXKf+CGSWCOKmroSN+vj0M4suV6QAKXO3xT\nCRb8E74KEO0hmITj3AuLbhbAuvgcwjf/FMPYdkYtlphYJxawqVt16Kv+i9WIPH6J\nFpE9Bx1P885uRJgHmmXAn5Z4EZa757manWF0c5AWdVBAVUhM/Upf7XUfEo1pyqGY\nLEPz8F6cOO+AoeoQIMTLYo53ht5XKQKQCVzVfx3ECQtTf2b/4pEAB6yWVb5IbdZO\nbz3e4eVZYiTIkZZDesYfVdQCtIVXDb2f5GlL1grf/Me4SN7QzfIX8QfO1zuibTFZ\n4KDmZcFruyAvHZCiOI6i1TQXuZqmelUVx2zfKQqT8mBc587Nm23NavCKYMfEzunB\nBrbuM8LG8T4RCuyO2PtZudf8lrXfJaab49GQqmxDyu7rRdBcRAGBP9CsM/kXPlku\nGRsSazXWfvkjSm+8pBfNyheQBwb3TD0w3hZCxosQwZ98Mzuy9ylftqah2uVykMnJ\nwHtG1qSsQN9br2WDBezh8BPy5twQkf0N4MEH+7niq8FRmc04KUhkcIUICfq16ERW\n9oO6M4dQLmfViA/R4RNCWIh8K4E2OJH61S2Dvc2VnsVIMx1QeyDBj1wGqYe1Gp+B\nIYaL7+Nrg3L7thuRavHQk1N+mYOxUQElEIY3u/3CnwXIx+EZ9eei5TWUyz0CAwEA\nAQKCAgAm4HQq0ZkRJX5kyig2Slprujk4QTuSKq48Sxwn1gU8KxX0xixpOUYqd1ky\nZ3xaZRTquyRqCdtGljmH1Nx/T7LWRBnxLvllC0u61GrC63n2hwIwCdTcQv2GHsAp\nwBZtSG2MZ9SrlHQ5s9MMd8kH2ZvVhi5chGTYJUjJGWTPJVnGNZ/URAwJ3KLXF5El\nvibCBZauEY2Z1jehYEUlxOnFFk33ZrB1KaioziGcYkP2bODmXTkJ8ghv29rKPESY\nKfCCmu+dEh9/QmmiKiqG3Xtn0IcjzluRDtOcQnMQnMEHmqfIpdvgYNojcm+whY/d\nt3aJ9f63pT1c6dA8VUVOeIaG3IbB3zQdy0rA88OJFBr1VxWdgUMUdHHxdu9s2ORA\nE9/9Hxj1y2/Vs+TG1GcKrunw/h/z/k6aWsK1zIiFSdpNxuybu5Gk5smDZ+oz1+Hj\n2c5e5o1DLVgpDsWNbKzoPAKQHYh+9GwJzXqe+sb+lX3tzqBccvdjnJUFeTKYg4pt\nk7/jNhKb75JYbG7BUm8ZhOpp8JIlgzEHSgVB6BWd19Eo54TuTNi+0Cy2Cg4lLxNz\nBnFVInE0w1k5HZyIcdqW6n7dNGTsEcXft/CHA2q0Sy3c5K+rU4VAgNPQWB2hEEMP\n4/fEMFxat0qTV5WenaRilrvi4YdR6tmL0PIqsJpcCbIcFSCdxQKCAQEAxrlrMyIW\nTuD985bDZJfiFa/xqjHOnUP6xKOqEDBrV5qJex+PumoHXA5j0f/2ASRiuj1Pbr8r\n1TKP2rB0KyV6waABJftVvY5kX3/c9MZ34gIt/w1kH3BZYfciABTYHC655J/PkHKV\nAoDF/lg/nXlG8eBwQP+fjRznSkgBZ5z8y9I4WZHS5VzYQLyap294UFsQYl7L9Y7f\nmOe930/4/ijAN4v7573jrw8Re6xQemAX+WJlE8PSz3Q+nkD2aMF8cVxfPhE6bjsB\nzOIH8N7UFS4OuLHfS/DLMvgG0JzQnN+crXQ6yJpa90L+/rbETMVfqNd4rhK5aoxA\nsxJxtGQVY2M5mwKCAQEA41C2833wW6iEl1fECaJho4PW/4MzMPa6+1Epx/Knk5Hp\njDgWcLdxWVJA+K2W5tWXvZwpvge+3RHgyd2e5INledJTg5z2AvoO2X/Av4OVve7E\n123b8brvL/p1Jf5S4wlZhyFscCdXvZWq1ruYEv7bxNaJNhq+r5OXe2NAwkXICU17\nE165MKhJoDI6LOULv81GTqiMbgODYLxS/SiqgW6eY/RC5u8YNP2yPNjAw5ep7RVp\n3k3qtuRSrxkPFIB3S+eItawvwcM5k8YqCT/vhECExGZk1JPhT7IHtmFEjoXoYypF\ndfDnPml8EqO0hgUQLC5mISfu7Gva8HP5yHBMq3ooBwKCAQB65/DSNjHf5S2Le2Ir\nk/hje2cW4SktgP7WoXar/pZVHyIKgVGudKdKmyfHmOw4dp2NHCBFmXztphDsq5ed\nm9eZa3FqYVD9JNUVb4pj5V/962UxSsHy49SUT3m63Slv/MJCEUkZyJQ6cRSDo2bs\n6TYkoLAssyyl5QtzmKctwx1ingj19MefzdV97GgmSD38TOYMQR8aJ5xJAIMhW1/f\nKasAb9aD1KC+A67Hc6JunYIWXnGvULzQS8/yprD/xzNFFWFejN87j8kkQ2Ov6ND4\nrHy0ZGZ7nFjAlD/6xBIOBAruCGXW7gh2xvvY44bzCFuKnIFp//CnYkkdt7mVXRUR\nXCwjAoIBAGFlQ/4wB7w+CBGQWT6HhK463vO7k0N3c8YakHxLS+G+swKRRYwmDTro\nM05Zkj51Zf6n2nrBdtXhwx67BkmCwwffRkkuB3pfCd3HDx7/kjk/BLgJKiP4pGM6\nPNd6kKkWaHWtrHihYsaoSfqXhiEdcax0/3VfIDS6WD1V2XljzMGvoPw7qb1fXax1\n2NdDjDUyDt3E+eZpOvFHv4cY1XV/n/3TupaX+xc5XBUWCgHECdq7QhEt8VNLoOHF\nKuDt6i9rlPfCPvQWYaUfUwODkWxo+HnuJWWvtuoerY9HPciTN27Fvd06ytnC+JZD\n7iU+Jh/IAZpTMdu6mqRMDMoE09TlEiECggEBAIrLhnCc8bPBcE/d1oOq170gvkx2\n7Q8WyPCEmLjMxXpzbu7Thws6l8dRL10mFIDPX4pv5Nwve5lscNREYjFblYjeBHrS\ndJ1gBpkHYAbDJhAVnVoOhUKKr4wF4B4Ulw04cjGmHOU1n+6bop80DPrZFKPzo7oD\nFNvW7lsbWaAfvY+Hg4wD7epli18qL7mfk3qE9CPwlRm6vnIuvnxH41xpx7X0iBAh\nC4ISZF3EQUxjTh8EXicgERX75SqgZst92CFtYSqoP2sR+fbXk6LfZIGsLobbEyPj\njf47IlSyRyN6dpVX7fOQ5h3mSXnZ8QJvo+ATi5FgBMgpilSl4celoTPC+SE=\n-----END RSA PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "d3:9d:0d:30:28:52:c4:5d:f3:ff:39:27:78:52:e6:f8",
            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCwdRIErS6pApAKpcp/4IZJYI4qauhI36+PQziy5XpAApc7fFMJFvwTvgoQ7SGYhOPcC4tuFsC6+BzCN/8Uw9h2Ri2WmFgnFrCpW3Xoq/6L1Yg8fokWkT0HHU/zzm5EmAeaZcCflngRlrvnuZqdYXRzkBZ1UEBVSEz9Sl/tdR8SjWnKoZgsQ/PwXpw474Ch6hAgxMtijneG3lcpApAJXNV/HcQJC1N/Zv/ikQAHrJZVvkht1k5vPd7h5VliJMiRlkN6xh9V1AK0hVcNvZ/kaUvWCt/8x7hI3tDN8hfxB87XO6JtMVngoOZlwWu7IC8dkKI4jqLVNBe5mqZ6VRXHbN8pCpPyYFznzs2bbc1q8Ipgx8TO6cEGtu4zwsbxPhEK7I7Y+1m51/yWtd8lppvj0ZCqbEPK7utF0FxEAYE/0Kwz+Rc+WS4ZGxJrNdZ++SNKb7ykF83KF5AHBvdMPTDeFkLGixDBn3wzO7L3KV+2pqHa5XKQycnAe0bWpKxA31uvZYMF7OHwE/Lm3BCR/Q3gwQf7ueKrwVGZzTgpSGRwhQgJ+rXoRFb2g7ozh1AuZ9WID9HhE0JYiHwrgTY4kfrVLYO9zZWexUgzHVB7IMGPXAaph7Uan4Ehhovv42uDcvu2G5Fq8dCTU36Zg7FRASUQhje7/cKfBcjH4Rn156LlNZTLPQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAsHUSBK0uqQKQCqXKf+CG\nSWCOKmroSN+vj0M4suV6QAKXO3xTCRb8E74KEO0hmITj3AuLbhbAuvgcwjf/FMPY\ndkYtlphYJxawqVt16Kv+i9WIPH6JFpE9Bx1P885uRJgHmmXAn5Z4EZa757manWF0\nc5AWdVBAVUhM/Upf7XUfEo1pyqGYLEPz8F6cOO+AoeoQIMTLYo53ht5XKQKQCVzV\nfx3ECQtTf2b/4pEAB6yWVb5IbdZObz3e4eVZYiTIkZZDesYfVdQCtIVXDb2f5GlL\n1grf/Me4SN7QzfIX8QfO1zuibTFZ4KDmZcFruyAvHZCiOI6i1TQXuZqmelUVx2zf\nKQqT8mBc587Nm23NavCKYMfEzunBBrbuM8LG8T4RCuyO2PtZudf8lrXfJaab49GQ\nqmxDyu7rRdBcRAGBP9CsM/kXPlkuGRsSazXWfvkjSm+8pBfNyheQBwb3TD0w3hZC\nxosQwZ98Mzuy9ylftqah2uVykMnJwHtG1qSsQN9br2WDBezh8BPy5twQkf0N4MEH\n+7niq8FRmc04KUhkcIUICfq16ERW9oO6M4dQLmfViA/R4RNCWIh8K4E2OJH61S2D\nvc2VnsVIMx1QeyDBj1wGqYe1Gp+BIYaL7+Nrg3L7thuRavHQk1N+mYOxUQElEIY3\nu/3CnwXIx+EZ9eei5TWUyz0CAwEAAQ==\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 4096
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_client_config",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_token": "ya29.a0AfH6SMCEJkfvFYCmp_VPT_xwlUx240cFMXQxH3j8T0o7K7ApTxp6W0SMZEQ5UvZpCTDgPtxhB5lo3NeXxittqlWkfDS-s0tWhwUeSQr7rSKcv-PbsGomeghsbdZYWYQnXfH0eAtCF84tMez74lHd331TlUWcVg",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/zones/",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "zone": ""
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_compute_zones",
      "name": "available",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/lrc-portfolio-1138/regions/us-central1",
            "names": [
              "us-central1-a",
              "us-central1-b",
              "us-central1-c",
              "us-central1-f"
            ],
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "status": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_container_engine_versions",
      "name": "region",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "default_cluster_version": "1.17.17-gke.1101",
            "id": "2021-03-27 01:09:43.242973 +0000 UTC",
            "latest_master_version": "1.18.16-gke.1200",
            "latest_node_version": "1.18.16-gke.1200",
            "location": "us-central1",
            "project": "lrc-portfolio-1138",
            "release_channel_default_version": {
              "RAPID": "1.19.8-gke.1000",
              "REGULAR": "1.18.15-gke.1501",
              "STABLE": "1.17.17-gke.1101"
            },
            "valid_master_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.15-gke.800",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.15.12-gke.6002"
            ],
            "valid_node_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.2500",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.15-gke.800",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.18.12-gke.1206",
              "1.18.12-gke.1205",
              "1.18.12-gke.1201",
              "1.18.12-gke.1200",
              "1.18.12-gke.300",
              "1.18.10-gke.2701",
              "1.18.10-gke.2101",
              "1.18.10-gke.1500",
              "1.18.10-gke.601",
              "1.18.9-gke.2501",
              "1.18.9-gke.1501",
              "1.18.9-gke.801",
              "1.18.6-gke.4801",
              "1.18.6-gke.3504",
              "1.18.6-gke.3503",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.2500",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.17-gke.600",
              "1.17.16-gke.1600",
              "1.17.16-gke.1300",
              "1.17.15-gke.800",
              "1.17.15-gke.300",
              "1.17.14-gke.1600",
              "1.17.14-gke.1200",
              "1.17.14-gke.400",
              "1.17.13-gke.2600",
              "1.17.13-gke.2001",
              "1.17.13-gke.1401",
              "1.17.13-gke.1400",
              "1.17.13-gke.600",
              "1.17.12-gke.2502",
              "1.17.12-gke.1504",
              "1.17.12-gke.1501",
              "1.17.12-gke.500",
              "1.17.9-gke.6300",
              "1.17.9-gke.1504",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.16.15-gke.7800",
              "1.16.15-gke.7300",
              "1.16.15-gke.6900",
              "1.16.15-gke.6000",
              "1.16.15-gke.5500",
              "1.16.15-gke.4901",
              "1.16.15-gke.4301",
              "1.16.15-gke.4300",
              "1.16.15-gke.3500",
              "1.16.15-gke.2601",
              "1.16.15-gke.1600",
              "1.16.15-gke.500",
              "1.16.13-gke.404",
              "1.16.13-gke.403",
              "1.16.13-gke.401",
              "1.16.13-gke.400",
              "1.16.13-gke.1",
              "1.16.11-gke.5",
              "1.16.10-gke.8",
              "1.16.9-gke.6",
              "1.16.9-gke.2",
              "1.16.8-gke.15",
              "1.16.8-gke.12",
              "1.16.8-gke.9",
              "1.15.12-gke.6002",
              "1.15.12-gke.6001",
              "1.15.12-gke.5000",
              "1.15.12-gke.4002",
              "1.15.12-gke.4000",
              "1.15.12-gke.20",
              "1.15.12-gke.17",
              "1.15.12-gke.16",
              "1.15.12-gke.13",
              "1.15.12-gke.9",
              "1.15.12-gke.6",
              "1.15.12-gke.3",
              "1.15.12-gke.2",
              "1.15.11-gke.17",
              "1.15.11-gke.15",
              "1.15.11-gke.13",
              "1.15.11-gke.12",
              "1.15.11-gke.11",
              "1.15.11-gke.9",
              "1.15.11-gke.5",
              "1.15.11-gke.3",
              "1.15.11-gke.1",
              "1.15.9-gke.26",
              "1.15.9-gke.24",
              "1.15.9-gke.22",
              "1.15.9-gke.12",
              "1.15.9-gke.9",
              "1.15.9-gke.8",
              "1.15.8-gke.3",
              "1.15.8-gke.2",
              "1.15.7-gke.23",
              "1.15.7-gke.2",
              "1.15.4-gke.22",
              "1.14.10-gke.1504",
              "1.14.10-gke.902",
              "1.14.10-gke.50",
              "1.14.10-gke.46",
              "1.14.10-gke.45",
              "1.14.10-gke.42",
              "1.14.10-gke.41",
              "1.14.10-gke.40",
              "1.14.10-gke.37",
              "1.14.10-gke.36",
              "1.14.10-gke.34",
              "1.14.10-gke.32",
              "1.14.10-gke.31",
              "1.14.10-gke.27",
              "1.14.10-gke.24",
              "1.14.10-gke.22",
              "1.14.10-gke.21",
              "1.14.10-gke.17",
              "1.14.10-gke.0",
              "1.14.9-gke.23",
              "1.14.9-gke.2",
              "1.14.9-gke.0",
              "1.14.8-gke.33",
              "1.14.8-gke.21",
              "1.14.8-gke.18",
              "1.14.8-gke.17",
              "1.14.8-gke.14",
              "1.14.8-gke.12",
              "1.14.8-gke.7",
              "1.14.8-gke.2",
              "1.14.7-gke.40",
              "1.14.7-gke.25",
              "1.14.7-gke.23",
              "1.14.7-gke.17",
              "1.14.7-gke.14",
              "1.14.7-gke.10",
              "1.14.6-gke.13",
              "1.14.6-gke.2",
              "1.14.6-gke.1",
              "1.14.3-gke.11",
              "1.14.3-gke.10",
              "1.14.3-gke.9",
              "1.14.2-gke.9",
              "1.14.1-gke.5",
              "1.13.12-gke.30",
              "1.13.12-gke.25",
              "1.13.12-gke.17",
              "1.13.12-gke.16",
              "1.13.12-gke.14",
              "1.13.12-gke.13",
              "1.13.12-gke.10",
              "1.13.12-gke.8",
              "1.13.12-gke.4",
              "1.13.12-gke.2",
              "1.13.11-gke.23",
              "1.13.11-gke.15",
              "1.13.11-gke.14",
              "1.13.11-gke.12",
              "1.13.11-gke.11",
              "1.13.11-gke.9",
              "1.13.11-gke.5",
              "1.13.10-gke.7",
              "1.13.10-gke.0",
              "1.13.9-gke.11",
              "1.13.9-gke.3",
              "1.13.7-gke.24",
              "1.13.7-gke.19",
              "1.13.7-gke.15",
              "1.13.7-gke.8",
              "1.13.7-gke.0",
              "1.13.6-gke.13",
              "1.13.6-gke.6",
              "1.13.6-gke.5",
              "1.13.6-gke.0",
              "1.13.5-gke.10",
              "1.12.10-gke.22",
              "1.12.10-gke.20",
              "1.12.10-gke.19",
              "1.12.10-gke.18",
              "1.12.10-gke.17",
              "1.12.10-gke.15",
              "1.12.10-gke.13",
              "1.12.10-gke.11",
              "1.12.10-gke.5",
              "1.12.9-gke.16",
              "1.12.9-gke.15",
              "1.12.9-gke.13",
              "1.12.9-gke.10",
              "1.12.9-gke.7",
              "1.12.9-gke.3",
              "1.12.8-gke.12",
              "1.12.8-gke.10",
              "1.12.8-gke.7",
              "1.12.8-gke.6",
              "1.12.7-gke.26",
              "1.12.7-gke.25",
              "1.12.7-gke.24",
              "1.12.7-gke.22",
              "1.12.7-gke.21",
              "1.12.7-gke.17",
              "1.12.7-gke.10",
              "1.12.7-gke.7",
              "1.12.6-gke.11",
              "1.12.6-gke.10",
              "1.12.6-gke.7",
              "1.12.5-gke.10",
              "1.12.5-gke.5",
              "1.11.10-gke.6",
              "1.11.10-gke.5"
            ],
            "version_prefix": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_container_engine_versions",
      "name": "zone",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "default_cluster_version": "1.17.17-gke.1101",
            "id": "2021-03-27 01:09:43.602697 +0000 UTC",
            "latest_master_version": "1.18.16-gke.1200",
            "latest_node_version": "1.18.16-gke.1200",
            "location": "us-central1-a",
            "project": "lrc-portfolio-1138",
            "release_channel_default_version": {
              "RAPID": "1.19.8-gke.1000",
              "REGULAR": "1.18.15-gke.1501",
              "STABLE": "1.17.17-gke.1101"
            },
            "valid_master_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.15-gke.800",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.15.12-gke.6002"
            ],
            "valid_node_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.2500",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.15-gke.800",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.18.12-gke.1206",
              "1.18.12-gke.1205",
              "1.18.12-gke.1201",
              "1.18.12-gke.1200",
              "1.18.12-gke.300",
              "1.18.10-gke.2701",
              "1.18.10-gke.2101",
              "1.18.10-gke.1500",
              "1.18.10-gke.601",
              "1.18.9-gke.2501",
              "1.18.9-gke.1501",
              "1.18.9-gke.801",
              "1.18.6-gke.4801",
              "1.18.6-gke.3504",
              "1.18.6-gke.3503",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.2500",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.17-gke.600",
              "1.17.16-gke.1600",
              "1.17.16-gke.1300",
              "1.17.15-gke.800",
              "1.17.15-gke.300",
              "1.17.14-gke.1600",
              "1.17.14-gke.1200",
              "1.17.14-gke.400",
              "1.17.13-gke.2600",
              "1.17.13-gke.2001",
              "1.17.13-gke.1401",
              "1.17.13-gke.1400",
              "1.17.13-gke.600",
              "1.17.12-gke.2502",
              "1.17.12-gke.1504",
              "1.17.12-gke.1501",
              "1.17.12-gke.500",
              "1.17.9-gke.6300",
              "1.17.9-gke.1504",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.16.15-gke.7800",
              "1.16.15-gke.7300",
              "1.16.15-gke.6900",
              "1.16.15-gke.6000",
              "1.16.15-gke.5500",
              "1.16.15-gke.4901",
              "1.16.15-gke.4301",
              "1.16.15-gke.4300",
              "1.16.15-gke.3500",
              "1.16.15-gke.2601",
              "1.16.15-gke.1600",
              "1.16.15-gke.500",
              "1.16.13-gke.404",
              "1.16.13-gke.403",
              "1.16.13-gke.401",
              "1.16.13-gke.400",
              "1.16.13-gke.1",
              "1.16.11-gke.5",
              "1.16.10-gke.8",
              "1.16.9-gke.6",
              "1.16.9-gke.2",
              "1.16.8-gke.15",
              "1.16.8-gke.12",
              "1.16.8-gke.9",
              "1.15.12-gke.6002",
              "1.15.12-gke.6001",
              "1.15.12-gke.5000",
              "1.15.12-gke.4002",
              "1.15.12-gke.4000",
              "1.15.12-gke.20",
              "1.15.12-gke.17",
              "1.15.12-gke.16",
              "1.15.12-gke.13",
              "1.15.12-gke.9",
              "1.15.12-gke.6",
              "1.15.12-gke.3",
              "1.15.12-gke.2",
              "1.15.11-gke.17",
              "1.15.11-gke.15",
              "1.15.11-gke.13",
              "1.15.11-gke.12",
              "1.15.11-gke.11",
              "1.15.11-gke.9",
              "1.15.11-gke.5",
              "1.15.11-gke.3",
              "1.15.11-gke.1",
              "1.15.9-gke.26",
              "1.15.9-gke.24",
              "1.15.9-gke.22",
              "1.15.9-gke.12",
              "1.15.9-gke.9",
              "1.15.9-gke.8",
              "1.15.8-gke.3",
              "1.15.8-gke.2",
              "1.15.7-gke.23",
              "1.15.7-gke.2",
              "1.15.4-gke.22",
              "1.14.10-gke.1504",
              "1.14.10-gke.902",
              "1.14.10-gke.50",
              "1.14.10-gke.46",
              "1.14.10-gke.45",
              "1.14.10-gke.42",
              "1.14.10-gke.41",
              "1.14.10-gke.40",
              "1.14.10-gke.37",
              "1.14.10-gke.36",
              "1.14.10-gke.34",
              "1.14.10-gke.32",
              "1.14.10-gke.31",
              "1.14.10-gke.27",
              "1.14.10-gke.24",
              "1.14.10-gke.22",
              "1.14.10-gke.21",
              "1.14.10-gke.17",
              "1.14.10-gke.0",
              "1.14.9-gke.23",
              "1.14.9-gke.2",
              "1.14.9-gke.0",
              "1.14.8-gke.33",
              "1.14.8-gke.21",
              "1.14.8-gke.18",
              "1.14.8-gke.17",
              "1.14.8-gke.14",
              "1.14.8-gke.12",
              "1.14.8-gke.7",
              "1.14.8-gke.2",
              "1.14.7-gke.40",
              "1.14.7-gke.25",
              "1.14.7-gke.23",
              "1.14.7-gke.17",
              "1.14.7-gke.14",
              "1.14.7-gke.10",
              "1.14.6-gke.13",
              "1.14.6-gke.2",
              "1.14.6-gke.1",
              "1.14.3-gke.11",
              "1.14.3-gke.10",
              "1.14.3-gke.9",
              "1.14.2-gke.9",
              "1.14.1-gke.5",
              "1.13.12-gke.30",
              "1.13.12-gke.25",
              "1.13.12-gke.17",
              "1.13.12-gke.16",
              "1.13.12-gke.14",
              "1.13.12-gke.13",
              "1.13.12-gke.10",
              "1.13.12-gke.8",
              "1.13.12-gke.4",
              "1.13.12-gke.2",
              "1.13.11-gke.23",
              "1.13.11-gke.15",
              "1.13.11-gke.14",
              "1.13.11-gke.12",
              "1.13.11-gke.11",
              "1.13.11-gke.9",
              "1.13.11-gke.5",
              "1.13.10-gke.7",
              "1.13.10-gke.0",
              "1.13.9-gke.11",
              "1.13.9-gke.3",
              "1.13.7-gke.24",
              "1.13.7-gke.19",
              "1.13.7-gke.15",
              "1.13.7-gke.8",
              "1.13.7-gke.0",
              "1.13.6-gke.13",
              "1.13.6-gke.6",
              "1.13.6-gke.5",
              "1.13.6-gke.0",
              "1.13.5-gke.10",
              "1.12.10-gke.22",
              "1.12.10-gke.20",
              "1.12.10-gke.19",
              "1.12.10-gke.18",
              "1.12.10-gke.17",
              "1.12.10-gke.15",
              "1.12.10-gke.13",
              "1.12.10-gke.11",
              "1.12.10-gke.5",
              "1.12.9-gke.16",
              "1.12.9-gke.15",
              "1.12.9-gke.13",
              "1.12.9-gke.10",
              "1.12.9-gke.7",
              "1.12.9-gke.3",
              "1.12.8-gke.12",
              "1.12.8-gke.10",
              "1.12.8-gke.7",
              "1.12.8-gke.6",
              "1.12.7-gke.26",
              "1.12.7-gke.25",
              "1.12.7-gke.24",
              "1.12.7-gke.22",
              "1.12.7-gke.21",
              "1.12.7-gke.17",
              "1.12.7-gke.10",
              "1.12.7-gke.7",
              "1.12.6-gke.11",
              "1.12.6-gke.10",
              "1.12.6-gke.7",
              "1.12.5-gke.10",
              "1.12.5-gke.5",
              "1.11.10-gke.6",
              "1.11.10-gke.5"
            ],
            "version_prefix": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_container_cluster",
      "name": "primary",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "addons_config": [
              {
                "cloudrun_config": [],
                "horizontal_pod_autoscaling": [
                  {
                    "disabled": false
                  }
                ],
                "http_load_balancing": [
                  {
                    "disabled": false
                  }
                ],
                "network_policy_config": [
                  {
                    "disabled": false
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.3.0.0/16",
            "database_encryption": [
              {
                "key_name": "",
                "state": "DECRYPTED"
              }
            ],
            "datapath_provider": "",
            "default_max_pods_per_node": 110,
            "default_snat_status": [
              {
                "disabled": false
              }
            ],
            "description": "",
            "enable_binary_authorization": false,
            "enable_intranode_visibility": false,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": false,
            "enable_shielded_nodes": true,
            "enable_tpu": false,
            "endpoint": "34.122.170.137",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "initial_node_count": 0,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-24966e46-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-8ee9278a-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-67599df0-grp"
            ],
            "ip_allocation_policy": [
              {
                "cluster_ipv4_cidr_block": "10.3.0.0/16",
                "cluster_secondary_range_name": "gitlab-cluster-pod-cidr",
                "services_ipv4_cidr_block": "10.2.0.0/16",
                "services_secondary_range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "label_fingerprint": "a9dc16a7",
            "location": "us-central1",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [
              {
                "daily_maintenance_window": [
                  {
                    "duration": "PT4H0M0S",
                    "start_time": "05:00"
                  }
                ],
                "maintenance_exclusion": [],
                "recurring_window": []
              }
            ],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lSQU5xMytzaER0NGZsYjZmblVmNjYzbHN3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09EQmpPVFUxTXpZdE16UmlZUzAwWWpKaExUazBPVFF0TkRjM00yUTNaR05qTlRZegpNQjRYRFRJeE1ETXlOakU0TXpFMU5Gb1hEVEkyTURNeU5URTRNekUxTkZvd0VURVBNQTBHQTFVRUF4TUdZMnhwClpXNTBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTVjMENVSTNJNHpyVDFQeXQKRURIU2UySTNaZUhlVEFId3RCSDNwVS9mMGdrMHdwTUcwQUIrTmIzWDJUVjFKelNkSnk1ZXhFWW41ZnNEeEVzQgpxZHVaME1LbHd0MEplUk5qS2xzanFPRGx4Yk40UTJhU3RrQ1NFdysrdFdnNlYrMEkrTWQ4VkNLRkhXbkJUQkIrCmlXRkZZY0d2U0VNNTNSd0pNNlo2TUxBamx1Uk4wTlBTS1A3anZ2aGF2STRXbWdmcCt6ZWdpcWk0WHUzcXVpWmkKUWtRcXpTQjhRaFZ3aHJybHFiaVFqY0pNaUJLUWZPZTNDc3B3REFEQ1dwMHVVZ0hQeStiMi85OVVsa1RCek1PLwp2MW1iVkhra3ZlMzE1QnhWUGs4WGtLN3ZyVnVQSHEvcXFZWXk0VnV6NUU1L1BjYXhRVCs2Vmo0SUdvNXJ6NTdlCjlkaXlqd0lEQVFBQm96RXdMekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRXhXd3JIanVUTkMKVGM4dXJQS0hwVkx5cUJJMU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUs0QXF0a3J0VFhNcnJPdlEzQy9KLwpoMFFMQ000MHIrV05wMUIzdmE5bTVNSHprQm9Ca241UjFmcEtYSjYrTHgvaiszUUxOcm9KT3JBNWJFWFE5UzZEClRSQW5NYUVqZjd0YVg1OWRjcnMxNEk0Q0xuNjJ1djVpYTB1U3dxUFBNUjZKaVdxUnRGRG5aYWN6SUtTQUNRSEEKQlA5OHlPclVXWmYvT3FxWEFCd2doWERXenFBTEppdXlrdlBwVE9VZmkzTGk2U3E2Y2szc3RFVGlwNTZWMytITQphYSs2T29Hb2w1MTl5NHhVL1J4a05RVk9KV29NWkRIeHVHMW05TFFhTnNNcUVHZm1DQm1jdXNidUVjMXNycHJYCms5cWc3M081SjBDcHF5MzB2SnZoK2ozNHMzclk0K3ZsNUxycENrVndhaFltUDJKRkVoN1BYb2R2WXN1SVE1VEkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBNWMwQ1VJM0k0enJUMVB5dEVESFNlMkkzWmVIZVRBSHd0QkgzcFUvZjBnazB3cE1HCjBBQitOYjNYMlRWMUp6U2RKeTVleEVZbjVmc0R4RXNCcWR1WjBNS2x3dDBKZVJOaktsc2pxT0RseGJONFEyYVMKdGtDU0V3Kyt0V2c2ViswSStNZDhWQ0tGSFduQlRCQitpV0ZGWWNHdlNFTTUzUndKTTZaNk1MQWpsdVJOME5QUwpLUDdqdnZoYXZJNFdtZ2ZwK3plZ2lxaTRYdTNxdWlaaVFrUXF6U0I4UWhWd2hycmxxYmlRamNKTWlCS1FmT2UzCkNzcHdEQURDV3AwdVVnSFB5K2IyLzk5VWxrVEJ6TU8vdjFtYlZIa2t2ZTMxNUJ4VlBrOFhrSzd2clZ1UEhxL3EKcVlZeTRWdXo1RTUvUGNheFFUKzZWajRJR281cno1N2U5ZGl5andJREFRQUJBb0lCQUFkTUFEUFFuTDFpWTlHUwppR2hJUExmQVFhUVJqUDU2M1VyS2UwT2JpcTdmcmZZenR2YXAzVmdWaENJWWlYVEtQZWM5bUxMQXk0bUk4L0NxCnRRM1F0RXlsc1ovRFp3YWFMLzdyVC9HUDJwdnhlL01mOGE2cDFEbVl1V1NIUDdzRkF0RHJmSzRyUG5EVnA5YWoKZTNFZlRwV3hFY0RJcWJDMHNESWNxaXFiblRXd1VNVFVlVXh2SjYwbkNZRVN3dGpWNzh1Rnp2YzBMalpoQitKcApOMEw5MW9MSU15UjQrbGRSZWo2VzdMRTJ2SFFzYU5kWjdUUldKRko4Wko4MFlQWFRrRDZ0ODJ0enJlZXdpWE40CmtodXRGSmFFRlREazd5UFhhZEJ2MTZybjg1djlrUGdweG5qTndYRTRVZ0FHMGsrN2h2RGpQWkEzVkJ2MmhWa1oKVUx5a1FVRUNnWUVBOUlRdVdOMldUTE9sTCtYeFhEcHdaTVlrOGZlSHhPREc2QnRQZzVWbDJQdENCVDRIQkdLcwp5OUpoMjZpVFAwblRoc1phTDFsZ2JIZDN2MnBtc3ZLazlKd1hXclhyQTB5V0w2bkZjSlJUdTlsNFI4NEJ0c0w1CjNLazdUMjFtcjNWMGZlWTY5SWtaaGJKekVuNzJuVkVqZUdJN2Mrb2N3WGpMcVMvVGRITWxvR0VDZ1lFQThKZm4KUmNMdEVRcEF3Y1IrOTYrVWZZWVJSTWNsc3BmMHlWemp0RFZuNmltZHhFK3lqUks3WFIrbkFLZzh2MkpPcU0zMApiWFUzUCtlYmMyMFRaczJsTHBBY0hZZnhjYmdZOXNPbTVUZ3BvMzlaZU0yMVlGOHd5SS96NkViQ0dSc1lSNEV4Ckdic0hwZzBicDkrRm1vR0NTeVpZUGFISGJ0S2s4NkhONVlpYStPOENnWUJ1RVRZL3dIZVF6V2sxZDMrL2NYcjQKa2cwOWNweUdMbHk3VE5mdE5vb2pNMjlUcHNsSDJ4ZEhwTXR5TXA4ZDVTQzMwWC8xUW5sYU9pa0lYR0FnZTROdgpyUGdDV0ZPVEo1MlBsUStRanVSbWNnMW4zVDcrUXlSd2hTbHlwcCtMcWdhblNjVU9JTTBCVndQZnRwRlMzWnhtCjYya3gwNWZnSzMwYUNySllBQ0ZXNFFLQmdGaytuNlU2OXlFWkFvaGQwUk1qYUJ0ZnZjd2JheHBpVDRUYUZnVGsKd3BVVHR0ZjVFQ3hRUkh2NG44UVlvK0FDSVZkd2ZqaVVBRmlPR3hXbjRraUNBOEhQNXYzMVRWUjNpNXNOWEQwdQpwaE5seTlTSnlidmowMzZ5RnpHVC9hKytZelV5OFBtd2JOZmxpTnF1aVNxVTI3WHdsVTdYVWRrRC9mZjVqeHlUCm5aaTFBb0dBWXJWb3diTGNPWGNoNmJTbE9JWTUzUEczR3p2MnlRbmsrOHEzU1J6aVBlVDV5MVRhd2FVVlpST20KRE9DTCtnUU9GTGczS2grM2pNUHdHMVdXQ3QrVVQ5a01CVUVqZFVsWXZFV2lLMG8wK3JGVm9sUkR3bmxxZWtKRApZOXRNUHc5RGpqMmZ0VWRvai9GcmxUMkc1bEVMcisrcENSSGppMGJ4cW0xcVk2RnVlU1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lRTS9qZnlSY1VnVUlCQkxrelVueGJyekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNE1HTTVOVFV6Tmkwek5HSmhMVFJpTW1FdE9UUTVOQzAwTnpjelpEZGtZMk0xTmpNdwpIaGNOTWpFd016STJNVGN6TVRVeldoY05Nall3TXpJMU1UZ3pNVFV6V2pBdk1TMHdLd1lEVlFRREV5UTRNR001Ck5UVXpOaTB6TkdKaExUUmlNbUV0T1RRNU5DMDBOemN6WkRka1kyTTFOak13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURJbVZxeWtPakY3ZjNCTVpCMEJuNmZTZ0hxcmprMnVRRGlFWXpMamlSdQp4SHFJVTZ2Z0VWNkVQM0M1Znpja0tYRFpkRVFSMXNGUXEzY2ExekhBUUJNNTNRQ2FzY0xuZUNENytRNTAzcm1wCm91YzhaUGJTR0R1cFpPU0Zyd1RDMDVlbmZHNVEvME1QazY0L1lFdVBwOWFtSFQwUnJFMytxTlBLMkdmZit0MngKYzdrUGJreG55dlpNOHJhVldDY0F5aU9ERm12bUNiRFovNHBRVVRMWXRuUS9wbXo1R3M3d1dNMGZ0MGxaYUQwQgpOdjh6TlFpVVh1VzRscVd4ZkdaL2dTMWZRQWo4TytKNTBDR1VBeEZjL0VDN1Bxcng1WldNV3J0UHNBcHN2SVZ1CmRTUFZkRytmWVJyNms3ZHZkVmdzTzBUV21MaXZiVjZJeXUvMHBSTkVRMWxMQWdNQkFBR2pRakJBTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSTVZzS3g0N2t6UWszUApMcXp5aDZWUzhxZ1NOVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRm50YkVWSTlrMTY2bEw2NEk2cXd1VkhNCjFqVFB5M1JYL2xCL0JPRDU0Q2wzSGJzcnhBUG1DeHIwNUQ2VDJpZmRKT2I5MitGbnJKOVBRL0J3Mk9WcXV6ZU4KSEtDNDVzUlFXWFBjN1NTaVlmOGtHR1o2VUZpWXhwTkpncmJ4RENVamtoL0p6KzVSVUlDb0hic3hPUFpySk1tbApsb0FQOThSci91ZStkcnZzd0NyZlM2alF3UHFTYVRDTHdZd1Y3aE01Q3hwSXRsdGxGeXVHRjdXTWNMOGtzYVFyCjFmdFg0bjJCNkYvZ1BEYjB3bmJpNXFxTFdBcU5ZKzFrdlZPSmRjYlVqb3dPZndjbWFQU3l0M01rOGVnSVdPQlAKNTJjK3dJTThEZGUwdUtVVzhGZHFhVEE4UU1nZzFMMGh2UGYremFnZEhBVTFQNkNhNGxGeXpzQ1E3ME1leXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                "password": "",
                "username": ""
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.18.16-gke.1200",
            "min_master_version": "1.18",
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "lrc-portfolio-cluster",
            "network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "network_policy": [
              {
                "enabled": true,
                "provider": "CALICO"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "e2-small",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-24966e46-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-8ee9278a-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-67599df0-grp"
                ],
                "management": [
                  {
                    "auto_repair": true,
                    "auto_upgrade": true
                  }
                ],
                "max_pods_per_node": 110,
                "name": "lrc-portfolio-cluster",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "local_ssd_count": 0,
                    "machine_type": "e2-small",
                    "metadata": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "disable-legacy-endpoints": "true",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/cloud-platform"
                    ],
                    "preemptible": false,
                    "service_account": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "gke-lrc-portfolio-cluster",
                      "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                    ],
                    "taint": [],
                    "workload_metadata_config": [
                      {
                        "node_metadata": "GKE_METADATA_SERVER"
                      }
                    ]
                  }
                ],
                "node_count": 1,
                "node_locations": [
                  "us-central1-a",
                  "us-central1-c",
                  "us-central1-f"
                ],
                "upgrade_settings": [
                  {
                    "max_surge": 1,
                    "max_unavailable": 0
                  }
                ],
                "version": "1.18.16-gke.1200"
              }
            ],
            "node_version": "1.18.16-gke.1200",
            "operation": null,
            "pod_security_policy_config": [],
            "private_cluster_config": [],
            "project": "lrc-portfolio-1138",
            "release_channel": [
              {
                "channel": "UNSPECIFIED"
              }
            ],
            "remove_default_node_pool": true,
            "resource_labels": {},
            "resource_usage_export_config": [],
            "self_link": "https://container.googleapis.com/v1beta1/projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "services_ipv4_cidr": "10.2.0.0/16",
            "subnetwork": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "timeouts": {
              "create": "45m",
              "delete": "45m",
              "read": null,
              "update": "45m"
            },
            "tpu_ipv4_cidr_block": "",
            "vertical_pod_autoscaling": [
              {
                "enabled": false
              }
            ],
            "workload_identity_config": [
              {
                "identity_namespace": "lrc-portfolio-1138.svc.id.goog"
              }
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInJlYWQiOjI0MDAwMDAwMDAwMDAsInVwZGF0ZSI6MjcwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_container_node_pool",
      "name": "pools",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "lrc-portfolio-cluster",
          "schema_version": 1,
          "attributes": {
            "autoscaling": [],
            "cluster": "lrc-portfolio-cluster",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster/nodePools/lrc-portfolio-cluster",
            "initial_node_count": 1,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-24966e46-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-8ee9278a-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-67599df0-grp"
            ],
            "location": "us-central1",
            "management": [
              {
                "auto_repair": true,
                "auto_upgrade": true
              }
            ],
            "max_pods_per_node": 110,
            "name": "lrc-portfolio-cluster",
            "name_prefix": "",
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "e2-small",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_count": 1,
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "operation": null,
            "project": "lrc-portfolio-1138",
            "timeouts": {
              "create": "45m",
              "delete": "45m",
              "update": "45m"
            },
            "upgrade_settings": [
              {
                "max_surge": 1,
                "max_unavailable": 0
              }
            ],
            "version": "1.18.16-gke.1200"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInVwZGF0ZSI6MjcwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.gke.google_container_cluster.primary",
            "module.gke.google_service_account.cluster_service_account",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-log_writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+dqYlsjE=",
            "id": "lrc-portfolio-1138/roles/logging.logWriter/serviceaccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/logging.logWriter"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-metric_writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+dqYlsjE=",
            "id": "lrc-portfolio-1138/roles/monitoring.metricWriter/serviceaccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/monitoring.metricWriter"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-monitoring_viewer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+dqYlsjE=",
            "id": "lrc-portfolio-1138/roles/monitoring.viewer/serviceaccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/monitoring.viewer"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_project_iam_member.cluster_service_account-metric_writer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-resourceMetadata-writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+dqYlsjE=",
            "id": "lrc-portfolio-1138/roles/stackdriver.resourceMetadata.writer/serviceaccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/stackdriver.resourceMetadata.writer"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_project_iam_member.cluster_service_account-metric_writer",
            "module.gke.google_project_iam_member.cluster_service_account-monitoring_viewer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_service_account",
      "name": "cluster_service_account",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "account_id": "tf-gke-lrc-portfolio-c-g8o6",
            "description": "",
            "display_name": "Terraform-managed service account for cluster lrc-portfolio-cluster",
            "email": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "id": "projects/lrc-portfolio-1138/serviceAccounts/tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "unique_id": "113798645230778299698"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "random_shuffle",
      "name": "available_zones",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "input": [
              "us-central1-a",
              "us-central1-b",
              "us-central1-c",
              "us-central1-f"
            ],
            "keepers": null,
            "result": [
              "us-central1-c",
              "us-central1-a",
              "us-central1-f"
            ],
            "result_count": 3,
            "seed": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.data.google_compute_zones.available",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "random_string",
      "name": "cluster_service_account_suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "g8o6",
            "keepers": null,
            "length": 4,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "g8o6",
            "special": false,
            "upper": false
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_delete_default_kube_dns_configmap.module.gcloud_kubectl",
      "mode": "managed",
      "type": "null_resource",
      "name": "module_depends_on",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "3825301313963580312",
            "triggers": {
              "value": "3"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_client_config.default",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "data",
      "type": "external",
      "name": "env_override",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              ".terraform/modules/gke.gcloud_wait_for_cluster/scripts/check_env.sh"
            ],
            "query": null,
            "result": {
              "download": ""
            },
            "working_dir": null
          }
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "module_depends_on",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "3813762738192766100",
            "triggers": {
              "value": "2"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "run_command",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "441170032351637727",
            "triggers": {
              "arguments": "8e18d164bb831016bb1db642c1ed966d",
              "create_cmd_body": "lrc-portfolio-1138 lrc-portfolio-cluster us-central1 ",
              "create_cmd_entrypoint": ".terraform/modules/gke/scripts/wait-for-cluster.sh",
              "gcloud_bin_abs_path": "/google-cloud-sdk/bin",
              "md5": "32cb86db260b1384045ee58ba7b8f4cf"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "run_destroy_command",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "6390923175874252586",
            "triggers": {
              "destroy_cmd_body": "lrc-portfolio-1138 lrc-portfolio-cluster us-central1 ",
              "destroy_cmd_entrypoint": ".terraform/modules/gke/scripts/wait-for-cluster.sh",
              "gcloud_bin_abs_path": "/google-cloud-sdk/bin"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "google_client_config",
      "name": "provider",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_token": "ya29.a0AfH6SMCEJkfvFYCmp_VPT_xwlUx240cFMXQxH3j8T0o7K7ApTxp6W0SMZEQ5UvZpCTDgPtxhB5lo3NeXxittqlWkfDS-s0tWhwUeSQr7rSKcv-PbsGomeghsbdZYWYQnXfH0eAtCF84tMez74lHd331TlUWcVg",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/zones/",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "zone": ""
          }
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "google_container_cluster",
      "name": "gke_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "addons_config": [
              {
                "cloudrun_config": [],
                "horizontal_pod_autoscaling": [
                  {
                    "disabled": false
                  }
                ],
                "http_load_balancing": [
                  {
                    "disabled": false
                  }
                ],
                "network_policy_config": [
                  {
                    "disabled": false
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.3.0.0/16",
            "database_encryption": [
              {
                "key_name": "",
                "state": "DECRYPTED"
              }
            ],
            "datapath_provider": "",
            "default_max_pods_per_node": 110,
            "default_snat_status": [
              {
                "disabled": false
              }
            ],
            "description": "",
            "enable_binary_authorization": false,
            "enable_intranode_visibility": false,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": false,
            "enable_shielded_nodes": true,
            "enable_tpu": false,
            "endpoint": "34.122.170.137",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "initial_node_count": 0,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-24966e46-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-8ee9278a-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-67599df0-grp"
            ],
            "ip_allocation_policy": [
              {
                "cluster_ipv4_cidr_block": "10.3.0.0/16",
                "cluster_secondary_range_name": "gitlab-cluster-pod-cidr",
                "services_ipv4_cidr_block": "10.2.0.0/16",
                "services_secondary_range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "label_fingerprint": "a9dc16a7",
            "location": "us-central1",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [
              {
                "daily_maintenance_window": [
                  {
                    "duration": "PT4H0M0S",
                    "start_time": "05:00"
                  }
                ],
                "maintenance_exclusion": [],
                "recurring_window": []
              }
            ],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lSQU5xMytzaER0NGZsYjZmblVmNjYzbHN3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09EQmpPVFUxTXpZdE16UmlZUzAwWWpKaExUazBPVFF0TkRjM00yUTNaR05qTlRZegpNQjRYRFRJeE1ETXlOakU0TXpFMU5Gb1hEVEkyTURNeU5URTRNekUxTkZvd0VURVBNQTBHQTFVRUF4TUdZMnhwClpXNTBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTVjMENVSTNJNHpyVDFQeXQKRURIU2UySTNaZUhlVEFId3RCSDNwVS9mMGdrMHdwTUcwQUIrTmIzWDJUVjFKelNkSnk1ZXhFWW41ZnNEeEVzQgpxZHVaME1LbHd0MEplUk5qS2xzanFPRGx4Yk40UTJhU3RrQ1NFdysrdFdnNlYrMEkrTWQ4VkNLRkhXbkJUQkIrCmlXRkZZY0d2U0VNNTNSd0pNNlo2TUxBamx1Uk4wTlBTS1A3anZ2aGF2STRXbWdmcCt6ZWdpcWk0WHUzcXVpWmkKUWtRcXpTQjhRaFZ3aHJybHFiaVFqY0pNaUJLUWZPZTNDc3B3REFEQ1dwMHVVZ0hQeStiMi85OVVsa1RCek1PLwp2MW1iVkhra3ZlMzE1QnhWUGs4WGtLN3ZyVnVQSHEvcXFZWXk0VnV6NUU1L1BjYXhRVCs2Vmo0SUdvNXJ6NTdlCjlkaXlqd0lEQVFBQm96RXdMekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRXhXd3JIanVUTkMKVGM4dXJQS0hwVkx5cUJJMU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQUs0QXF0a3J0VFhNcnJPdlEzQy9KLwpoMFFMQ000MHIrV05wMUIzdmE5bTVNSHprQm9Ca241UjFmcEtYSjYrTHgvaiszUUxOcm9KT3JBNWJFWFE5UzZEClRSQW5NYUVqZjd0YVg1OWRjcnMxNEk0Q0xuNjJ1djVpYTB1U3dxUFBNUjZKaVdxUnRGRG5aYWN6SUtTQUNRSEEKQlA5OHlPclVXWmYvT3FxWEFCd2doWERXenFBTEppdXlrdlBwVE9VZmkzTGk2U3E2Y2szc3RFVGlwNTZWMytITQphYSs2T29Hb2w1MTl5NHhVL1J4a05RVk9KV29NWkRIeHVHMW05TFFhTnNNcUVHZm1DQm1jdXNidUVjMXNycHJYCms5cWc3M081SjBDcHF5MzB2SnZoK2ozNHMzclk0K3ZsNUxycENrVndhaFltUDJKRkVoN1BYb2R2WXN1SVE1VEkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBNWMwQ1VJM0k0enJUMVB5dEVESFNlMkkzWmVIZVRBSHd0QkgzcFUvZjBnazB3cE1HCjBBQitOYjNYMlRWMUp6U2RKeTVleEVZbjVmc0R4RXNCcWR1WjBNS2x3dDBKZVJOaktsc2pxT0RseGJONFEyYVMKdGtDU0V3Kyt0V2c2ViswSStNZDhWQ0tGSFduQlRCQitpV0ZGWWNHdlNFTTUzUndKTTZaNk1MQWpsdVJOME5QUwpLUDdqdnZoYXZJNFdtZ2ZwK3plZ2lxaTRYdTNxdWlaaVFrUXF6U0I4UWhWd2hycmxxYmlRamNKTWlCS1FmT2UzCkNzcHdEQURDV3AwdVVnSFB5K2IyLzk5VWxrVEJ6TU8vdjFtYlZIa2t2ZTMxNUJ4VlBrOFhrSzd2clZ1UEhxL3EKcVlZeTRWdXo1RTUvUGNheFFUKzZWajRJR281cno1N2U5ZGl5andJREFRQUJBb0lCQUFkTUFEUFFuTDFpWTlHUwppR2hJUExmQVFhUVJqUDU2M1VyS2UwT2JpcTdmcmZZenR2YXAzVmdWaENJWWlYVEtQZWM5bUxMQXk0bUk4L0NxCnRRM1F0RXlsc1ovRFp3YWFMLzdyVC9HUDJwdnhlL01mOGE2cDFEbVl1V1NIUDdzRkF0RHJmSzRyUG5EVnA5YWoKZTNFZlRwV3hFY0RJcWJDMHNESWNxaXFiblRXd1VNVFVlVXh2SjYwbkNZRVN3dGpWNzh1Rnp2YzBMalpoQitKcApOMEw5MW9MSU15UjQrbGRSZWo2VzdMRTJ2SFFzYU5kWjdUUldKRko4Wko4MFlQWFRrRDZ0ODJ0enJlZXdpWE40CmtodXRGSmFFRlREazd5UFhhZEJ2MTZybjg1djlrUGdweG5qTndYRTRVZ0FHMGsrN2h2RGpQWkEzVkJ2MmhWa1oKVUx5a1FVRUNnWUVBOUlRdVdOMldUTE9sTCtYeFhEcHdaTVlrOGZlSHhPREc2QnRQZzVWbDJQdENCVDRIQkdLcwp5OUpoMjZpVFAwblRoc1phTDFsZ2JIZDN2MnBtc3ZLazlKd1hXclhyQTB5V0w2bkZjSlJUdTlsNFI4NEJ0c0w1CjNLazdUMjFtcjNWMGZlWTY5SWtaaGJKekVuNzJuVkVqZUdJN2Mrb2N3WGpMcVMvVGRITWxvR0VDZ1lFQThKZm4KUmNMdEVRcEF3Y1IrOTYrVWZZWVJSTWNsc3BmMHlWemp0RFZuNmltZHhFK3lqUks3WFIrbkFLZzh2MkpPcU0zMApiWFUzUCtlYmMyMFRaczJsTHBBY0hZZnhjYmdZOXNPbTVUZ3BvMzlaZU0yMVlGOHd5SS96NkViQ0dSc1lSNEV4Ckdic0hwZzBicDkrRm1vR0NTeVpZUGFISGJ0S2s4NkhONVlpYStPOENnWUJ1RVRZL3dIZVF6V2sxZDMrL2NYcjQKa2cwOWNweUdMbHk3VE5mdE5vb2pNMjlUcHNsSDJ4ZEhwTXR5TXA4ZDVTQzMwWC8xUW5sYU9pa0lYR0FnZTROdgpyUGdDV0ZPVEo1MlBsUStRanVSbWNnMW4zVDcrUXlSd2hTbHlwcCtMcWdhblNjVU9JTTBCVndQZnRwRlMzWnhtCjYya3gwNWZnSzMwYUNySllBQ0ZXNFFLQmdGaytuNlU2OXlFWkFvaGQwUk1qYUJ0ZnZjd2JheHBpVDRUYUZnVGsKd3BVVHR0ZjVFQ3hRUkh2NG44UVlvK0FDSVZkd2ZqaVVBRmlPR3hXbjRraUNBOEhQNXYzMVRWUjNpNXNOWEQwdQpwaE5seTlTSnlidmowMzZ5RnpHVC9hKytZelV5OFBtd2JOZmxpTnF1aVNxVTI3WHdsVTdYVWRrRC9mZjVqeHlUCm5aaTFBb0dBWXJWb3diTGNPWGNoNmJTbE9JWTUzUEczR3p2MnlRbmsrOHEzU1J6aVBlVDV5MVRhd2FVVlpST20KRE9DTCtnUU9GTGczS2grM2pNUHdHMVdXQ3QrVVQ5a01CVUVqZFVsWXZFV2lLMG8wK3JGVm9sUkR3bmxxZWtKRApZOXRNUHc5RGpqMmZ0VWRvai9GcmxUMkc1bEVMcisrcENSSGppMGJ4cW0xcVk2RnVlU1E9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lRTS9qZnlSY1VnVUlCQkxrelVueGJyekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNE1HTTVOVFV6Tmkwek5HSmhMVFJpTW1FdE9UUTVOQzAwTnpjelpEZGtZMk0xTmpNdwpIaGNOTWpFd016STJNVGN6TVRVeldoY05Nall3TXpJMU1UZ3pNVFV6V2pBdk1TMHdLd1lEVlFRREV5UTRNR001Ck5UVXpOaTB6TkdKaExUUmlNbUV0T1RRNU5DMDBOemN6WkRka1kyTTFOak13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURJbVZxeWtPakY3ZjNCTVpCMEJuNmZTZ0hxcmprMnVRRGlFWXpMamlSdQp4SHFJVTZ2Z0VWNkVQM0M1Znpja0tYRFpkRVFSMXNGUXEzY2ExekhBUUJNNTNRQ2FzY0xuZUNENytRNTAzcm1wCm91YzhaUGJTR0R1cFpPU0Zyd1RDMDVlbmZHNVEvME1QazY0L1lFdVBwOWFtSFQwUnJFMytxTlBLMkdmZit0MngKYzdrUGJreG55dlpNOHJhVldDY0F5aU9ERm12bUNiRFovNHBRVVRMWXRuUS9wbXo1R3M3d1dNMGZ0MGxaYUQwQgpOdjh6TlFpVVh1VzRscVd4ZkdaL2dTMWZRQWo4TytKNTBDR1VBeEZjL0VDN1Bxcng1WldNV3J0UHNBcHN2SVZ1CmRTUFZkRytmWVJyNms3ZHZkVmdzTzBUV21MaXZiVjZJeXUvMHBSTkVRMWxMQWdNQkFBR2pRakJBTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSTVZzS3g0N2t6UWszUApMcXp5aDZWUzhxZ1NOVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRm50YkVWSTlrMTY2bEw2NEk2cXd1VkhNCjFqVFB5M1JYL2xCL0JPRDU0Q2wzSGJzcnhBUG1DeHIwNUQ2VDJpZmRKT2I5MitGbnJKOVBRL0J3Mk9WcXV6ZU4KSEtDNDVzUlFXWFBjN1NTaVlmOGtHR1o2VUZpWXhwTkpncmJ4RENVamtoL0p6KzVSVUlDb0hic3hPUFpySk1tbApsb0FQOThSci91ZStkcnZzd0NyZlM2alF3UHFTYVRDTHdZd1Y3aE01Q3hwSXRsdGxGeXVHRjdXTWNMOGtzYVFyCjFmdFg0bjJCNkYvZ1BEYjB3bmJpNXFxTFdBcU5ZKzFrdlZPSmRjYlVqb3dPZndjbWFQU3l0M01rOGVnSVdPQlAKNTJjK3dJTThEZGUwdUtVVzhGZHFhVEE4UU1nZzFMMGh2UGYremFnZEhBVTFQNkNhNGxGeXpzQ1E3ME1leXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                "password": "",
                "username": ""
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.18.16-gke.1200",
            "min_master_version": null,
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "lrc-portfolio-cluster",
            "network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "network_policy": [
              {
                "enabled": true,
                "provider": "CALICO"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "e2-small",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-24966e46-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-8ee9278a-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-67599df0-grp"
                ],
                "management": [
                  {
                    "auto_repair": true,
                    "auto_upgrade": true
                  }
                ],
                "max_pods_per_node": 110,
                "name": "lrc-portfolio-cluster",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "local_ssd_count": 0,
                    "machine_type": "e2-small",
                    "metadata": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "disable-legacy-endpoints": "true",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/cloud-platform"
                    ],
                    "preemptible": false,
                    "service_account": "tf-gke-lrc-portfolio-c-g8o6@lrc-portfolio-1138.iam.gserviceaccount.com",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "gke-lrc-portfolio-cluster",
                      "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                    ],
                    "taint": [],
                    "workload_metadata_config": [
                      {
                        "node_metadata": "GKE_METADATA_SERVER"
                      }
                    ]
                  }
                ],
                "node_count": 1,
                "node_locations": [
                  "us-central1-a",
                  "us-central1-c",
                  "us-central1-f"
                ],
                "upgrade_settings": [
                  {
                    "max_surge": 1,
                    "max_unavailable": 0
                  }
                ],
                "version": "1.18.16-gke.1200"
              }
            ],
            "node_version": "1.18.16-gke.1200",
            "operation": null,
            "pod_security_policy_config": null,
            "private_cluster_config": [],
            "project": "lrc-portfolio-1138",
            "release_channel": [
              {
                "channel": "UNSPECIFIED"
              }
            ],
            "remove_default_node_pool": null,
            "resource_labels": {},
            "resource_usage_export_config": [],
            "self_link": "https://container.googleapis.com/v1beta1/projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "services_ipv4_cidr": "10.2.0.0/16",
            "subnetwork": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "tpu_ipv4_cidr_block": "",
            "vertical_pod_autoscaling": [
              {
                "enabled": false
              }
            ],
            "workload_identity_config": [
              {
                "identity_namespace": "lrc-portfolio-1138.svc.id.goog"
              }
            ]
          }
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "template_file",
      "name": "kubeconfig",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "dc79134d9cd6a56bb7e0ad5d1cae65530904f6dcf7acbfc91b35680351097e84",
            "rendered": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lRTS9qZnlSY1VnVUlCQkxrelVueGJyekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNE1HTTVOVFV6Tmkwek5HSmhMVFJpTW1FdE9UUTVOQzAwTnpjelpEZGtZMk0xTmpNdwpIaGNOTWpFd016STJNVGN6TVRVeldoY05Nall3TXpJMU1UZ3pNVFV6V2pBdk1TMHdLd1lEVlFRREV5UTRNR001Ck5UVXpOaTB6TkdKaExUUmlNbUV0T1RRNU5DMDBOemN6WkRka1kyTTFOak13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURJbVZxeWtPakY3ZjNCTVpCMEJuNmZTZ0hxcmprMnVRRGlFWXpMamlSdQp4SHFJVTZ2Z0VWNkVQM0M1Znpja0tYRFpkRVFSMXNGUXEzY2ExekhBUUJNNTNRQ2FzY0xuZUNENytRNTAzcm1wCm91YzhaUGJTR0R1cFpPU0Zyd1RDMDVlbmZHNVEvME1QazY0L1lFdVBwOWFtSFQwUnJFMytxTlBLMkdmZit0MngKYzdrUGJreG55dlpNOHJhVldDY0F5aU9ERm12bUNiRFovNHBRVVRMWXRuUS9wbXo1R3M3d1dNMGZ0MGxaYUQwQgpOdjh6TlFpVVh1VzRscVd4ZkdaL2dTMWZRQWo4TytKNTBDR1VBeEZjL0VDN1Bxcng1WldNV3J0UHNBcHN2SVZ1CmRTUFZkRytmWVJyNms3ZHZkVmdzTzBUV21MaXZiVjZJeXUvMHBSTkVRMWxMQWdNQkFBR2pRakJBTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSTVZzS3g0N2t6UWszUApMcXp5aDZWUzhxZ1NOVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRm50YkVWSTlrMTY2bEw2NEk2cXd1VkhNCjFqVFB5M1JYL2xCL0JPRDU0Q2wzSGJzcnhBUG1DeHIwNUQ2VDJpZmRKT2I5MitGbnJKOVBRL0J3Mk9WcXV6ZU4KSEtDNDVzUlFXWFBjN1NTaVlmOGtHR1o2VUZpWXhwTkpncmJ4RENVamtoL0p6KzVSVUlDb0hic3hPUFpySk1tbApsb0FQOThSci91ZStkcnZzd0NyZlM2alF3UHFTYVRDTHdZd1Y3aE01Q3hwSXRsdGxGeXVHRjdXTWNMOGtzYVFyCjFmdFg0bjJCNkYvZ1BEYjB3bmJpNXFxTFdBcU5ZKzFrdlZPSmRjYlVqb3dPZndjbWFQU3l0M01rOGVnSVdPQlAKNTJjK3dJTThEZGUwdUtVVzhGZHFhVEE4UU1nZzFMMGh2UGYremFnZEhBVTFQNkNhNGxGeXpzQ1E3ME1leXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    server: https://34.122.170.137\n  name: lrc-portfolio-cluster\ncontexts:\n- context:\n    cluster: lrc-portfolio-cluster\n    user: lrc-portfolio-cluster\n  name: lrc-portfolio-cluster\ncurrent-context: lrc-portfolio-cluster\nkind: Config\npreferences: {}\nusers:\n- name: lrc-portfolio-cluster\n  user:\n    token: ya29.a0AfH6SMCEJkfvFYCmp_VPT_xwlUx240cFMXQxH3j8T0o7K7ApTxp6W0SMZEQ5UvZpCTDgPtxhB5lo3NeXxittqlWkfDS-s0tWhwUeSQr7rSKcv-PbsGomeghsbdZYWYQnXfH0eAtCF84tMez74lHd331TlUWcVg\n",
            "template": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: ${cluster_ca_certificate}\n    server: https://${endpoint}\n  name: ${context}\ncontexts:\n- context:\n    cluster: ${context}\n    user: ${context}\n  name: ${context}\ncurrent-context: ${context}\nkind: Config\npreferences: {}\nusers:\n- name: ${context}\n  user:\n    token: ${token}\n",
            "vars": {
              "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLakNDQWhLZ0F3SUJBZ0lRTS9qZnlSY1VnVUlCQkxrelVueGJyekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlRNE1HTTVOVFV6Tmkwek5HSmhMVFJpTW1FdE9UUTVOQzAwTnpjelpEZGtZMk0xTmpNdwpIaGNOTWpFd016STJNVGN6TVRVeldoY05Nall3TXpJMU1UZ3pNVFV6V2pBdk1TMHdLd1lEVlFRREV5UTRNR001Ck5UVXpOaTB6TkdKaExUUmlNbUV0T1RRNU5DMDBOemN6WkRka1kyTTFOak13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURJbVZxeWtPakY3ZjNCTVpCMEJuNmZTZ0hxcmprMnVRRGlFWXpMamlSdQp4SHFJVTZ2Z0VWNkVQM0M1Znpja0tYRFpkRVFSMXNGUXEzY2ExekhBUUJNNTNRQ2FzY0xuZUNENytRNTAzcm1wCm91YzhaUGJTR0R1cFpPU0Zyd1RDMDVlbmZHNVEvME1QazY0L1lFdVBwOWFtSFQwUnJFMytxTlBLMkdmZit0MngKYzdrUGJreG55dlpNOHJhVldDY0F5aU9ERm12bUNiRFovNHBRVVRMWXRuUS9wbXo1R3M3d1dNMGZ0MGxaYUQwQgpOdjh6TlFpVVh1VzRscVd4ZkdaL2dTMWZRQWo4TytKNTBDR1VBeEZjL0VDN1Bxcng1WldNV3J0UHNBcHN2SVZ1CmRTUFZkRytmWVJyNms3ZHZkVmdzTzBUV21MaXZiVjZJeXUvMHBSTkVRMWxMQWdNQkFBR2pRakJBTUE0R0ExVWQKRHdFQi93UUVBd0lDQkRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSTVZzS3g0N2t6UWszUApMcXp5aDZWUzhxZ1NOVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBRm50YkVWSTlrMTY2bEw2NEk2cXd1VkhNCjFqVFB5M1JYL2xCL0JPRDU0Q2wzSGJzcnhBUG1DeHIwNUQ2VDJpZmRKT2I5MitGbnJKOVBRL0J3Mk9WcXV6ZU4KSEtDNDVzUlFXWFBjN1NTaVlmOGtHR1o2VUZpWXhwTkpncmJ4RENVamtoL0p6KzVSVUlDb0hic3hPUFpySk1tbApsb0FQOThSci91ZStkcnZzd0NyZlM2alF3UHFTYVRDTHdZd1Y3aE01Q3hwSXRsdGxGeXVHRjdXTWNMOGtzYVFyCjFmdFg0bjJCNkYvZ1BEYjB3bmJpNXFxTFdBcU5ZKzFrdlZPSmRjYlVqb3dPZndjbWFQU3l0M01rOGVnSVdPQlAKNTJjK3dJTThEZGUwdUtVVzhGZHFhVEE4UU1nZzFMMGh2UGYremFnZEhBVTFQNkNhNGxGeXpzQ1E3ME1leXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
              "context": "lrc-portfolio-cluster",
              "endpoint": "34.122.170.137",
              "token": "ya29.a0AfH6SMCEJkfvFYCmp_VPT_xwlUx240cFMXQxH3j8T0o7K7ApTxp6W0SMZEQ5UvZpCTDgPtxhB5lo3NeXxittqlWkfDS-s0tWhwUeSQr7rSKcv-PbsGomeghsbdZYWYQnXfH0eAtCF84tMez74lHd331TlUWcVg"
            }
          }
        }
      ]
    },
    {
      "module": "module.project_services",
      "mode": "managed",
      "type": "google_project_service",
      "name": "project_services",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "cloudresourcemanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/cloudresourcemanager.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "cloudresourcemanager.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "compute.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/compute.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "compute.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "container.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/container.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "container.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "iam.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/iam.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "iam.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "monitoring.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/monitoring.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "monitoring.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "redis.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/redis.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "redis.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "servicenetworking.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/servicenetworking.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "servicenetworking.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "sql-component.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/sql-component.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "sql-component.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "sqladmin.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/sqladmin.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "sqladmin.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    }
  ]
}
