{
  "version": 4,
  "terraform_version": "0.13.5",
  "serial": 480,
  "lineage": "e27ba9c7-47df-6329-16cb-1c457770a24a",
  "outputs": {
    "project_id": {
      "value": "lrc-portfolio-1138",
      "type": "string"
    },
    "region": {
      "value": "us-central1",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "google_compute_address",
      "name": "gitlab_address",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": []
    },
    {
      "mode": "data",
      "type": "google_compute_address",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "35.222.143.211",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "name": "nginx",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "status": "RESERVED"
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "flux_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "2cb21ef4bfd1af994df7f37a200aa227b04321720b5a268298015258247c418d",
            "rendered": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "template": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "vars": {
              "EMAIL": "loganrclemons@gmail.com",
              "REPO": "https://github.com/loganrobertclemons/lrc-portfolio.git",
              "USERNAME": "loganrobertclemons"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "gitlab_values",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "58f135d709450b5c9e53fb5a6be43e389e7efaa93cc4efa97b7127fe3d50b2b4",
            "rendered": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.224.216.228.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.224.216.228\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.7\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.46.183.204\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "template": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: ${DOMAIN}\n    https: true\n    gitlab: {}\n    externalIP: ${INGRESS_IP}\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: ${DB_PRIVATE_IP}\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: ${REDIS_PRIVATE_IP}\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: ${PROJECT_ID}-gitlab-backups\n    lfs:\n      bucket: ${PROJECT_ID}-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: ${PROJECT_ID}-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: ${PROJECT_ID}-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: ${PROJECT_ID}-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: ${PROJECT_ID}-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: ${CERT_MANAGER_EMAIL}\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: ${PROJECT_ID}\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: ${GITLAB_RUNNER_INSTALL}\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: ${PROJECT_ID}-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "vars": {
              "CERT_MANAGER_EMAIL": "loganrclemons@gmail.com",
              "DB_PRIVATE_IP": "10.1.0.7",
              "DOMAIN": "35.224.216.228.xip.io",
              "GITLAB_RUNNER_INSTALL": "false",
              "INGRESS_IP": "35.224.216.228",
              "PROJECT_ID": "lrc-portfolio-1138",
              "REDIS_PRIVATE_IP": "10.46.183.204"
            }
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "ingress_nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "34d822643574f0b71920ec1509c5b1953a0c4d6d0e36409db7daaa2e66340bf6",
            "rendered": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 35.222.143.211\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "template": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: ${NGINXIP}\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "vars": {
              "NGINXIP": "35.222.143.211"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "gitlab_address",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "address": "35.224.216.228",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-03-27T08:18:19.399-07:00",
            "description": "Gitlab Ingress IP",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/lrc-portfolio-cluster-gitlab-compute-address",
            "name": "lrc-portfolio-cluster-gitlab-compute-address",
            "network_tier": "PREMIUM",
            "project": "lrc-portfolio-1138",
            "purpose": "",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/lrc-portfolio-cluster-gitlab-compute-address",
            "subnetwork": "",
            "timeouts": null,
            "users": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/forwardingRules/acc0a41d038b94f2daca083db794d1cf"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "google_compute_address.nginx",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_address",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "35.222.143.211",
            "address_type": "EXTERNAL",
            "creation_timestamp": "2021-03-27T08:18:07.276-07:00",
            "description": "Nginx Ingress IP",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "name": "nginx",
            "network_tier": "PREMIUM",
            "project": "lrc-portfolio-1138",
            "purpose": "",
            "region": "us-central1",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/addresses/nginx",
            "subnetwork": "",
            "timeouts": null,
            "users": []
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwfX0=",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_global_address",
      "name": "gitlab_sql",
      "provider": "provider[\"registry.terraform.io/hashicorp/google-beta\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "address": "10.1.0.0",
            "address_type": "INTERNAL",
            "creation_timestamp": "2021-03-27T08:18:30.579-07:00",
            "description": "",
            "id": "projects/lrc-portfolio-1138/global/addresses/lrc-portfolio-cluster-gitlab-sql",
            "ip_version": "",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": {},
            "name": "lrc-portfolio-cluster-gitlab-sql",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "prefix_length": 16,
            "project": "lrc-portfolio-1138",
            "purpose": "VPC_PEERING",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/addresses/lrc-portfolio-cluster-gitlab-sql",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "gitlab_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": false,
            "delete_default_routes_on_create": false,
            "description": "",
            "gateway_ipv4": "",
            "id": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "mtu": 0,
            "name": "lrc-portfolio-cluster-gitlab-compute-network",
            "project": "lrc-portfolio-1138",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNDAwMDAwMDAwMDAsImRlbGV0ZSI6MjQwMDAwMDAwMDAwLCJ1cGRhdGUiOjI0MDAwMDAwMDAwMH19",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_subnetwork",
      "name": "gitlab_subnetwork",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "creation_timestamp": "2021-03-27T08:18:30.177-07:00",
            "description": "",
            "fingerprint": null,
            "gateway_address": "10.0.0.1",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "ip_cidr_range": "10.0.0.0/16",
            "log_config": [],
            "name": "lrc-portfolio-cluster-gitlab-compute-subnet",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "private_ip_google_access": false,
            "private_ipv6_google_access": "DISABLE_GOOGLE_ACCESS",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "secondary_ip_range": [
              {
                "ip_cidr_range": "10.3.0.0/16",
                "range_name": "gitlab-cluster-pod-cidr"
              },
              {
                "ip_cidr_range": "10.2.0.0/16",
                "range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "self_link": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozNjAwMDAwMDAwMDAsImRlbGV0ZSI6MzYwMDAwMDAwMDAwLCJ1cGRhdGUiOjM2MDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+him/05w=",
            "id": "lrc-portfolio-1138/roles/storage.admin/serviceaccount:gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/storage.admin"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_project_service",
      "name": "project",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "cloudresourcemanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/cloudresourcemanager.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "cloudresourcemanager.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "compute.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/compute.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "compute.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "container.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": null,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/container.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "container.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_redis_instance",
      "name": "gitlab_redis",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "alternative_location_id": "us-central1-f",
            "auth_enabled": false,
            "auth_string": "",
            "authorized_network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "connect_mode": "DIRECT_PEERING",
            "create_time": "2021-03-27T15:18:29.848822769Z",
            "current_location_id": "us-central1-c",
            "display_name": "GitLab Redis",
            "host": "10.46.183.204",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/instances/lrc-portfolio-cluster-gitlab-redis",
            "labels": {},
            "location_id": "us-central1-c",
            "memory_size_gb": 5,
            "name": "lrc-portfolio-cluster-gitlab-redis",
            "persistence_iam_identity": "serviceAccount:196595168067-compute@developer.gserviceaccount.com",
            "port": 6379,
            "project": "lrc-portfolio-1138",
            "redis_configs": {},
            "redis_version": "REDIS_4_0",
            "region": "us-central1",
            "reserved_ip_range": "10.46.183.200/29",
            "tier": "STANDARD_HA",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account",
      "name": "gitlab_gcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "account_id": "gitlab-gcs",
            "description": "",
            "display_name": "GitLab Cloud Storage",
            "email": "gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "unique_id": "116207047590416745156"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_account_key",
      "name": "gitlab_gcs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com/keys/871d0e183f2aec201c006bce86e7e32b5987165c",
            "keepers": null,
            "key_algorithm": "KEY_ALG_RSA_2048",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com/keys/871d0e183f2aec201c006bce86e7e32b5987165c",
            "private_key": "ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAibHJjLXBvcnRmb2xpby0xMTM4IiwKICAicHJpdmF0ZV9rZXlfaWQiOiAiODcxZDBlMTgzZjJhZWMyMDFjMDA2YmNlODZlN2UzMmI1OTg3MTY1YyIsCiAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZRSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2N3Z2dTakFnRUFBb0lCQVFEeWwzSTVlYjZPZExrU1xuZWxDWGlXd2ROMDh3UTJNYlo5Ymg1L0QvQm8xUFZKMjQ0ZE84Z0x5Z3l3SVZrUERRR25UeWJJZ3hvZ1A0YWJKTVxubXIyZjloSzJ3RmV2eWw2SDhJbURuTkZNYXBka3VsU2VuK2RMdzJ5cU1TSkVTdC9CdlRqcHBQTGplajdzUk1XaVxuOGFjVnA4WFJ6R0dOblJNb3R5YWtvQm82dEFrb0s3Tnp4ZlB5VFdZMDJ6R3lHT2ZzMUk5VjNNVHYrelhMTzV1aVxuRHFhZkw4QlRwWEdPczFxbmxNbWs2cWViZExKL0dUaXRRc09YU25vZHhQUnlONlRGTzQyMk5VZ0ZnNzJRN3JFdlxuVHdVMGZqUE1hK2xqcGpqazNOdFVCUytZWldxdFhQSERaeUl4WmdnZkJqVUVlQ3ljQUJNYzFMVDRXZ0xXbnR0bFxucWdKNXJFaURBZ01CQUFFQ2dnRUFJSDZWdjhvbGNycUMwYzFOZjBiYWt2MUdINjVmRjV3c3Bkem1KSnJ4a2JkQlxuV3pMd3BEYlFUVzl6NjRTYkpSenVIa3pZWDJHV3k0OEk0WWIyc0hjTElheVk4a1NXcmZuVHlhdlhRemVoNk0ybVxucVFxOU5pSktxMjlpYWlobldYR3BybTQ0VkswYXdaWWlyUVZXZnFtVzcxZkRsMjc3VW9CWjdrSTkwVEF0YTlKUFxuOHhtaDBwT0ZOaXlUVlM2SUJ6RjBwTFpIYkxZd1puUVc0M2dJVk9MMWNiWE5hTHF1SnFtU1JBdThPNjRwaWd6bFxuenAzTlJuRS8zQm5nc3doOEFVRzBrS3hpdXMzVXV2MzB1dGlFT3NqMHlVVWZ2WCtWYlBiWWhhNVFENk1NcEZTTVxubzVDUHhWcFFKMEVybFZxQ2lLU003UzJCQlRwdC9rZjhjMjZCRG4vRXdRS0JnUUQvRjdlWDlzSGNNQ2txQUxsVVxuVm1MUTU4UWl5V29IU2d5WTlPWkNxRHZxMzhjZEtiQ3VmUnZSdUp4NW5rM1h5TUdSNXZXOGtqYXFKMWI5Yk1HY1xuc2JCaTFNd1phS0RhQkZsYXVWcjRlaFVwazk2NlRhQmYzS1JBTHZ2N0JseUFoTy9MSHdkZzVjWmVEQXFkalZPUlxuaWdLSDF5ZkJ4d2hTUk9tb2pSVXF6Y1BiUXdLQmdRRHpkRmlGVzQwdHE3TGdKRGZIVkZIUTZmcTFnN3lsQS9ZdFxua24zRXZkdnMvd0l1V2dPQjA3a2tVYXhLMk9nQTVOZmhza05vTmM1LzZyYko1VDhBWHRsSWxmRE5zNUthdklVL1xua3dHWDVWRW5iMDVha0RBeGhmWGVhOFlKc0YvMG9YR1pYTmtXeVdtR1RnYldvVVBYZWFqUHRZZHhFSGdwcUt4eFxuZGFadGRuenB3UUtCZ1FDU1dDcnR0WlRXRzVNaUU3US9IQ2dvclM0cXZ0NWpQQ29wL2lXempBeUQzTW5BZzFCblxuYWtMeGVEWGMxK0xVcnNuT1NIQW1OTVBEcmpvTHZiNzloRHNyRitYWGxkemg5cWpFa1o0TSt3ejFBMjQ5OTViUVxuS0NiYTQ1bVFFOEF4d3hKR3Q1Qm1HS3hLL0NHQzdiZEp3YUZlQ1NNMzJsVjl6U2MzbVdqUlc2YkhQUUtCZ0ZLd1xuemZCZDdGSDY0OExtQ2x3Vjg4UTE5UVg2UFBUL3AzcExLNVRMdUF1RGdrWWtKTlRRQ1M2ZzN4aDlIREJSaWxJS1xucm9LUzVCVG1zRGRiT2s3eDZIT1RHanVFSnVPUDdPSnZHRGR6bUdFQW1XaUJXUjA1RnczNUpVYmROWHB0NjV2Zlxud1l6UDFKdmRuTTBCOFgwYXdZL3JaSm11c21IVC9ONTh5NDZhbEVzQkFvR0FaWCt0aU8zUzFhZ0xSZi9acjlJVlxua0FoYTRtSVhHM2tLZ0owamcwY0ZVM2NwNkVhR3lkTjFqK2tWZXN6YWFUb0VkbytaLzdmdUhKaFlMTG5WRFB4aFxuNDYrVm5rOXFvQzNNL0xmSEM5Q2xIOVF4aFJiS2FOZUduY1hFVUJ6bVhHZ3c3akhOaFk3WERsWmd4TXhiZE0zYVxueDBPajlXS1BXYXFYSlRxOXpKZmhKbkU9XG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iLAogICJjbGllbnRfZW1haWwiOiAiZ2l0bGFiLWdjc0BscmMtcG9ydGZvbGlvLTExMzguaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLAogICJjbGllbnRfaWQiOiAiMTE2MjA3MDQ3NTkwNDE2NzQ1MTU2IiwKICAiYXV0aF91cmkiOiAiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgiLAogICJ0b2tlbl91cmkiOiAiaHR0cHM6Ly9vYXV0aDIuZ29vZ2xlYXBpcy5jb20vdG9rZW4iLAogICJhdXRoX3Byb3ZpZGVyX3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL2NlcnRzIiwKICAiY2xpZW50X3g1MDlfY2VydF91cmwiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vcm9ib3QvdjEvbWV0YWRhdGEveDUwOS9naXRsYWItZ2NzJTQwbHJjLXBvcnRmb2xpby0xMTM4LmlhbS5nc2VydmljZWFjY291bnQuY29tIgp9Cg==",
            "private_key_type": "TYPE_GOOGLE_CREDENTIALS_FILE",
            "public_key": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lJSVdlR2JFYjVCSjh3RFFZSktvWklodmNOQVFFRkJRQXdJREVlTUJ3R0ExVUUKQXhNVk1URTJNakEzTURRM05Ua3dOREUyTnpRMU1UVTJNQ0FYRFRJeE1ETXlOekUxTVRnd09Gb1lEems1T1RreApNak14TWpNMU9UVTVXakFnTVI0d0hBWURWUVFERXhVeE1UWXlNRGN3TkRjMU9UQTBNVFkzTkRVeE5UWXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRHlsM0k1ZWI2T2RMa1NlbENYaVd3ZE4wOHcKUTJNYlo5Ymg1L0QvQm8xUFZKMjQ0ZE84Z0x5Z3l3SVZrUERRR25UeWJJZ3hvZ1A0YWJKTW1yMmY5aEsyd0Zldgp5bDZIOEltRG5ORk1hcGRrdWxTZW4rZEx3MnlxTVNKRVN0L0J2VGpwcFBMamVqN3NSTVdpOGFjVnA4WFJ6R0dOCm5STW90eWFrb0JvNnRBa29LN056eGZQeVRXWTAyekd5R09mczFJOVYzTVR2K3pYTE81dWlEcWFmTDhCVHBYR08KczFxbmxNbWs2cWViZExKL0dUaXRRc09YU25vZHhQUnlONlRGTzQyMk5VZ0ZnNzJRN3JFdlR3VTBmalBNYStsagpwamprM050VUJTK1laV3F0WFBIRFp5SXhaZ2dmQmpVRWVDeWNBQk1jMUxUNFdnTFdudHRscWdKNXJFaURBZ01CCkFBR2pPREEyTUF3R0ExVWRFd0VCL3dRQ01BQXdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1CWUdBMVVkSlFFQi93UU0KTUFvR0NDc0dBUVVGQndNQ01BMEdDU3FHU0liM0RRRUJCUVVBQTRJQkFRRGtOTVBiZ0s1eFpGS3FVaW1yN1NlZwpMeHFRdTNwcGk3RE1PWm9KYmtGSlN6WjBGcU1Sa2F6WnNORll2WVkrcTBsSTZFU3VweUZKVVFFYjBIK0thRlVMClZSVXZuTldxd1RnNUVKMjR6QlJVK0hBazBMMG5tc1ZmdDlLcDBxUGtrWFFXL1RFNHIwU1k2YjRsa3YrcmU4UkwKemdCc1BURW1KZnZnbEdZeEw4dEtwbzR0aFZ5V2dYWU5aZEtZRmFJODlEWWZjbk5QdmorSDRLZnUyRmhDakhrSgowQUlWdmZOL1lrcDA2UXpjUG9UUmdhU2V3Q0Fid2tWK0ltMFRGVzFQREM0MWFtZEFvK2FkY3J1bzJlZ0dvanJsCkJPcUF2ZWhMVUpUdXB6OGNFRktBeHRLOWx5b0NvTlZvRXFLYUpUeEduRTlraTZhNHBGMVl1SG9Ray9Ld0JTV1kKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
            "public_key_data": null,
            "public_key_type": "TYPE_X509_PEM_FILE",
            "service_account_id": "projects/lrc-portfolio-1138/serviceAccounts/gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com",
            "valid_after": "2021-03-27T15:18:08Z",
            "valid_before": "9999-12-31T23:59:59Z"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_service_networking_connection",
      "name": "private_vpc_connection",
      "provider": "provider[\"registry.terraform.io/hashicorp/google-beta\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "https%3A%2F%2Fwww.googleapis.com%2Fcompute%2Fv1%2Fprojects%2Flrc-portfolio-1138%2Fglobal%2Fnetworks%2Flrc-portfolio-cluster-gitlab-compute-network:servicenetworking.googleapis.com",
            "network": "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "peering": "servicenetworking-googleapis-com",
            "reserved_peering_ranges": [
              "lrc-portfolio-cluster-gitlab-sql"
            ],
            "service": "servicenetworking.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_database",
      "name": "gitlabhq_production",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "charset": "UTF8",
            "collation": "en_US.UTF8",
            "id": "projects/lrc-portfolio-1138/instances/gitlab-db-88a6/databases/gitlabhq_production",
            "instance": "gitlab-db-88a6",
            "name": "gitlabhq_production",
            "project": "lrc-portfolio-1138",
            "self_link": "https://sqladmin.googleapis.com/sql/v1beta4/projects/lrc-portfolio-1138/instances/gitlab-db-88a6/databases/gitlabhq_production",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "google_sql_database_instance.gitlab_db",
            "google_sql_user.gitlab",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_database_instance",
      "name": "gitlab_db",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "clone": [],
            "connection_name": "lrc-portfolio-1138:us-central1:gitlab-db-88a6",
            "database_version": "POSTGRES_11",
            "deletion_protection": false,
            "first_ip_address": "10.1.0.7",
            "id": "gitlab-db-88a6",
            "ip_address": [
              {
                "ip_address": "10.1.0.7",
                "time_to_retire": "",
                "type": "PRIVATE"
              }
            ],
            "master_instance_name": "",
            "name": "gitlab-db-88a6",
            "private_ip_address": "10.1.0.7",
            "project": "lrc-portfolio-1138",
            "public_ip_address": "",
            "region": "us-central1",
            "replica_configuration": [],
            "restore_backup_context": [],
            "root_password": null,
            "self_link": "https://sqladmin.googleapis.com/sql/v1beta4/projects/lrc-portfolio-1138/instances/gitlab-db-88a6",
            "server_ca_cert": [
              {
                "cert": "-----BEGIN CERTIFICATE-----\nMIIDfzCCAmegAwIBAgIBADANBgkqhkiG9w0BAQsFADB3MS0wKwYDVQQuEyQ0NzI1\nZDIxOC0zOGY1LTRlYmMtOTEyNS1mM2U1ZDMxNzZhYmIxIzAhBgNVBAMTGkdvb2ds\nZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUsIEluYzELMAkG\nA1UEBhMCVVMwHhcNMjEwMzI3MTUyMTAxWhcNMzEwMzI1MTUyMjAxWjB3MS0wKwYD\nVQQuEyQ0NzI1ZDIxOC0zOGY1LTRlYmMtOTEyNS1mM2U1ZDMxNzZhYmIxIzAhBgNV\nBAMTGkdvb2dsZSBDbG91ZCBTUUwgU2VydmVyIENBMRQwEgYDVQQKEwtHb29nbGUs\nIEluYzELMAkGA1UEBhMCVVMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB\nAQCPDGmBoVtrsD9XDCyDJ9BfLGTsSreXiW5h4A5qVw8Qh6oGA29AWqAaOtc6dwzQ\nu9k8JImP+ZyX437MuGVr2KC7wmEyJQCw2iWKz06G+sob9vyUdGOVUs8mgpXVJ8e7\nvYmSZaDaP/G0qrcJWwNg0N0JwHdccMVyhz8UvyJhPZglyrpfQq1xkyG98hK4wGh5\n7L9kL+WL3yq1Lwi4zJ2ek6XriECXjpkzfCqn0eHl86+IUFRsAPT4cCB23cWRILio\nFce5PJpCgJaiLuWNTzFg16W9R/C5xt+2KoT+pyDTYps7DClPETn0OwTzNLMydytp\ndNPoP3OtE56Tt/VJUduQbpSLAgMBAAGjFjAUMBIGA1UdEwEB/wQIMAYBAf8CAQAw\nDQYJKoZIhvcNAQELBQADggEBAGidVGpu1ipIwKsHECz+c2XcRAfQLGjC3Jeuh1K9\nBcGLKenW6NMbhEiN7bqfr9v5vlUghkG/rAWH6IcGx4QHwq6zIX0apwImFibobs8K\nGdrje7lnWVQ4+IIv93RhJ9hVylQ7P4XLqAnaIEsY8htdNlfVHmshF6Nl44W7dbum\nMSWdeiuZAB/L94vINSVnjtcXb39L043dUVXvuW4mb/0cTnJnvwzG7iupqUFULmdj\n94y1MrSOFyTKq3xmUqoRScpKIYzDqB+xjFZLlQnmj3x1Syx9PCNQt+1OnPVyL9Uo\nRhO3sPWaBL6hR+expDvkCf826e4bB0Z2dB29bUtkmg+04g8=\n-----END CERTIFICATE-----",
                "common_name": "C=US,O=Google\\, Inc,CN=Google Cloud SQL Server CA,dnQualifier=4725d218-38f5-4ebc-9125-f3e5d3176abb",
                "create_time": "2021-03-27T15:21:01.409Z",
                "expiration_time": "2031-03-25T15:22:01.409Z",
                "sha1_fingerprint": "7ce46b80bea927786e7f83fc487e684072c6be89"
              }
            ],
            "service_account_email_address": "p23732155832-0xhuva@gcp-sa-cloud-sql.iam.gserviceaccount.com",
            "settings": [
              {
                "activation_policy": "ALWAYS",
                "authorized_gae_applications": [],
                "availability_type": "ZONAL",
                "backup_configuration": [
                  {
                    "backup_retention_settings": [
                      {
                        "retained_backups": 7,
                        "retention_unit": "COUNT"
                      }
                    ],
                    "binary_log_enabled": false,
                    "enabled": false,
                    "location": "",
                    "point_in_time_recovery_enabled": false,
                    "start_time": "13:00",
                    "transaction_log_retention_days": 7
                  }
                ],
                "crash_safe_replication": false,
                "database_flags": [],
                "disk_autoresize": true,
                "disk_size": 10,
                "disk_type": "PD_SSD",
                "insights_config": [],
                "ip_configuration": [
                  {
                    "authorized_networks": [],
                    "ipv4_enabled": false,
                    "private_network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
                    "require_ssl": false
                  }
                ],
                "location_preference": [
                  {
                    "follow_gae_application": "",
                    "zone": "us-central1-b"
                  }
                ],
                "maintenance_window": [],
                "pricing_plan": "PER_USE",
                "replication_type": "SYNCHRONOUS",
                "tier": "db-custom-4-15360",
                "user_labels": {},
                "version": 1
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_sql_user",
      "name": "gitlab",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "deletion_policy": null,
            "host": "",
            "id": "gitlab//gitlab-db-88a6",
            "instance": "gitlab-db-88a6",
            "name": "gitlab",
            "password": "BsIK4nXq6m1CasXa",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "type": ""
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_service_networking_connection.private_vpc_connection",
            "google_sql_database_instance.gitlab_db",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "git-lfs",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-lfs",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-lfs",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-lfs",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-lfs",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-artifacts",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-artifacts",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-artifacts",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-artifacts",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-artifacts",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-backups",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-backups",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-backups",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-backups",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-backups",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-packages",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-packages",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-packages",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-packages",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-packages",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-pseudo",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-pseudo",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-pseudo",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-pseudo",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-pseudo",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-registry",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-registry",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-registry",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-registry",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-registry",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-runner-cache",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-runner-cache",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-runner-cache",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-runner-cache",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-runner-cache",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_storage_bucket",
      "name": "gitlab-uploads",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "bucket_policy_only": false,
            "cors": [],
            "default_event_based_hold": false,
            "encryption": [],
            "force_destroy": true,
            "id": "lrc-portfolio-1138-gitlab-uploads",
            "labels": {},
            "lifecycle_rule": [],
            "location": "US-CENTRAL1",
            "logging": [],
            "name": "lrc-portfolio-1138-gitlab-uploads",
            "project": "lrc-portfolio-1138",
            "requester_pays": false,
            "retention_policy": [],
            "self_link": "https://www.googleapis.com/storage/v1/b/lrc-portfolio-1138-gitlab-uploads",
            "storage_class": "STANDARD",
            "uniform_bucket_level_access": false,
            "url": "gs://lrc-portfolio-1138-gitlab-uploads",
            "versioning": [],
            "website": []
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "fluxcd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "flux",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "flux",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.21.0",
                "chart": "flux",
                "name": "flux",
                "namespace": "flux",
                "revision": 1,
                "values": "{\"git\":{\"branch\":\"main\",\"email\":\"loganrobertclemons@gmail.com\",\"label\":\"flux\",\"path\":\"releases\",\"pollInterval\":\"5m\",\"secretName\":\"flux-ssh\",\"url\":\"ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\",\"user\":\"loganrobertclemons\"},\"registry\":{\"disableScanning\":true},\"sync\":{\"state\":\"git\",\"timeout\":\"1m\"},\"syncGarbageCollection\":{\"enabled\":true}}",
                "version": "1.6.0"
              }
            ],
            "name": "flux",
            "namespace": "flux",
            "postrender": [],
            "recreate_pods": true,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.fluxcd.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true"
            ],
            "verify": false,
            "version": "1.6.0",
            "wait": false
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.flux_yaml",
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "gitlab",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "gitlab",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "gitlab",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "13.6.0",
                "chart": "gitlab",
                "name": "gitlab",
                "namespace": "default",
                "revision": 4,
                "values": "{\"certmanager-issuer\":{\"email\":\"loganrclemons@gmail.com\"},\"gitlab\":{\"gitaly\":{\"persistence\":{\"size\":\"200Gi\",\"storageClass\":\"pd-ssd\"}},\"task-runner\":{\"backups\":{\"objectStorage\":{\"backend\":\"gcs\",\"config\":{\"gcpProject\":\"lrc-portfolio-1138\",\"key\":\"gcs-application-credentials-file\",\"secret\":\"google-application-credentials\"}}}}},\"gitlab-runner\":{\"install\":false,\"rbac\":{\"create\":true},\"runners\":{\"cache\":{\"cacheShared\":true,\"cacheType\":\"gcs\",\"gcsBucketName\":\"lrc-portfolio-1138-runner-cache\",\"secretName\":\"google-application-credentials\"},\"locked\":false}},\"global\":{\"appConfig\":{\"artifacts\":{\"bucket\":\"lrc-portfolio-1138-gitlab-artifacts\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"backups\":{\"bucket\":\"lrc-portfolio-1138-gitlab-backups\"},\"enableUsagePing\":false,\"initialDefaults\":{\"signupEnabled\":false},\"lfs\":{\"bucket\":\"lrc-portfolio-1138-git-lfs\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"packages\":{\"bucket\":\"lrc-portfolio-1138-gitlab-packages\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"pseudonymizer\":{\"bucket\":\"lrc-portfolio-1138-gitlab-pseudo\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}},\"uploads\":{\"bucket\":\"lrc-portfolio-1138-gitlab-uploads\",\"connection\":{\"key\":\"connection\",\"secret\":\"gitlab-rails-storage\"}}},\"edition\":\"ce\",\"hosts\":{\"domain\":\"35.224.216.228.xip.io\",\"externalIP\":\"35.224.216.228\",\"gitlab\":{},\"https\":true,\"ssh\":null},\"ingress\":{\"configureCertmanager\":true,\"enabled\":true,\"tls\":{\"enabled\":false,\"secretName\":\"my-secret\"}},\"minio\":{\"enabled\":false},\"psql\":{\"database\":\"gitlabhq_production\",\"host\":\"10.1.0.7\",\"password\":{\"key\":\"password\",\"secret\":\"gitlab-pg\"},\"port\":5432,\"username\":\"gitlab\"},\"redis\":{\"host\":\"10.46.183.204\",\"password\":{\"enabled\":false}}},\"postgresql\":{\"install\":false},\"prometheus\":{\"install\":false},\"redis\":{\"install\":false},\"registry\":{\"enabled\":true,\"storage\":{\"extraKey\":\"gcs.json\",\"key\":\"storage\",\"secret\":\"gitlab-registry-storage\"}}}",
                "version": "4.6.0"
              }
            ],
            "name": "gitlab",
            "namespace": "default",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.gitlab.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 1600,
            "values": [
              "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.224.216.228.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.224.216.228\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.7\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.46.183.204\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json"
            ],
            "verify": false,
            "version": "4.6.0",
            "wait": false
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.gitlab_values",
            "google_redis_instance.gitlab_redis",
            "google_sql_user.gitlab",
            "kubernetes_storage_class.pd-ssd",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "helm_operator",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "helm-operator",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "helm-operator",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.2.0",
                "chart": "helm-operator",
                "name": "helm-operator",
                "namespace": "flux",
                "revision": 1,
                "values": "{\"chartsSyncInterval\":\"5m\",\"git\":{\"pollInterval\":\"5m\",\"ssh\":{\"secretName\":\"flux-ssh\"}},\"helm\":{\"versions\":\"v3\"},\"logReleaseDiffs\":true}",
                "version": "1.2.0"
              }
            ],
            "name": "helm-operator",
            "namespace": "flux",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.fluxcd.io",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "helm:\n  versions: v3\nlogReleaseDiffs: true\nchartsSyncInterval: 5m\ngit:\n  pollInterval: 5m\n  ssh:\n    secretName: flux-ssh"
            ],
            "verify": false,
            "version": "1.2.0",
            "wait": true
          },
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "ingress_nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "ingress-nginx",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": true,
            "id": "ingress-nginx",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "0.43.0",
                "chart": "ingress-nginx",
                "name": "ingress-nginx",
                "namespace": "nginx",
                "revision": 1,
                "values": "{\"controller\":{\"addHeaders\":{},\"admissionWebhooks\":{\"annotations\":{},\"certificate\":\"/usr/local/certificates/cert\",\"enabled\":true,\"failurePolicy\":\"Fail\",\"key\":\"/usr/local/certificates/key\",\"namespaceSelector\":{},\"objectSelector\":{},\"patch\":{\"enabled\":true,\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"docker.io/jettech/kube-webhook-certgen\",\"tag\":\"v1.5.0\"},\"nodeSelector\":{},\"podAnnotations\":{},\"priorityClassName\":\"\",\"runAsUser\":2000,\"tolerations\":[]},\"port\":8443,\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerSourceRanges\":[],\"servicePort\":443,\"type\":\"ClusterIP\"}},\"affinity\":{},\"annotations\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":11,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"autoscalingTemplate\":[],\"config\":{},\"configAnnotations\":{},\"configMapNamespace\":\"\",\"containerPort\":{\"http\":80,\"https\":443},\"customTemplate\":{\"configMapKey\":\"\",\"configMapName\":\"\"},\"dnsConfig\":{},\"dnsPolicy\":\"ClusterFirst\",\"electionID\":\"ingress-controller-leader\",\"enableMimalloc\":true,\"extraArgs\":{},\"extraContainers\":[],\"extraEnvs\":[],\"extraInitContainers\":[],\"extraVolumeMounts\":[],\"extraVolumes\":[],\"healthCheckPath\":\"/healthz\",\"hostNetwork\":false,\"hostPort\":{\"enabled\":false,\"ports\":{\"http\":80,\"https\":443}},\"image\":{\"allowPrivilegeEscalation\":true,\"digest\":\"sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\",\"pullPolicy\":\"IfNotPresent\",\"repository\":\"k8s.gcr.io/ingress-nginx/controller\",\"runAsUser\":101,\"tag\":\"v0.43.0\"},\"ingressClass\":\"nginx\",\"keda\":{\"apiVersion\":\"keda.sh/v1alpha1\",\"behavior\":{},\"cooldownPeriod\":300,\"enabled\":false,\"maxReplicas\":11,\"minReplicas\":1,\"pollingInterval\":30,\"restoreToOriginalReplicaCount\":false,\"triggers\":[]},\"kind\":\"Deployment\",\"labels\":{},\"lifecycle\":{\"preStop\":{\"exec\":{\"command\":[\"/wait-shutdown\"]}}},\"livenessProbe\":{\"failureThreshold\":5,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"port\":10254,\"successThreshold\":1,\"timeoutSeconds\":1},\"maxmindLicenseKey\":\"\",\"metrics\":{\"enabled\":false,\"port\":10254,\"prometheusRule\":{\"additionalLabels\":{},\"enabled\":false,\"rules\":[]},\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerSourceRanges\":[],\"servicePort\":9913,\"type\":\"ClusterIP\"},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":false,\"metricRelabelings\":[],\"namespace\":\"\",\"namespaceSelector\":{},\"scrapeInterval\":\"30s\",\"targetLabels\":[]}},\"minAvailable\":1,\"minReadySeconds\":0,\"name\":\"controller\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"proxySetHeaders\":{},\"publishService\":{\"enabled\":true,\"pathOverride\":\"\"},\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"port\":10254,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicaCount\":1,\"reportNodeInternalIp\":false,\"resources\":{\"requests\":{\"cpu\":\"100m\",\"memory\":\"90Mi\"}},\"scope\":{\"enabled\":false,\"namespace\":\"\"},\"service\":{\"annotations\":{},\"enableHttp\":true,\"enableHttps\":true,\"enabled\":true,\"externalIPs\":[],\"internal\":{\"annotations\":{},\"enabled\":false,\"loadBalancerSourceRanges\":[]},\"labels\":{},\"loadBalancerSourceRanges\":[],\"nodePorts\":{\"http\":\"\",\"https\":\"\",\"tcp\":{},\"udp\":{}},\"ports\":{\"http\":80,\"https\":443},\"targetPorts\":{\"http\":\"http\",\"https\":\"https\"},\"type\":\"LoadBalancer\"},\"sysctls\":{},\"tcp\":{\"annotations\":{},\"configMapNamespace\":\"\"},\"terminationGracePeriodSeconds\":300,\"tolerations\":[],\"topologySpreadConstraints\":[],\"udp\":{\"annotations\":{},\"configMapNamespace\":\"\"},\"updateStrategy\":{}},\"defaultBackend\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":2,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"enabled\":false,\"extraArgs\":{},\"extraEnvs\":[],\"image\":{\"allowPrivilegeEscalation\":false,\"pullPolicy\":\"IfNotPresent\",\"readOnlyRootFilesystem\":true,\"repository\":\"k8s.gcr.io/defaultbackend-amd64\",\"runAsNonRoot\":true,\"runAsUser\":65534,\"tag\":\"1.5\"},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":30,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":5},\"minAvailable\":1,\"name\":\"defaultbackend\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"port\":8080,\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":6,\"initialDelaySeconds\":0,\"periodSeconds\":5,\"successThreshold\":1,\"timeoutSeconds\":5},\"replicaCount\":1,\"resources\":{},\"service\":{\"annotations\":{},\"externalIPs\":[],\"loadBalancerIP\":\"35.222.143.211\",\"loadBalancerSourceRanges\":[],\"servicePort\":80,\"type\":\"ClusterIP\"},\"serviceAccount\":{\"create\":true,\"name\":null},\"tolerations\":[]},\"imagePullSecrets\":[],\"podSecurityPolicy\":{\"enabled\":false},\"rbac\":{\"create\":true,\"scope\":false},\"revisionHistoryLimit\":10,\"serviceAccount\":{\"create\":true,\"name\":null},\"tcp\":{},\"udp\":{}}",
                "version": "3.19.0"
              }
            ],
            "name": "ingress-nginx",
            "namespace": "nginx",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://kubernetes.github.io/ingress-nginx",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 35.222.143.211\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\""
            ],
            "verify": false,
            "version": "3.19.0",
            "wait": true
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_compute_address.nginx",
            "data.template_file.ingress_nginx",
            "google_compute_address.nginx",
            "kubernetes_namespace.nginx",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.nginx_helm",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "flux",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "flux",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "flux",
                "resource_version": "18304",
                "self_link": "/api/v1/namespaces/flux",
                "uid": "e9f53a71-7587-4e9b-9077-a5615d4af0b2"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "nginx",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "nginx",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "nginx",
                "resource_version": "18301",
                "self_link": "/api/v1/namespaces/nginx",
                "uid": "ef6428ae-65f9-4a66-8cf5-ec07da0963f6"
              }
            ],
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "flux_ssh",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "identity": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAxPcx506K34YJaaknUmaHH/nzzT4Qc7kQ8GcSy47ezG8Ws/66\niqGtILgDOWRmGDs/d+uh/uFDEWsUhEilNpwhpJE4mCQyV/TcnTLjPzfaxdC3c/X7\nqGPAyDGqZ2uszUi9UpRBZkUFTCj0C2vpGKfsAC8z4Me94qgIA9grDLAiixQI40Eb\npSpRTzfjwP1BNPoGpiWlVuwPdlRS3HYTCrWOQTKwBIx+kBGTGxY6VsZ8kYG2g6rf\nyCqVmZtIc4rVq6UZ8w1HSyc/6OFpz90l7zq/MJahXCXtebvoLA+hHU0rm0cYBx5B\nSJTARYemBhEoe4dHcMrvic/D99v4N3yJLT17ELCOhZaHLQ7+e8tcnUAAk5RYS8Qd\nFh7+0PTCEQ/1G4XyC6YSLACNyzNTKkNU5f8q1RDSiCSRcLC5tmGkp95ZeTV+X93p\nznbVgvByrV/MhLoJZ1r+YM3HvkxBCnFdy4B1VlDvHFEDSco4yhfNqzP3p72VRB6c\nFdyk5KMHL+AgKtswOqcTvrY45R9BFFsQMr/+uxK4Gf6GGii4c33CkO40AIW6PWHo\nh/k0jCvHoiwpIZC8seWD2DiUxidSY3wJzlh3f1MnKuW9rZ26IcmS3Nfy7B25FbnP\n+do8vmpELviOgINYZwIS6aY3ak5qSwAwH69LvK7VEWbZyKb3zGsQdd+c+3UCAwEA\nAQKCAgB2wLc0x3URSUX5j4PmuWw0ykXE8+uFagodd3eshQotZbjhcu5TUSEJvggr\nnS205Fvi2I2GF5iRMudezlHV+BKMnwXpLMGxqC8vFBRQ9EMRy0IgRymgn+wGh3M/\nAXthFb8Xv80idPC5t2NUU45pUC0I+2yi1KrWsgqLDtT9xGA/TCgDpCifz0DQq1jE\n7axX3XsOx1nFa3PzGuoOg539cfM/uejIBVD1WbNAvIkV8nv+Wp+JCQf9LjeeMjJf\nf1BOOa/Ii7P1SsfMh8N9EM+jSd8l01ucLD3ejH1xu0afXPyylQ2WlRY1RYIbKare\ns4+d0rUu+xurEjoMAXLJOWuXfB7qpPT31mnf97r7kJ6k7ty7REKa5z4DR2ZrbN9U\nnykpyVORNmvzWFVi6eeHek2D7+YMgdNuMYoa96W/Sx/JSKWtPCLU5iRyuNZMwEel\nbdIM2KPi9UEMrk61LKdZlPZxYvtzLdeKMfGzWuYt4ae48MAd/98EES2mBebpQXFM\nXVW+nfX6cyQ92qUTrQ4LUVlb4UaGXDXfNopr6eVJsjxbcXs/MQMrCTkyheH/saLw\nYxuBp/8Zmfx+wJR39Hbs2CFZ2BD4FnYnh55HUK+x7kPLmAWzRcILOGv3Mgj7Y5fC\ngMMGGYdXrNsVSJvIliTKYrjbObFy5JWZ0pV+kLYbL8bv4zjt4QKCAQEA7Ieeadck\n2xEUCsrHtCoMzvW8Va24jfRA3cwO/zJVbO3dfYe8Foz5iGoLUqu75mBcOvWByiPI\nEv7UEiOCv0HPFXftFfAnq9JPFgq/VScGOXFmAUMa4WdC+hmb6okgjuBiEQeAAvK3\nynj+bqBiEr1zDIztchoPD00v+mM3LrTUpzYfFiOVF+piWA2gKMe68hsrFxP6hdN6\nYnU2jOJJQo5nMeryYP13UlOVG9vlNL5T03GfRzdZ59fpHRO4vtc801wTKhGImTHZ\n0QsM2SGXViC5U+19HfH8eoIQNiTicDAII/V1semEUAoDszKg0GZAO1fr+MoqQVeV\nGGXUEGZySlGqbQKCAQEA1S3XqWHMDjN/lYkcKapq2oUax7br3bOKJzSBsjxAz58M\nR8Y+xsKEOUL/+Nz0fo+uFgzQGxNv3Nyw8uUUP2V6BvBDswUvUGtDNE+SNqDjy45f\nsEbAOrXjwhRr0q3HfKOdYQAr+JHx9C5R+BecJaiWj8Nvor7/fYlC+l/d4RwPu/IE\n9egxjkWbVrXC3e4eVvq6DvxMOZOOEM0FQ7b3WlUbgX8Y2sGQH5IJHwaHNf2syNpo\nWKnFhI3tTWzSC8qkEPfJpDbMpyXqPHN1iiLgwv8o7/kpiCuOsFGhETM73ZoNBuUk\nEUDa3zssc83Q3mY4tyP4EEihjJeOCHxEPE2j6j1wKQKCAQBNbROJF/kjkNKbucdn\njYBF2yD8dvJ73WHCeQLLvOFD2BVx+xWx2BHy+qucM0U943stfaIv1kivFyW6jk9F\nZjhwkaJVVRjXYO+sinYZXL3n3dwDO8E32cKN9gYY3yx+OKtBYdAgpu1M5RB8jBmu\ngr9/cz5i5G7blmvHLeUpb95QoiHI8Hrkqj/pDQTJdKAYkpYnZs3SMujUBASIV6ad\nl9nl+D/BShdeJqgfx3qfKlJsW7xE5rSSdRYFA6itJ+3sTi6jzbuGUlA34sMg7KMK\neYnRFGOpgsYgICVIZAiPqtlvU/Fj/MnoHW8aoM8NiPsrsds3xI3Sd+YBZ4vklnSB\nKXx9AoIBAQCZ9+A5oD7nSt6tPDgxB7rhVR2AfWdh2ti/dDbwaoBM9IzEEjUpDTi+\nuttx/PRBrLiJiHuN8r3qgSL0a+vx1fMKq+HZnLcNmEsTrxzlg9LDJHOMN62DOffk\nJyexJH5eUTXL53nasF5WhFYDn9nRgTAtaXRp0RVqsAbGGxOAEOp0Tlqy2R9hqHiH\nagPykpcrLy/Ovv623xHOpKVWwQFqJuoU350t8nuLscgQtoBVyIBRGR4gW44jLPbl\n4uDaT2OsNatXhZTObJ3/R0zvlj1L2UrR9929UehfBLYWXDCy3x7lif5Az9zFOlHi\n2hYvaxkvfTUfXbYAez3Edyw5ecIX3oPxAoIBAQCdHVVp0jrhPeJjT7AJYEHIQJiz\n/9h5RYJOqYgzeaQ+PmbenMPCDVc+07FwQfUzlw/RyWc/sI2Yt1i9W9jqq3ghy9IZ\nPTGOmjkDK1ULHZ+2d7cHQJ+WsXuzyb3nF7NPtaXb/R0yaGBQsZq8UEVz/SpiIsBR\nTlcSFdtC8IW7wbyYvbbalmH83kiTmO/YY8AbAUI+S+8iW/fqnivXVo1nGcspL/uf\n0M+y4s8YJai1ZSBxR/Y1T2K2eX7BtPeoTWeADKwdv5hxUR4YW19wb60xlNXQuvwQ\nlxub4yJyz0IwFjlGSCeobsz6Lax5sU69edp65XaPYdU4c4KTTc6hX4FGVswe\n-----END RSA PRIVATE KEY-----\n"
            },
            "id": "flux/flux-ssh",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "flux-ssh",
                "namespace": "flux",
                "resource_version": "18325",
                "self_link": "/api/v1/namespaces/flux/secrets/flux-ssh",
                "uid": "974a31a7-9cf8-46fe-8367-663a2ed5cd68"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "kubernetes_namespace.flux",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_gcs_credentials",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "gcs-application-credentials-file": "{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"871d0e183f2aec201c006bce86e7e32b5987165c\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDyl3I5eb6OdLkS\\nelCXiWwdN08wQ2MbZ9bh5/D/Bo1PVJ244dO8gLygywIVkPDQGnTybIgxogP4abJM\\nmr2f9hK2wFevyl6H8ImDnNFMapdkulSen+dLw2yqMSJESt/BvTjppPLjej7sRMWi\\n8acVp8XRzGGNnRMotyakoBo6tAkoK7NzxfPyTWY02zGyGOfs1I9V3MTv+zXLO5ui\\nDqafL8BTpXGOs1qnlMmk6qebdLJ/GTitQsOXSnodxPRyN6TFO422NUgFg72Q7rEv\\nTwU0fjPMa+ljpjjk3NtUBS+YZWqtXPHDZyIxZggfBjUEeCycABMc1LT4WgLWnttl\\nqgJ5rEiDAgMBAAECggEAIH6Vv8olcrqC0c1Nf0bakv1GH65fF5wspdzmJJrxkbdB\\nWzLwpDbQTW9z64SbJRzuHkzYX2GWy48I4Yb2sHcLIayY8kSWrfnTyavXQzeh6M2m\\nqQq9NiJKq29iaihnWXGprm44VK0awZYirQVWfqmW71fDl277UoBZ7kI90TAta9JP\\n8xmh0pOFNiyTVS6IBzF0pLZHbLYwZnQW43gIVOL1cbXNaLquJqmSRAu8O64pigzl\\nzp3NRnE/3Bngswh8AUG0kKxius3Uuv30utiEOsj0yUUfvX+VbPbYha5QD6MMpFSM\\no5CPxVpQJ0ErlVqCiKSM7S2BBTpt/kf8c26BDn/EwQKBgQD/F7eX9sHcMCkqALlU\\nVmLQ58QiyWoHSgyY9OZCqDvq38cdKbCufRvRuJx5nk3XyMGR5vW8kjaqJ1b9bMGc\\nsbBi1MwZaKDaBFlauVr4ehUpk966TaBf3KRALvv7BlyAhO/LHwdg5cZeDAqdjVOR\\nigKH1yfBxwhSROmojRUqzcPbQwKBgQDzdFiFW40tq7LgJDfHVFHQ6fq1g7ylA/Yt\\nkn3Evdvs/wIuWgOB07kkUaxK2OgA5NfhskNoNc5/6rbJ5T8AXtlIlfDNs5KavIU/\\nkwGX5VEnb05akDAxhfXea8YJsF/0oXGZXNkWyWmGTgbWoUPXeajPtYdxEHgpqKxx\\ndaZtdnzpwQKBgQCSWCrttZTWG5MiE7Q/HCgorS4qvt5jPCop/iWzjAyD3MnAg1Bn\\nakLxeDXc1+LUrsnOSHAmNMPDrjoLvb79hDsrF+XXldzh9qjEkZ4M+wz1A24995bQ\\nKCba45mQE8AxwxJGt5BmGKxK/CGC7bdJwaFeCSM32lV9zSc3mWjRW6bHPQKBgFKw\\nzfBd7FH648LmClwV88Q19QX6PPT/p3pLK5TLuAuDgkYkJNTQCS6g3xh9HDBRilIK\\nroKS5BTmsDdbOk7x6HOTGjuEJuOP7OJvGDdzmGEAmWiBWR05Fw35JUbdNXpt65vf\\nwYzP1JvdnM0B8X0awY/rZJmusmHT/N58y46alEsBAoGAZX+tiO3S1agLRf/Zr9IV\\nkAha4mIXG3kKgJ0jg0cFU3cp6EaGydN1j+kVeszaaToEdo+Z/7fuHJhYLLnVDPxh\\n46+Vnk9qoC3M/LfHC9ClH9QxhRbKaNeGncXEUBzmXGgw7jHNhY7XDlZgxMxbdM3a\\nx0Oj9WKPWaqXJTq9zJfhJnE=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"116207047590416745156\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n"
            },
            "id": "default/google-application-credentials",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "google-application-credentials",
                "namespace": "default",
                "resource_version": "18306",
                "self_link": "/api/v1/namespaces/default/secrets/google-application-credentials",
                "uid": "496d648a-b48f-4218-8f44-8e2bb470bfda"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_pg",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "password": "BsIK4nXq6m1CasXa"
            },
            "id": "default/gitlab-pg",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-pg",
                "namespace": "default",
                "resource_version": "18300",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-pg",
                "uid": "8656b177-4844-40a9-a581-552a9b36bdd8"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_rails_storage",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "connection": "provider: Google\ngoogle_project: lrc-portfolio-1138\ngoogle_client_email: gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\ngoogle_json_key_string: '{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"871d0e183f2aec201c006bce86e7e32b5987165c\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDyl3I5eb6OdLkS\\nelCXiWwdN08wQ2MbZ9bh5/D/Bo1PVJ244dO8gLygywIVkPDQGnTybIgxogP4abJM\\nmr2f9hK2wFevyl6H8ImDnNFMapdkulSen+dLw2yqMSJESt/BvTjppPLjej7sRMWi\\n8acVp8XRzGGNnRMotyakoBo6tAkoK7NzxfPyTWY02zGyGOfs1I9V3MTv+zXLO5ui\\nDqafL8BTpXGOs1qnlMmk6qebdLJ/GTitQsOXSnodxPRyN6TFO422NUgFg72Q7rEv\\nTwU0fjPMa+ljpjjk3NtUBS+YZWqtXPHDZyIxZggfBjUEeCycABMc1LT4WgLWnttl\\nqgJ5rEiDAgMBAAECggEAIH6Vv8olcrqC0c1Nf0bakv1GH65fF5wspdzmJJrxkbdB\\nWzLwpDbQTW9z64SbJRzuHkzYX2GWy48I4Yb2sHcLIayY8kSWrfnTyavXQzeh6M2m\\nqQq9NiJKq29iaihnWXGprm44VK0awZYirQVWfqmW71fDl277UoBZ7kI90TAta9JP\\n8xmh0pOFNiyTVS6IBzF0pLZHbLYwZnQW43gIVOL1cbXNaLquJqmSRAu8O64pigzl\\nzp3NRnE/3Bngswh8AUG0kKxius3Uuv30utiEOsj0yUUfvX+VbPbYha5QD6MMpFSM\\no5CPxVpQJ0ErlVqCiKSM7S2BBTpt/kf8c26BDn/EwQKBgQD/F7eX9sHcMCkqALlU\\nVmLQ58QiyWoHSgyY9OZCqDvq38cdKbCufRvRuJx5nk3XyMGR5vW8kjaqJ1b9bMGc\\nsbBi1MwZaKDaBFlauVr4ehUpk966TaBf3KRALvv7BlyAhO/LHwdg5cZeDAqdjVOR\\nigKH1yfBxwhSROmojRUqzcPbQwKBgQDzdFiFW40tq7LgJDfHVFHQ6fq1g7ylA/Yt\\nkn3Evdvs/wIuWgOB07kkUaxK2OgA5NfhskNoNc5/6rbJ5T8AXtlIlfDNs5KavIU/\\nkwGX5VEnb05akDAxhfXea8YJsF/0oXGZXNkWyWmGTgbWoUPXeajPtYdxEHgpqKxx\\ndaZtdnzpwQKBgQCSWCrttZTWG5MiE7Q/HCgorS4qvt5jPCop/iWzjAyD3MnAg1Bn\\nakLxeDXc1+LUrsnOSHAmNMPDrjoLvb79hDsrF+XXldzh9qjEkZ4M+wz1A24995bQ\\nKCba45mQE8AxwxJGt5BmGKxK/CGC7bdJwaFeCSM32lV9zSc3mWjRW6bHPQKBgFKw\\nzfBd7FH648LmClwV88Q19QX6PPT/p3pLK5TLuAuDgkYkJNTQCS6g3xh9HDBRilIK\\nroKS5BTmsDdbOk7x6HOTGjuEJuOP7OJvGDdzmGEAmWiBWR05Fw35JUbdNXpt65vf\\nwYzP1JvdnM0B8X0awY/rZJmusmHT/N58y46alEsBAoGAZX+tiO3S1agLRf/Zr9IV\\nkAha4mIXG3kKgJ0jg0cFU3cp6EaGydN1j+kVeszaaToEdo+Z/7fuHJhYLLnVDPxh\\n46+Vnk9qoC3M/LfHC9ClH9QxhRbKaNeGncXEUBzmXGgw7jHNhY7XDlZgxMxbdM3a\\nx0Oj9WKPWaqXJTq9zJfhJnE=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"116207047590416745156\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n'\n"
            },
            "id": "default/gitlab-rails-storage",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-rails-storage",
                "namespace": "default",
                "resource_version": "18305",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-rails-storage",
                "uid": "1f5e7b60-f276-4557-953a-e0ed39d7a302"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account.gitlab_gcs",
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_secret",
      "name": "gitlab_registry_storage",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "data": {
              "gcs.json": "{\n  \"type\": \"service_account\",\n  \"project_id\": \"lrc-portfolio-1138\",\n  \"private_key_id\": \"871d0e183f2aec201c006bce86e7e32b5987165c\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDyl3I5eb6OdLkS\\nelCXiWwdN08wQ2MbZ9bh5/D/Bo1PVJ244dO8gLygywIVkPDQGnTybIgxogP4abJM\\nmr2f9hK2wFevyl6H8ImDnNFMapdkulSen+dLw2yqMSJESt/BvTjppPLjej7sRMWi\\n8acVp8XRzGGNnRMotyakoBo6tAkoK7NzxfPyTWY02zGyGOfs1I9V3MTv+zXLO5ui\\nDqafL8BTpXGOs1qnlMmk6qebdLJ/GTitQsOXSnodxPRyN6TFO422NUgFg72Q7rEv\\nTwU0fjPMa+ljpjjk3NtUBS+YZWqtXPHDZyIxZggfBjUEeCycABMc1LT4WgLWnttl\\nqgJ5rEiDAgMBAAECggEAIH6Vv8olcrqC0c1Nf0bakv1GH65fF5wspdzmJJrxkbdB\\nWzLwpDbQTW9z64SbJRzuHkzYX2GWy48I4Yb2sHcLIayY8kSWrfnTyavXQzeh6M2m\\nqQq9NiJKq29iaihnWXGprm44VK0awZYirQVWfqmW71fDl277UoBZ7kI90TAta9JP\\n8xmh0pOFNiyTVS6IBzF0pLZHbLYwZnQW43gIVOL1cbXNaLquJqmSRAu8O64pigzl\\nzp3NRnE/3Bngswh8AUG0kKxius3Uuv30utiEOsj0yUUfvX+VbPbYha5QD6MMpFSM\\no5CPxVpQJ0ErlVqCiKSM7S2BBTpt/kf8c26BDn/EwQKBgQD/F7eX9sHcMCkqALlU\\nVmLQ58QiyWoHSgyY9OZCqDvq38cdKbCufRvRuJx5nk3XyMGR5vW8kjaqJ1b9bMGc\\nsbBi1MwZaKDaBFlauVr4ehUpk966TaBf3KRALvv7BlyAhO/LHwdg5cZeDAqdjVOR\\nigKH1yfBxwhSROmojRUqzcPbQwKBgQDzdFiFW40tq7LgJDfHVFHQ6fq1g7ylA/Yt\\nkn3Evdvs/wIuWgOB07kkUaxK2OgA5NfhskNoNc5/6rbJ5T8AXtlIlfDNs5KavIU/\\nkwGX5VEnb05akDAxhfXea8YJsF/0oXGZXNkWyWmGTgbWoUPXeajPtYdxEHgpqKxx\\ndaZtdnzpwQKBgQCSWCrttZTWG5MiE7Q/HCgorS4qvt5jPCop/iWzjAyD3MnAg1Bn\\nakLxeDXc1+LUrsnOSHAmNMPDrjoLvb79hDsrF+XXldzh9qjEkZ4M+wz1A24995bQ\\nKCba45mQE8AxwxJGt5BmGKxK/CGC7bdJwaFeCSM32lV9zSc3mWjRW6bHPQKBgFKw\\nzfBd7FH648LmClwV88Q19QX6PPT/p3pLK5TLuAuDgkYkJNTQCS6g3xh9HDBRilIK\\nroKS5BTmsDdbOk7x6HOTGjuEJuOP7OJvGDdzmGEAmWiBWR05Fw35JUbdNXpt65vf\\nwYzP1JvdnM0B8X0awY/rZJmusmHT/N58y46alEsBAoGAZX+tiO3S1agLRf/Zr9IV\\nkAha4mIXG3kKgJ0jg0cFU3cp6EaGydN1j+kVeszaaToEdo+Z/7fuHJhYLLnVDPxh\\n46+Vnk9qoC3M/LfHC9ClH9QxhRbKaNeGncXEUBzmXGgw7jHNhY7XDlZgxMxbdM3a\\nx0Oj9WKPWaqXJTq9zJfhJnE=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"gitlab-gcs@lrc-portfolio-1138.iam.gserviceaccount.com\",\n  \"client_id\": \"116207047590416745156\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/gitlab-gcs%40lrc-portfolio-1138.iam.gserviceaccount.com\"\n}\n\n",
              "storage": "gcs:\n  bucket: lrc-portfolio-1138-registry\n  keyfile: /etc/docker/registry/storage/gcs.json\n"
            },
            "id": "default/gitlab-registry-storage",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "gitlab-registry-storage",
                "namespace": "default",
                "resource_version": "18303",
                "self_link": "/api/v1/namespaces/default/secrets/gitlab-registry-storage",
                "uid": "32f97408-0864-445a-ae78-8380610a3e9f"
              }
            ],
            "type": "Opaque"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_service_account_key.gitlab_gcs",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_storage_class",
      "name": "pd-ssd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allow_volume_expansion": true,
            "id": "pd-ssd",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "pd-ssd",
                "resource_version": "18302",
                "self_link": "/apis/storage.k8s.io/v1/storageclasses/pd-ssd",
                "uid": "2877888d-834c-4f38-bdeb-fd51cfe3d9c5"
              }
            ],
            "mount_options": [],
            "parameters": {
              "type": "pd-ssd"
            },
            "reclaim_policy": "Delete",
            "storage_provisioner": "kubernetes.io/gce-pd",
            "volume_binding_mode": "Immediate"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "flux_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "git:\n  url: ssh://git@github.com/loganrobertclemons/lrc-portfolio.git\n  path: releases\n  pollInterval: 5m\n  user: loganrobertclemons\n  email: loganrobertclemons@gmail.com\n  secretName: flux-ssh\n  label: flux\n  branch: main\nsync:\n  state: git\n  timeout: 1m\nregistry:\n  disableScanning: true\nsyncGarbageCollection:\n  enabled: true",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/flux-values.yaml",
            "id": "99a0324621b8ed1ad1334015c5aaa3a1a8f707c2",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.flux_yaml",
            "kubernetes_namespace.flux",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.sleep_for_cluster_fix_helm_6361"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "gitlab_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "# Values for gitlab/gitlab chart on GKE\nglobal:\n  edition: ce\n  hosts:\n    domain: 35.224.216.228.xip.io\n    https: true\n    gitlab: {}\n    externalIP: 35.224.216.228\n    ssh: ~\n\n  ## doc/charts/globals.md#configure-ingress-settings\n  ingress:\n    configureCertmanager: true\n    enabled: true\n    tls:\n      enabled: true\n      secretName: my-secret\n\n  ## doc/charts/globals.md#configure-postgresql-settings\n  psql:\n    password:\n      secret: gitlab-pg\n      key: password\n    host: 10.1.0.7\n    port: 5432\n    username: gitlab\n    database: gitlabhq_production\n\n  redis:\n    password:\n      enabled: false\n    host: 10.46.183.204\n\n  ## doc/charts/globals.md#configure-minio-settings\n  minio:\n    enabled: false\n\n  ## doc/charts/globals.md#configure-appconfig-settings\n  ## Rails based portions of this chart share many settings\n  appConfig:\n    ## doc/charts/globals.md#general-application-settings\n    enableUsagePing: false\n    initialDefaults:\n        signupEnabled: false\n\n    ## doc/charts/globals.md#lfs-artifacts-uploads-packages\n    backups:\n      bucket: lrc-portfolio-1138-gitlab-backups\n    lfs:\n      bucket: lrc-portfolio-1138-git-lfs\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    artifacts:\n      bucket: lrc-portfolio-1138-gitlab-artifacts\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    uploads:\n      bucket: lrc-portfolio-1138-gitlab-uploads\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n    packages:\n      bucket: lrc-portfolio-1138-gitlab-packages\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\n    ## doc/charts/globals.md#pseudonymizer-settings\n    pseudonymizer:\n      bucket: lrc-portfolio-1138-gitlab-pseudo\n      connection:\n        secret: gitlab-rails-storage\n        key: connection\n\ncertmanager-issuer:\n  email: loganrclemons@gmail.com\n\nprometheus:\n  install: false\n\nredis:\n  install: false\n\ngitlab:\n  gitaly:\n    persistence:\n      size: 200Gi\n      storageClass: \"pd-ssd\"\n  task-runner:\n    backups:\n      objectStorage:\n        backend: gcs\n        config:\n          secret: google-application-credentials\n          key: gcs-application-credentials-file\n          gcpProject: lrc-portfolio-1138\n\npostgresql:\n  install: false\n\ngitlab-runner:\n  install: false\n  rbac:\n    create: true\n  runners:\n    locked: false\n    cache:\n      cacheType: gcs\n      gcsBucketName: lrc-portfolio-1138-runner-cache\n      secretName: google-application-credentials\n      cacheShared: true\n\nregistry:\n  enabled: true\n  storage:\n    secret: gitlab-registry-storage\n    key: storage\n    extraKey: gcs.json",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/gitlab-values.yaml",
            "id": "b552158e5388bb2a0070dc56b000447ebf9d1dc4",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.template_file.gitlab_values",
            "kubernetes_namespace.flux",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "ingress_nginx_yaml",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "## nginx configuration\n## Ref: https://github.com/kubernetes/ingress-nginx/blob/master/controllers/nginx/configuration.md\n##\n\n## Overrides for generated resource names\n# See templates/_helpers.tpl\n# nameOverride:\n# fullnameOverride:\n\ncontroller:\n  name: controller\n  image:\n    repository: k8s.gcr.io/ingress-nginx/controller\n    tag: \"v0.43.0\"\n    digest: sha256:9bba603b99bf25f6d117cf1235b6598c16033ad027b143c90fa5b3cc583c5713\n    pullPolicy: IfNotPresent\n    # www-data -\u003e uid 101\n    runAsUser: 101\n    allowPrivilegeEscalation: true\n\n  # Configures the ports the nginx-controller listens on\n  containerPort:\n    http: 80\n    https: 443\n\n  # Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/\n  config: {}\n\n  ## Annotations to be added to the controller config configuration configmap\n  ##\n  configAnnotations: {}\n\n  # Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/master/docs/examples/customization/custom-headers\n  proxySetHeaders: {}\n\n  # Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers\n  addHeaders: {}\n\n  # Optionally customize the pod dnsConfig.\n  dnsConfig: {}\n\n  # Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.\n  # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller\n  # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.\n  dnsPolicy: ClusterFirst\n\n  # Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network\n  # Ingress status was blank because there is no Service exposing the NGINX Ingress controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply\n  reportNodeInternalIp: false\n\n  # Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),\n  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920\n  # is merged\n  hostNetwork: false\n\n  ## Use host ports 80 and 443\n  ## Disabled by default\n  ##\n  hostPort:\n    enabled: false\n    ports:\n      http: 80\n      https: 443\n\n  ## Election ID to use for status update\n  ##\n  electionID: ingress-controller-leader\n\n  ## Name of the ingress class to route through this controller\n  ##\n  ingressClass: nginx\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Security Context policies for controller pods\n  ##\n  podSecurityContext: {}\n\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ###\n  sysctls: {}\n  # sysctls:\n  #   \"net.core.somaxconn\": \"8192\"\n\n  ## Allows customization of the source of the IP address or FQDN to report\n  ## in the ingress status field. By default, it reads the information provided\n  ## by the service. If disable, the status field reports the IP address of the\n  ## node or nodes where an ingress controller pod is running.\n  publishService:\n    enabled: true\n    ## Allows overriding of the publish service to bind to\n    ## Must be \u003cnamespace\u003e/\u003cservice_name\u003e\n    ##\n    pathOverride: \"\"\n\n  ## Limit the scope of the controller\n  ##\n  scope:\n    enabled: false\n    namespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the configmap / nginx-configmap namespace\n  ##\n  configMapNamespace: \"\"   # defaults to .Release.Namespace\n\n  ## Allows customization of the tcp-services-configmap\n  ##\n  tcp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the tcp config configmap\n    annotations: {}\n\n  ## Allows customization of the udp-services-configmap\n  ##\n  udp:\n    configMapNamespace: \"\"   # defaults to .Release.Namespace\n    ## Annotations to be added to the udp config configmap\n    annotations: {}\n\n  # Maxmind license key to download GeoLite2 Databases\n  # https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases\n  maxmindLicenseKey: \"\"\n\n  ## Additional command line arguments to pass to nginx-ingress-controller\n  ## E.g. to specify the default SSL certificate you can use\n  ## extraArgs:\n  ##   default-ssl-certificate: \"\u003cnamespace\u003e/\u003csecret_name\u003e\"\n  extraArgs: {}\n\n  ## Additional environment variables to set\n  extraEnvs: []\n  # extraEnvs:\n  #   - name: FOO\n  #     valueFrom:\n  #       secretKeyRef:\n  #         key: FOO\n  #         name: secret-resource\n\n  ## DaemonSet or Deployment\n  ##\n  kind: Deployment\n\n  ## Annotations to be added to the controller Deployment or DaemonSet\n  ##\n  annotations: {}\n  #  keel.sh/pollSchedule: \"@every 60m\"\n\n  ## Labels to be added to the controller Deployment or DaemonSet\n  ##\n  labels: {}\n  #  keel.sh/policy: patch\n  #  keel.sh/trigger: poll\n\n\n  # The update strategy to apply to the Deployment or DaemonSet\n  ##\n  updateStrategy: {}\n  #  rollingUpdate:\n  #    maxUnavailable: 1\n  #  type: RollingUpdate\n\n  # minReadySeconds to avoid killing pods before we are ready\n  ##\n  minReadySeconds: 0\n\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  ## Affinity and anti-affinity\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity\n  ##\n  affinity: {}\n    # # An example of preferred pod anti-affinity, weight is in the range 1-100\n    # podAntiAffinity:\n    #   preferredDuringSchedulingIgnoredDuringExecution:\n    #   - weight: 100\n    #     podAffinityTerm:\n    #       labelSelector:\n    #         matchExpressions:\n    #         - key: app.kubernetes.io/name\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/instance\n    #           operator: In\n    #           values:\n    #           - ingress-nginx\n    #         - key: app.kubernetes.io/component\n    #           operator: In\n    #           values:\n    #           - controller\n    #       topologyKey: kubernetes.io/hostname\n\n    # # An example of required pod anti-affinity\n    # podAntiAffinity:\n    #   requiredDuringSchedulingIgnoredDuringExecution:\n    #   - labelSelector:\n    #       matchExpressions:\n    #       - key: app.kubernetes.io/name\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/instance\n    #         operator: In\n    #         values:\n    #         - ingress-nginx\n    #       - key: app.kubernetes.io/component\n    #         operator: In\n    #         values:\n    #         - controller\n    #     topologyKey: \"kubernetes.io/hostname\"\n\n  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n  ##\n  topologySpreadConstraints: []\n    # - maxSkew: 1\n    #   topologyKey: failure-domain.beta.kubernetes.io/zone\n    #   whenUnsatisfiable: DoNotSchedule\n    #   labelSelector:\n    #     matchLabels:\n    #       app.kubernetes.io/instance: ingress-nginx-internal\n\n  ## terminationGracePeriodSeconds\n  ## wait up to five minutes for the drain of connections\n  ##\n  terminationGracePeriodSeconds: 300\n\n  ## Node labels for controller pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n\n  ## Liveness and readiness probe values\n  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\n  ##\n  livenessProbe:\n    failureThreshold: 5\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n    port: 10254\n\n  # Path of the health check endpoint. All requests received on the port defined by\n  # the healthz-port parameter are forwarded internally to this path.\n  healthCheckPath: \"/healthz\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  # Define requests resources to avoid probe issues due to CPU utilization in busy nodes\n  # ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903\n  # Ideally, there should be no limits.\n  # https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/\n  resources:\n  #  limits:\n  #    cpu: 100m\n  #    memory: 90Mi\n    requests:\n      cpu: 100m\n      memory: 90Mi\n\n  # Mutually exclusive with keda autoscaling\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  autoscalingTemplate: []\n  # Custom or additional autoscaling metrics\n  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics\n  # - type: Pods\n  #   pods:\n  #     metric:\n  #       name: nginx_ingress_controller_nginx_process_requests_total\n  #     target:\n  #       type: AverageValue\n  #       averageValue: 10000m\n\n  # Mutually exclusive with hpa autoscaling\n  keda:\n    apiVersion: \"keda.sh/v1alpha1\"\n  # apiVersion changes with keda 1.x vs 2.x\n  # 2.x = keda.sh/v1alpha1\n  # 1.x = keda.k8s.io/v1alpha1\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 11\n    pollingInterval: 30\n    cooldownPeriod: 300\n    restoreToOriginalReplicaCount: false\n    triggers: []\n #     - type: prometheus\n #       metadata:\n #         serverAddress: http://\u003cprometheus-host\u003e:9090\n #         metricName: http_requests_total\n #         threshold: '100'\n #         query: sum(rate(http_requests_total{deployment=\"my-deployment\"}[2m]))\n\n    behavior: {}\n #     scaleDown:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 1\n #         periodSeconds: 180\n #     scaleUp:\n #       stabilizationWindowSeconds: 300\n #       policies:\n #       - type: Pods\n #         value: 2\n #         periodSeconds: 60\n\n  ## Enable mimalloc as a drop-in replacement for malloc.\n  ## ref: https://github.com/microsoft/mimalloc\n  ##\n  enableMimalloc: true\n\n  ## Override NGINX template\n  customTemplate:\n    configMapName: \"\"\n    configMapKey: \"\"\n\n  service:\n    enabled: true\n\n    annotations: {}\n    labels: {}\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the controller services are available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    # loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n    enableHttp: true\n    enableHttps: true\n\n    ## Set external traffic policy to: \"Local\" to preserve source IP on\n    ## providers supporting it\n    ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n    # externalTrafficPolicy: \"\"\n\n    # Must be either \"None\" or \"ClientIP\" if set. Kubernetes will default to \"None\".\n    # Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n    # sessionAffinity: \"\"\n\n    # specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,\n    # the service controller allocates a port from your cluster’s NodePort range.\n    # Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip\n    # healthCheckNodePort: 0\n\n    ports:\n      http: 80\n      https: 443\n\n    targetPorts:\n      http: http\n      https: https\n\n    type: LoadBalancer\n\n    # type: NodePort\n    # nodePorts:\n    #   http: 32080\n    #   https: 32443\n    #   tcp:\n    #     8080: 32808\n    nodePorts:\n      http: \"\"\n      https: \"\"\n      tcp: {}\n      udp: {}\n\n    ## Enables an additional internal load balancer (besides the external one).\n    ## Annotations are mandatory for the load balancer to come up. Varies with the cloud service.\n    internal:\n      enabled: false\n      annotations: {}\n\n      # loadBalancerIP: \"\"\n\n      ## Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.\n      loadBalancerSourceRanges: []\n\n      ## Set external traffic policy to: \"Local\" to preserve source IP on\n      ## providers supporting it\n      ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer\n      # externalTrafficPolicy: \"\"\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  #  - name: my-sidecar\n  #    image: nginx:latest\n  #  - name: lemonldap-ng-controller\n  #    image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #    args:\n  #      - /lemonldap-ng-controller\n  #      - --alsologtostderr\n  #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #    env:\n  #      - name: POD_NAME\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.name\n  #      - name: POD_NAMESPACE\n  #        valueFrom:\n  #          fieldRef:\n  #            fieldPath: metadata.namespace\n  #    volumeMounts:\n  #    - name: copy-portal-skins\n  #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n  extraVolumeMounts: []\n  ## Additional volumeMounts to the controller main container.\n  #  - name: copy-portal-skins\n  #   mountPath: /var/lib/lemonldap-ng/portal/skins\n\n  extraVolumes: []\n  ## Additional volumes to the controller pod.\n  #  - name: copy-portal-skins\n  #    emptyDir: {}\n\n  extraInitContainers: []\n  ## Containers, which are run before the app containers are started.\n  # - name: init-myservice\n  #   image: busybox\n  #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']\n\n  admissionWebhooks:\n    annotations: {}\n    enabled: true\n    failurePolicy: Fail\n    # timeoutSeconds: 10\n    port: 8443\n    certificate: \"/usr/local/certificates/cert\"\n    key: \"/usr/local/certificates/key\"\n    namespaceSelector: {}\n    objectSelector: {}\n\n    service:\n      annotations: {}\n      # clusterIP: \"\"\n      externalIPs: []\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 443\n      type: ClusterIP\n\n    patch:\n      enabled: true\n      image:\n        repository: docker.io/jettech/kube-webhook-certgen\n        tag: v1.5.0\n        pullPolicy: IfNotPresent\n      ## Provide a priority class name to the webhook patching job\n      ##\n      priorityClassName: \"\"\n      podAnnotations: {}\n      nodeSelector: {}\n      tolerations: []\n      runAsUser: 2000\n\n  metrics:\n    port: 10254\n    # if this port is changed, change healthz-port: in extraArgs: accordingly\n    enabled: false\n\n    service:\n      annotations: {}\n      # prometheus.io/scrape: \"true\"\n      # prometheus.io/port: \"10254\"\n\n      # clusterIP: \"\"\n\n      ## List of IP addresses at which the stats-exporter service is available\n      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n      ##\n      externalIPs: []\n\n      # loadBalancerIP: \"\"\n      loadBalancerSourceRanges: []\n      servicePort: 9913\n      type: ClusterIP\n      # externalTrafficPolicy: \"\"\n      # nodePort: \"\"\n\n    serviceMonitor:\n      enabled: false\n      additionalLabels: {}\n      namespace: \"\"\n      namespaceSelector: {}\n      # Default: scrape .Release.Namespace only\n      # To scrape all, use the following:\n      # namespaceSelector:\n      #   any: true\n      scrapeInterval: 30s\n      # honorLabels: true\n      targetLabels: []\n      metricRelabelings: []\n\n    prometheusRule:\n      enabled: false\n      additionalLabels: {}\n      # namespace: \"\"\n      rules: []\n        # # These are just examples rules, please adapt them to your needs\n        # - alert: NGINXConfigFailed\n        #   expr: count(nginx_ingress_controller_config_last_reload_successful == 0) \u003e 0\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: bad ingress config - nginx config test failed\n        #     summary: uninstall the latest ingress changes to allow config reloads to resume\n        # - alert: NGINXCertificateExpiry\n        #   expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) \u003c 604800\n        #   for: 1s\n        #   labels:\n        #     severity: critical\n        #   annotations:\n        #     description: ssl certificate(s) will expire in less then a week\n        #     summary: renew expiring certificates to avoid downtime\n        # - alert: NGINXTooMany500s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"5.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 5XXs\n        #     summary: More than 5% of all requests returned 5XX, this requires your attention\n        # - alert: NGINXTooMany400s\n        #   expr: 100 * ( sum( nginx_ingress_controller_requests{status=~\"4.+\"} ) / sum(nginx_ingress_controller_requests) ) \u003e 5\n        #   for: 1m\n        #   labels:\n        #     severity: warning\n        #   annotations:\n        #     description: Too many 4XXs\n        #     summary: More than 5% of all requests returned 4XX, this requires your attention\n\n  ## Improve connection draining when ingress controller pod is deleted using a lifecycle hook:\n  ## With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds\n  ## to 300, allowing the draining of connections up to five minutes.\n  ## If the active connections end before that, the pod will terminate gracefully at that time.\n  ## To effectively take advantage of this feature, the Configmap feature\n  ## worker-shutdown-timeout new value is 240s instead of 10s.\n  ##\n  lifecycle:\n    preStop:\n      exec:\n        command:\n          - /wait-shutdown\n\n  priorityClassName: \"\"\n\n## Rollback limit\n##\nrevisionHistoryLimit: 10\n\n## Default 404 backend\n##\ndefaultBackend:\n  ##\n  enabled: false\n\n  name: defaultbackend\n  image:\n    repository: k8s.gcr.io/defaultbackend-amd64\n    tag: \"1.5\"\n    pullPolicy: IfNotPresent\n    # nobody user -\u003e uid 65534\n    runAsUser: 65534\n    runAsNonRoot: true\n    readOnlyRootFilesystem: true\n    allowPrivilegeEscalation: false\n\n  extraArgs: {}\n\n  serviceAccount:\n    create: true\n    name:\n  ## Additional environment variables to set for defaultBackend pods\n  extraEnvs: []\n\n  port: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 5\n  readinessProbe:\n    failureThreshold: 6\n    initialDelaySeconds: 0\n    periodSeconds: 5\n    successThreshold: 1\n    timeoutSeconds: 5\n\n  ## Node tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  tolerations: []\n  #  - key: \"key\"\n  #    operator: \"Equal|Exists\"\n  #    value: \"value\"\n  #    effect: \"NoSchedule|PreferNoSchedule|NoExecute(1.6 only)\"\n\n  affinity: {}\n\n  ## Security Context policies for controller pods\n  ## See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for\n  ## notes on enabling and using sysctls\n  ##\n  podSecurityContext: {}\n\n  # labels to add to the pod container metadata\n  podLabels: {}\n  #  key: value\n\n  ## Node labels for default backend pod assignment\n  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/\n  ##\n  nodeSelector: {}\n\n  ## Annotations to be added to default backend pods\n  ##\n  podAnnotations: {}\n\n  replicaCount: 1\n\n  minAvailable: 1\n\n  resources: {}\n  # limits:\n  #   cpu: 10m\n  #   memory: 20Mi\n  # requests:\n  #   cpu: 10m\n  #   memory: 20Mi\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 2\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  service:\n    annotations: {}\n\n    # clusterIP: \"\"\n\n    ## List of IP addresses at which the default backend service is available\n    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips\n    ##\n    externalIPs: []\n\n    loadBalancerIP: 35.222.143.211\n    loadBalancerSourceRanges: []\n    servicePort: 80\n    type: ClusterIP\n\n  priorityClassName: \"\"\n\n## Enable RBAC as per https://github.com/kubernetes/ingress/tree/master/examples/rbac/nginx and https://github.com/kubernetes/ingress/issues/266\nrbac:\n  create: true\n  scope: false\n\n# If true, create \u0026 use Pod Security Policy resources\n# https://kubernetes.io/docs/concepts/policy/pod-security-policy/\npodSecurityPolicy:\n  enabled: false\n\nserviceAccount:\n  create: true\n  name:\n\n## Optional array of imagePullSecrets containing private registry credentials\n## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/\nimagePullSecrets: []\n# - name: secretName\n\n# TCP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/tcp\n##\ntcp: {}\n#  8080: \"default/example-tcp-svc:9000\"\n\n# UDP service key:value pairs\n# Ref: https://github.com/kubernetes/contrib/tree/master/ingress/controllers/nginx/examples/udp\n##\nudp: {}\n#  53: \"kube-system/kube-dns:53\"",
            "content_base64": null,
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./values/ingress-nginx.yaml",
            "id": "4fbfc71b90207cc0ccd7b9d236d80aa115e5cbc8",
            "sensitive_content": null,
            "source": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "data.google_compute_address.nginx",
            "data.template_file.ingress_nginx",
            "google_compute_address.nginx",
            "helm_release.helm_operator",
            "kubernetes_namespace.flux",
            "kubernetes_secret.flux_ssh",
            "module.gke_auth.data.google_client_config.provider",
            "module.gke_auth.data.google_container_cluster.gke_cluster",
            "time_sleep.nginx_helm",
            "time_sleep.sleep_for_cluster_fix_helm_6361",
            "tls_private_key.flux_deploy_key"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_id",
      "name": "suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "b64_std": "iKY=",
            "b64_url": "iKY",
            "byte_length": 2,
            "dec": "34982",
            "hex": "88a6",
            "id": "iKY",
            "keepers": null,
            "prefix": null
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "autogenerated_gitlab_db_password",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "BsIK4nXq6m1CasXa",
            "keepers": null,
            "length": 16,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "BsIK4nXq6m1CasXa",
            "special": false,
            "upper": true
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "nginx_helm",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "120s",
            "destroy_duration": "10s",
            "id": "2021-03-27T15:30:43Z",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_address.nginx",
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "time_sleep",
      "name": "sleep_for_cluster_fix_helm_6361",
      "provider": "provider[\"registry.terraform.io/hashicorp/time\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_duration": "300s",
            "destroy_duration": "60s",
            "id": "2021-03-27T15:33:43Z",
            "triggers": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_global_address.gitlab_sql",
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "google_service_networking_connection.private_vpc_connection",
            "google_sql_database.gitlabhq_production",
            "google_sql_database_instance.gitlab_db",
            "google_sql_user.gitlab",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_command",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.run_destroy_command",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities",
            "random_id.suffix",
            "random_string.autogenerated_gitlab_db_password"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tls_private_key",
      "name": "flux_deploy_key",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "algorithm": "RSA",
            "ecdsa_curve": "P224",
            "id": "62f672ce002b61aa4f10175c6585b4419ba17162",
            "private_key_pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIJKQIBAAKCAgEAxPcx506K34YJaaknUmaHH/nzzT4Qc7kQ8GcSy47ezG8Ws/66\niqGtILgDOWRmGDs/d+uh/uFDEWsUhEilNpwhpJE4mCQyV/TcnTLjPzfaxdC3c/X7\nqGPAyDGqZ2uszUi9UpRBZkUFTCj0C2vpGKfsAC8z4Me94qgIA9grDLAiixQI40Eb\npSpRTzfjwP1BNPoGpiWlVuwPdlRS3HYTCrWOQTKwBIx+kBGTGxY6VsZ8kYG2g6rf\nyCqVmZtIc4rVq6UZ8w1HSyc/6OFpz90l7zq/MJahXCXtebvoLA+hHU0rm0cYBx5B\nSJTARYemBhEoe4dHcMrvic/D99v4N3yJLT17ELCOhZaHLQ7+e8tcnUAAk5RYS8Qd\nFh7+0PTCEQ/1G4XyC6YSLACNyzNTKkNU5f8q1RDSiCSRcLC5tmGkp95ZeTV+X93p\nznbVgvByrV/MhLoJZ1r+YM3HvkxBCnFdy4B1VlDvHFEDSco4yhfNqzP3p72VRB6c\nFdyk5KMHL+AgKtswOqcTvrY45R9BFFsQMr/+uxK4Gf6GGii4c33CkO40AIW6PWHo\nh/k0jCvHoiwpIZC8seWD2DiUxidSY3wJzlh3f1MnKuW9rZ26IcmS3Nfy7B25FbnP\n+do8vmpELviOgINYZwIS6aY3ak5qSwAwH69LvK7VEWbZyKb3zGsQdd+c+3UCAwEA\nAQKCAgB2wLc0x3URSUX5j4PmuWw0ykXE8+uFagodd3eshQotZbjhcu5TUSEJvggr\nnS205Fvi2I2GF5iRMudezlHV+BKMnwXpLMGxqC8vFBRQ9EMRy0IgRymgn+wGh3M/\nAXthFb8Xv80idPC5t2NUU45pUC0I+2yi1KrWsgqLDtT9xGA/TCgDpCifz0DQq1jE\n7axX3XsOx1nFa3PzGuoOg539cfM/uejIBVD1WbNAvIkV8nv+Wp+JCQf9LjeeMjJf\nf1BOOa/Ii7P1SsfMh8N9EM+jSd8l01ucLD3ejH1xu0afXPyylQ2WlRY1RYIbKare\ns4+d0rUu+xurEjoMAXLJOWuXfB7qpPT31mnf97r7kJ6k7ty7REKa5z4DR2ZrbN9U\nnykpyVORNmvzWFVi6eeHek2D7+YMgdNuMYoa96W/Sx/JSKWtPCLU5iRyuNZMwEel\nbdIM2KPi9UEMrk61LKdZlPZxYvtzLdeKMfGzWuYt4ae48MAd/98EES2mBebpQXFM\nXVW+nfX6cyQ92qUTrQ4LUVlb4UaGXDXfNopr6eVJsjxbcXs/MQMrCTkyheH/saLw\nYxuBp/8Zmfx+wJR39Hbs2CFZ2BD4FnYnh55HUK+x7kPLmAWzRcILOGv3Mgj7Y5fC\ngMMGGYdXrNsVSJvIliTKYrjbObFy5JWZ0pV+kLYbL8bv4zjt4QKCAQEA7Ieeadck\n2xEUCsrHtCoMzvW8Va24jfRA3cwO/zJVbO3dfYe8Foz5iGoLUqu75mBcOvWByiPI\nEv7UEiOCv0HPFXftFfAnq9JPFgq/VScGOXFmAUMa4WdC+hmb6okgjuBiEQeAAvK3\nynj+bqBiEr1zDIztchoPD00v+mM3LrTUpzYfFiOVF+piWA2gKMe68hsrFxP6hdN6\nYnU2jOJJQo5nMeryYP13UlOVG9vlNL5T03GfRzdZ59fpHRO4vtc801wTKhGImTHZ\n0QsM2SGXViC5U+19HfH8eoIQNiTicDAII/V1semEUAoDszKg0GZAO1fr+MoqQVeV\nGGXUEGZySlGqbQKCAQEA1S3XqWHMDjN/lYkcKapq2oUax7br3bOKJzSBsjxAz58M\nR8Y+xsKEOUL/+Nz0fo+uFgzQGxNv3Nyw8uUUP2V6BvBDswUvUGtDNE+SNqDjy45f\nsEbAOrXjwhRr0q3HfKOdYQAr+JHx9C5R+BecJaiWj8Nvor7/fYlC+l/d4RwPu/IE\n9egxjkWbVrXC3e4eVvq6DvxMOZOOEM0FQ7b3WlUbgX8Y2sGQH5IJHwaHNf2syNpo\nWKnFhI3tTWzSC8qkEPfJpDbMpyXqPHN1iiLgwv8o7/kpiCuOsFGhETM73ZoNBuUk\nEUDa3zssc83Q3mY4tyP4EEihjJeOCHxEPE2j6j1wKQKCAQBNbROJF/kjkNKbucdn\njYBF2yD8dvJ73WHCeQLLvOFD2BVx+xWx2BHy+qucM0U943stfaIv1kivFyW6jk9F\nZjhwkaJVVRjXYO+sinYZXL3n3dwDO8E32cKN9gYY3yx+OKtBYdAgpu1M5RB8jBmu\ngr9/cz5i5G7blmvHLeUpb95QoiHI8Hrkqj/pDQTJdKAYkpYnZs3SMujUBASIV6ad\nl9nl+D/BShdeJqgfx3qfKlJsW7xE5rSSdRYFA6itJ+3sTi6jzbuGUlA34sMg7KMK\neYnRFGOpgsYgICVIZAiPqtlvU/Fj/MnoHW8aoM8NiPsrsds3xI3Sd+YBZ4vklnSB\nKXx9AoIBAQCZ9+A5oD7nSt6tPDgxB7rhVR2AfWdh2ti/dDbwaoBM9IzEEjUpDTi+\nuttx/PRBrLiJiHuN8r3qgSL0a+vx1fMKq+HZnLcNmEsTrxzlg9LDJHOMN62DOffk\nJyexJH5eUTXL53nasF5WhFYDn9nRgTAtaXRp0RVqsAbGGxOAEOp0Tlqy2R9hqHiH\nagPykpcrLy/Ovv623xHOpKVWwQFqJuoU350t8nuLscgQtoBVyIBRGR4gW44jLPbl\n4uDaT2OsNatXhZTObJ3/R0zvlj1L2UrR9929UehfBLYWXDCy3x7lif5Az9zFOlHi\n2hYvaxkvfTUfXbYAez3Edyw5ecIX3oPxAoIBAQCdHVVp0jrhPeJjT7AJYEHIQJiz\n/9h5RYJOqYgzeaQ+PmbenMPCDVc+07FwQfUzlw/RyWc/sI2Yt1i9W9jqq3ghy9IZ\nPTGOmjkDK1ULHZ+2d7cHQJ+WsXuzyb3nF7NPtaXb/R0yaGBQsZq8UEVz/SpiIsBR\nTlcSFdtC8IW7wbyYvbbalmH83kiTmO/YY8AbAUI+S+8iW/fqnivXVo1nGcspL/uf\n0M+y4s8YJai1ZSBxR/Y1T2K2eX7BtPeoTWeADKwdv5hxUR4YW19wb60xlNXQuvwQ\nlxub4yJyz0IwFjlGSCeobsz6Lax5sU69edp65XaPYdU4c4KTTc6hX4FGVswe\n-----END RSA PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "6e:20:00:0a:8c:0d:0f:20:4a:e3:18:b2:45:e0:9b:df",
            "public_key_openssh": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDE9zHnTorfhglpqSdSZocf+fPNPhBzuRDwZxLLjt7Mbxaz/rqKoa0guAM5ZGYYOz9366H+4UMRaxSESKU2nCGkkTiYJDJX9NydMuM/N9rF0Ldz9fuoY8DIMapna6zNSL1SlEFmRQVMKPQLa+kYp+wALzPgx73iqAgD2CsMsCKLFAjjQRulKlFPN+PA/UE0+gamJaVW7A92VFLcdhMKtY5BMrAEjH6QEZMbFjpWxnyRgbaDqt/IKpWZm0hzitWrpRnzDUdLJz/o4WnP3SXvOr8wlqFcJe15u+gsD6EdTSubRxgHHkFIlMBFh6YGESh7h0dwyu+Jz8P32/g3fIktPXsQsI6FloctDv57y1ydQACTlFhLxB0WHv7Q9MIRD/UbhfILphIsAI3LM1MqQ1Tl/yrVENKIJJFwsLm2YaSn3ll5NX5f3enOdtWC8HKtX8yEuglnWv5gzce+TEEKcV3LgHVWUO8cUQNJyjjKF82rM/envZVEHpwV3KTkowcv4CAq2zA6pxO+tjjlH0EUWxAyv/67ErgZ/oYaKLhzfcKQ7jQAhbo9YeiH+TSMK8eiLCkhkLyx5YPYOJTGJ1JjfAnOWHd/Uycq5b2tnbohyZLc1/LsHbkVuc/52jy+akQu+I6Ag1hnAhLppjdqTmpLADAfr0u8rtURZtnIpvfMaxB135z7dQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxPcx506K34YJaaknUmaH\nH/nzzT4Qc7kQ8GcSy47ezG8Ws/66iqGtILgDOWRmGDs/d+uh/uFDEWsUhEilNpwh\npJE4mCQyV/TcnTLjPzfaxdC3c/X7qGPAyDGqZ2uszUi9UpRBZkUFTCj0C2vpGKfs\nAC8z4Me94qgIA9grDLAiixQI40EbpSpRTzfjwP1BNPoGpiWlVuwPdlRS3HYTCrWO\nQTKwBIx+kBGTGxY6VsZ8kYG2g6rfyCqVmZtIc4rVq6UZ8w1HSyc/6OFpz90l7zq/\nMJahXCXtebvoLA+hHU0rm0cYBx5BSJTARYemBhEoe4dHcMrvic/D99v4N3yJLT17\nELCOhZaHLQ7+e8tcnUAAk5RYS8QdFh7+0PTCEQ/1G4XyC6YSLACNyzNTKkNU5f8q\n1RDSiCSRcLC5tmGkp95ZeTV+X93pznbVgvByrV/MhLoJZ1r+YM3HvkxBCnFdy4B1\nVlDvHFEDSco4yhfNqzP3p72VRB6cFdyk5KMHL+AgKtswOqcTvrY45R9BFFsQMr/+\nuxK4Gf6GGii4c33CkO40AIW6PWHoh/k0jCvHoiwpIZC8seWD2DiUxidSY3wJzlh3\nf1MnKuW9rZ26IcmS3Nfy7B25FbnP+do8vmpELviOgINYZwIS6aY3ak5qSwAwH69L\nvK7VEWbZyKb3zGsQdd+c+3UCAwEAAQ==\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 4096
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_client_config",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_token": "ya29.a0AfH6SMDGu2Niz5gj7eloeHTiCaxgrp1ZhvQ-nWKX8TPu4pwG9RLI8Ar4KpS0WK-aBMF7-_Uxz4hAjQGvEEr8XbaioE9nbQIJMzcJNdp3GoPV_laQOkis3QZf91B1LV6BZTsVecoDHJXfnBjQS6sLMSEUP1nINw",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/zones/",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "zone": ""
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_compute_zones",
      "name": "available",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "projects/lrc-portfolio-1138/regions/us-central1",
            "names": [
              "us-central1-a",
              "us-central1-b",
              "us-central1-c",
              "us-central1-f"
            ],
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "status": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_container_engine_versions",
      "name": "region",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "default_cluster_version": "1.17.17-gke.1101",
            "id": "2021-03-27 16:30:17.770678 +0000 UTC",
            "latest_master_version": "1.18.16-gke.1200",
            "latest_node_version": "1.18.16-gke.1200",
            "location": "us-central1",
            "project": "lrc-portfolio-1138",
            "release_channel_default_version": {
              "RAPID": "1.19.8-gke.1000",
              "REGULAR": "1.18.15-gke.1501",
              "STABLE": "1.17.17-gke.1101"
            },
            "valid_master_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.15-gke.800",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.15.12-gke.6002"
            ],
            "valid_node_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.2500",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.15-gke.800",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.18.12-gke.1206",
              "1.18.12-gke.1205",
              "1.18.12-gke.1201",
              "1.18.12-gke.1200",
              "1.18.12-gke.300",
              "1.18.10-gke.2701",
              "1.18.10-gke.2101",
              "1.18.10-gke.1500",
              "1.18.10-gke.601",
              "1.18.9-gke.2501",
              "1.18.9-gke.1501",
              "1.18.9-gke.801",
              "1.18.6-gke.4801",
              "1.18.6-gke.3504",
              "1.18.6-gke.3503",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.2500",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.17-gke.600",
              "1.17.16-gke.1600",
              "1.17.16-gke.1300",
              "1.17.15-gke.800",
              "1.17.15-gke.300",
              "1.17.14-gke.1600",
              "1.17.14-gke.1200",
              "1.17.14-gke.400",
              "1.17.13-gke.2600",
              "1.17.13-gke.2001",
              "1.17.13-gke.1401",
              "1.17.13-gke.1400",
              "1.17.13-gke.600",
              "1.17.12-gke.2502",
              "1.17.12-gke.1504",
              "1.17.12-gke.1501",
              "1.17.12-gke.500",
              "1.17.9-gke.6300",
              "1.17.9-gke.1504",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.16.15-gke.7800",
              "1.16.15-gke.7300",
              "1.16.15-gke.6900",
              "1.16.15-gke.6000",
              "1.16.15-gke.5500",
              "1.16.15-gke.4901",
              "1.16.15-gke.4301",
              "1.16.15-gke.4300",
              "1.16.15-gke.3500",
              "1.16.15-gke.2601",
              "1.16.15-gke.1600",
              "1.16.15-gke.500",
              "1.16.13-gke.404",
              "1.16.13-gke.403",
              "1.16.13-gke.401",
              "1.16.13-gke.400",
              "1.16.13-gke.1",
              "1.16.11-gke.5",
              "1.16.10-gke.8",
              "1.16.9-gke.6",
              "1.16.9-gke.2",
              "1.16.8-gke.15",
              "1.16.8-gke.12",
              "1.16.8-gke.9",
              "1.15.12-gke.6002",
              "1.15.12-gke.6001",
              "1.15.12-gke.5000",
              "1.15.12-gke.4002",
              "1.15.12-gke.4000",
              "1.15.12-gke.20",
              "1.15.12-gke.17",
              "1.15.12-gke.16",
              "1.15.12-gke.13",
              "1.15.12-gke.9",
              "1.15.12-gke.6",
              "1.15.12-gke.3",
              "1.15.12-gke.2",
              "1.15.11-gke.17",
              "1.15.11-gke.15",
              "1.15.11-gke.13",
              "1.15.11-gke.12",
              "1.15.11-gke.11",
              "1.15.11-gke.9",
              "1.15.11-gke.5",
              "1.15.11-gke.3",
              "1.15.11-gke.1",
              "1.15.9-gke.26",
              "1.15.9-gke.24",
              "1.15.9-gke.22",
              "1.15.9-gke.12",
              "1.15.9-gke.9",
              "1.15.9-gke.8",
              "1.15.8-gke.3",
              "1.15.8-gke.2",
              "1.15.7-gke.23",
              "1.15.7-gke.2",
              "1.15.4-gke.22",
              "1.14.10-gke.1504",
              "1.14.10-gke.902",
              "1.14.10-gke.50",
              "1.14.10-gke.46",
              "1.14.10-gke.45",
              "1.14.10-gke.42",
              "1.14.10-gke.41",
              "1.14.10-gke.40",
              "1.14.10-gke.37",
              "1.14.10-gke.36",
              "1.14.10-gke.34",
              "1.14.10-gke.32",
              "1.14.10-gke.31",
              "1.14.10-gke.27",
              "1.14.10-gke.24",
              "1.14.10-gke.22",
              "1.14.10-gke.21",
              "1.14.10-gke.17",
              "1.14.10-gke.0",
              "1.14.9-gke.23",
              "1.14.9-gke.2",
              "1.14.9-gke.0",
              "1.14.8-gke.33",
              "1.14.8-gke.21",
              "1.14.8-gke.18",
              "1.14.8-gke.17",
              "1.14.8-gke.14",
              "1.14.8-gke.12",
              "1.14.8-gke.7",
              "1.14.8-gke.2",
              "1.14.7-gke.40",
              "1.14.7-gke.25",
              "1.14.7-gke.23",
              "1.14.7-gke.17",
              "1.14.7-gke.14",
              "1.14.7-gke.10",
              "1.14.6-gke.13",
              "1.14.6-gke.2",
              "1.14.6-gke.1",
              "1.14.3-gke.11",
              "1.14.3-gke.10",
              "1.14.3-gke.9",
              "1.14.2-gke.9",
              "1.14.1-gke.5",
              "1.13.12-gke.30",
              "1.13.12-gke.25",
              "1.13.12-gke.17",
              "1.13.12-gke.16",
              "1.13.12-gke.14",
              "1.13.12-gke.13",
              "1.13.12-gke.10",
              "1.13.12-gke.8",
              "1.13.12-gke.4",
              "1.13.12-gke.2",
              "1.13.11-gke.23",
              "1.13.11-gke.15",
              "1.13.11-gke.14",
              "1.13.11-gke.12",
              "1.13.11-gke.11",
              "1.13.11-gke.9",
              "1.13.11-gke.5",
              "1.13.10-gke.7",
              "1.13.10-gke.0",
              "1.13.9-gke.11",
              "1.13.9-gke.3",
              "1.13.7-gke.24",
              "1.13.7-gke.19",
              "1.13.7-gke.15",
              "1.13.7-gke.8",
              "1.13.7-gke.0",
              "1.13.6-gke.13",
              "1.13.6-gke.6",
              "1.13.6-gke.5",
              "1.13.6-gke.0",
              "1.13.5-gke.10",
              "1.12.10-gke.22",
              "1.12.10-gke.20",
              "1.12.10-gke.19",
              "1.12.10-gke.18",
              "1.12.10-gke.17",
              "1.12.10-gke.15",
              "1.12.10-gke.13",
              "1.12.10-gke.11",
              "1.12.10-gke.5",
              "1.12.9-gke.16",
              "1.12.9-gke.15",
              "1.12.9-gke.13",
              "1.12.9-gke.10",
              "1.12.9-gke.7",
              "1.12.9-gke.3",
              "1.12.8-gke.12",
              "1.12.8-gke.10",
              "1.12.8-gke.7",
              "1.12.8-gke.6",
              "1.12.7-gke.26",
              "1.12.7-gke.25",
              "1.12.7-gke.24",
              "1.12.7-gke.22",
              "1.12.7-gke.21",
              "1.12.7-gke.17",
              "1.12.7-gke.10",
              "1.12.7-gke.7",
              "1.12.6-gke.11",
              "1.12.6-gke.10",
              "1.12.6-gke.7",
              "1.12.5-gke.10",
              "1.12.5-gke.5",
              "1.11.10-gke.6",
              "1.11.10-gke.5"
            ],
            "version_prefix": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "data",
      "type": "google_container_engine_versions",
      "name": "zone",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "default_cluster_version": "1.17.17-gke.1101",
            "id": "2021-03-27 16:30:18.07805 +0000 UTC",
            "latest_master_version": "1.18.16-gke.1200",
            "latest_node_version": "1.18.16-gke.1200",
            "location": "us-central1-a",
            "project": "lrc-portfolio-1138",
            "release_channel_default_version": {
              "RAPID": "1.19.8-gke.1000",
              "REGULAR": "1.18.15-gke.1501",
              "STABLE": "1.17.17-gke.1101"
            },
            "valid_master_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.15-gke.800",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.15.12-gke.6002"
            ],
            "valid_node_versions": [
              "1.18.16-gke.1200",
              "1.18.16-gke.500",
              "1.18.16-gke.302",
              "1.18.16-gke.300",
              "1.18.15-gke.2500",
              "1.18.15-gke.1502",
              "1.18.15-gke.1501",
              "1.18.15-gke.1500",
              "1.18.15-gke.1102",
              "1.18.15-gke.1100",
              "1.18.15-gke.800",
              "1.18.14-gke.1600",
              "1.18.14-gke.1200",
              "1.18.12-gke.1210",
              "1.18.12-gke.1206",
              "1.18.12-gke.1205",
              "1.18.12-gke.1201",
              "1.18.12-gke.1200",
              "1.18.12-gke.300",
              "1.18.10-gke.2701",
              "1.18.10-gke.2101",
              "1.18.10-gke.1500",
              "1.18.10-gke.601",
              "1.18.9-gke.2501",
              "1.18.9-gke.1501",
              "1.18.9-gke.801",
              "1.18.6-gke.4801",
              "1.18.6-gke.3504",
              "1.18.6-gke.3503",
              "1.17.17-gke.3700",
              "1.17.17-gke.3000",
              "1.17.17-gke.2800",
              "1.17.17-gke.2500",
              "1.17.17-gke.1500",
              "1.17.17-gke.1101",
              "1.17.17-gke.1100",
              "1.17.17-gke.600",
              "1.17.16-gke.1600",
              "1.17.16-gke.1300",
              "1.17.15-gke.800",
              "1.17.15-gke.300",
              "1.17.14-gke.1600",
              "1.17.14-gke.1200",
              "1.17.14-gke.400",
              "1.17.13-gke.2600",
              "1.17.13-gke.2001",
              "1.17.13-gke.1401",
              "1.17.13-gke.1400",
              "1.17.13-gke.600",
              "1.17.12-gke.2502",
              "1.17.12-gke.1504",
              "1.17.12-gke.1501",
              "1.17.12-gke.500",
              "1.17.9-gke.6300",
              "1.17.9-gke.1504",
              "1.16.15-gke.12500",
              "1.16.15-gke.11800",
              "1.16.15-gke.10600",
              "1.16.15-gke.7801",
              "1.16.15-gke.7800",
              "1.16.15-gke.7300",
              "1.16.15-gke.6900",
              "1.16.15-gke.6000",
              "1.16.15-gke.5500",
              "1.16.15-gke.4901",
              "1.16.15-gke.4301",
              "1.16.15-gke.4300",
              "1.16.15-gke.3500",
              "1.16.15-gke.2601",
              "1.16.15-gke.1600",
              "1.16.15-gke.500",
              "1.16.13-gke.404",
              "1.16.13-gke.403",
              "1.16.13-gke.401",
              "1.16.13-gke.400",
              "1.16.13-gke.1",
              "1.16.11-gke.5",
              "1.16.10-gke.8",
              "1.16.9-gke.6",
              "1.16.9-gke.2",
              "1.16.8-gke.15",
              "1.16.8-gke.12",
              "1.16.8-gke.9",
              "1.15.12-gke.6002",
              "1.15.12-gke.6001",
              "1.15.12-gke.5000",
              "1.15.12-gke.4002",
              "1.15.12-gke.4000",
              "1.15.12-gke.20",
              "1.15.12-gke.17",
              "1.15.12-gke.16",
              "1.15.12-gke.13",
              "1.15.12-gke.9",
              "1.15.12-gke.6",
              "1.15.12-gke.3",
              "1.15.12-gke.2",
              "1.15.11-gke.17",
              "1.15.11-gke.15",
              "1.15.11-gke.13",
              "1.15.11-gke.12",
              "1.15.11-gke.11",
              "1.15.11-gke.9",
              "1.15.11-gke.5",
              "1.15.11-gke.3",
              "1.15.11-gke.1",
              "1.15.9-gke.26",
              "1.15.9-gke.24",
              "1.15.9-gke.22",
              "1.15.9-gke.12",
              "1.15.9-gke.9",
              "1.15.9-gke.8",
              "1.15.8-gke.3",
              "1.15.8-gke.2",
              "1.15.7-gke.23",
              "1.15.7-gke.2",
              "1.15.4-gke.22",
              "1.14.10-gke.1504",
              "1.14.10-gke.902",
              "1.14.10-gke.50",
              "1.14.10-gke.46",
              "1.14.10-gke.45",
              "1.14.10-gke.42",
              "1.14.10-gke.41",
              "1.14.10-gke.40",
              "1.14.10-gke.37",
              "1.14.10-gke.36",
              "1.14.10-gke.34",
              "1.14.10-gke.32",
              "1.14.10-gke.31",
              "1.14.10-gke.27",
              "1.14.10-gke.24",
              "1.14.10-gke.22",
              "1.14.10-gke.21",
              "1.14.10-gke.17",
              "1.14.10-gke.0",
              "1.14.9-gke.23",
              "1.14.9-gke.2",
              "1.14.9-gke.0",
              "1.14.8-gke.33",
              "1.14.8-gke.21",
              "1.14.8-gke.18",
              "1.14.8-gke.17",
              "1.14.8-gke.14",
              "1.14.8-gke.12",
              "1.14.8-gke.7",
              "1.14.8-gke.2",
              "1.14.7-gke.40",
              "1.14.7-gke.25",
              "1.14.7-gke.23",
              "1.14.7-gke.17",
              "1.14.7-gke.14",
              "1.14.7-gke.10",
              "1.14.6-gke.13",
              "1.14.6-gke.2",
              "1.14.6-gke.1",
              "1.14.3-gke.11",
              "1.14.3-gke.10",
              "1.14.3-gke.9",
              "1.14.2-gke.9",
              "1.14.1-gke.5",
              "1.13.12-gke.30",
              "1.13.12-gke.25",
              "1.13.12-gke.17",
              "1.13.12-gke.16",
              "1.13.12-gke.14",
              "1.13.12-gke.13",
              "1.13.12-gke.10",
              "1.13.12-gke.8",
              "1.13.12-gke.4",
              "1.13.12-gke.2",
              "1.13.11-gke.23",
              "1.13.11-gke.15",
              "1.13.11-gke.14",
              "1.13.11-gke.12",
              "1.13.11-gke.11",
              "1.13.11-gke.9",
              "1.13.11-gke.5",
              "1.13.10-gke.7",
              "1.13.10-gke.0",
              "1.13.9-gke.11",
              "1.13.9-gke.3",
              "1.13.7-gke.24",
              "1.13.7-gke.19",
              "1.13.7-gke.15",
              "1.13.7-gke.8",
              "1.13.7-gke.0",
              "1.13.6-gke.13",
              "1.13.6-gke.6",
              "1.13.6-gke.5",
              "1.13.6-gke.0",
              "1.13.5-gke.10",
              "1.12.10-gke.22",
              "1.12.10-gke.20",
              "1.12.10-gke.19",
              "1.12.10-gke.18",
              "1.12.10-gke.17",
              "1.12.10-gke.15",
              "1.12.10-gke.13",
              "1.12.10-gke.11",
              "1.12.10-gke.5",
              "1.12.9-gke.16",
              "1.12.9-gke.15",
              "1.12.9-gke.13",
              "1.12.9-gke.10",
              "1.12.9-gke.7",
              "1.12.9-gke.3",
              "1.12.8-gke.12",
              "1.12.8-gke.10",
              "1.12.8-gke.7",
              "1.12.8-gke.6",
              "1.12.7-gke.26",
              "1.12.7-gke.25",
              "1.12.7-gke.24",
              "1.12.7-gke.22",
              "1.12.7-gke.21",
              "1.12.7-gke.17",
              "1.12.7-gke.10",
              "1.12.7-gke.7",
              "1.12.6-gke.11",
              "1.12.6-gke.10",
              "1.12.6-gke.7",
              "1.12.5-gke.10",
              "1.12.5-gke.5",
              "1.11.10-gke.6",
              "1.11.10-gke.5"
            ],
            "version_prefix": null
          }
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_container_cluster",
      "name": "primary",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "addons_config": [
              {
                "cloudrun_config": [],
                "horizontal_pod_autoscaling": [
                  {
                    "disabled": false
                  }
                ],
                "http_load_balancing": [
                  {
                    "disabled": false
                  }
                ],
                "network_policy_config": [
                  {
                    "disabled": false
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.3.0.0/16",
            "database_encryption": [
              {
                "key_name": "",
                "state": "DECRYPTED"
              }
            ],
            "datapath_provider": "",
            "default_max_pods_per_node": 110,
            "default_snat_status": [
              {
                "disabled": false
              }
            ],
            "description": "",
            "enable_binary_authorization": false,
            "enable_intranode_visibility": false,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": false,
            "enable_shielded_nodes": true,
            "enable_tpu": false,
            "endpoint": "34.123.190.90",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "initial_node_count": 0,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-a1f2aa25-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-33e54daa-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-5e71b261-grp"
            ],
            "ip_allocation_policy": [
              {
                "cluster_ipv4_cidr_block": "10.3.0.0/16",
                "cluster_secondary_range_name": "gitlab-cluster-pod-cidr",
                "services_ipv4_cidr_block": "10.2.0.0/16",
                "services_secondary_range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "label_fingerprint": "a9dc16a7",
            "location": "us-central1",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [
              {
                "daily_maintenance_window": [
                  {
                    "duration": "PT4H0M0S",
                    "start_time": "05:00"
                  }
                ],
                "maintenance_exclusion": [],
                "recurring_window": []
              }
            ],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lSQVBCbEZhaVpmT0w4VDdZR0picm9BYXN3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUxTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0VURVBNQTBHQTFVRUF4TUdZMnhwClpXNTBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXhrdVdwbGY4dEQ2N3dvRkIKOHlXMXVRWkZyejRxcTY2VWNHN2tNM3lpWFM1WjNQODdnZTNXdlZPeXM5MnFNTFZibktCK2hIYVRrMVlxTnZOQQpraVBNL010b1A3UFBjRngrTXhYRUY5Qm40MUtxdW1kSGsxUTcwOVhEQlpqdEZwSUpqV2FjQTdRNlhNeG1xV3RpCkdHdi9VZHhxbElJY3NQbVlJOEJuR3paV0UwQWZVZituTlduUzcxRFk3QTJWUzhFMXRlU3ozaVRiWHRoTk41N1YKRndzZGg5eEt0Uis0ZFVXZXI5TlQ5eDdWTFBYTlhSUXBxM2prVmxlcVRyTWlWeklmYmViL0cybnAxeU12SnFVUQpqMzN2TDV1L21zLzJFcGlVdkY2MGVqVmtQdC93dERpRzIzdk81T0xHam56M1NTeENvMXpiZjN1K3pSMklvYXlYCjQ4MnBad0lEQVFBQm96RXdMekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRHkzaWFkWUl5ajYKRDFYSHRKR1lzRW9mUG9iUE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2NkQmQvand2N2xtRmFEWkdCZk1iVQo2ZEI3dEd0dXdIOWNzVEZSQkdsWGV2Y1IyWkxpeGpIVmhsd1MrNGpIN1F3UUxVWFRHUC9tQ3dwK1FQSzlSWC9PCkZWTGVWYWNNRG04cG0zR2taMVVyNFVzMmpPWVF6Q05DZGtTeE5DejQ4am1wMkNOVC9Lc3VYRk03cExGWERnMW4KSlk1Y2ZTYVNhM3VxcURnUjgvUXRLbitodEtpZ2Q1aXVESUdJTkNubW53N0RsRW10K0xhMWpneFo0WTBCalJzNApVQ05ESzdhNkVrVEd4aEpwbEQ2SFArTE5VcHAzMkFza1E5NzJocDlPRlJMNnlVNWYvUDhJRE51Q2k1YW4zaENiCmtEUUFIWDgzWUkwS2IvREFJR1NNUXBsZGx5OUxuamx6cVlLaGcxeXFZbzN2eWR5T1JMNEcwRENVZlQybWxRclIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeGt1V3BsZjh0RDY3d29GQjh5VzF1UVpGcno0cXE2NlVjRzdrTTN5aVhTNVozUDg3CmdlM1d2Vk95czkycU1MVmJuS0IraEhhVGsxWXFOdk5Ba2lQTS9NdG9QN1BQY0Z4K014WEVGOUJuNDFLcXVtZEgKazFRNzA5WERCWmp0RnBJSmpXYWNBN1E2WE14bXFXdGlHR3YvVWR4cWxJSWNzUG1ZSThCbkd6WldFMEFmVWYrbgpOV25TNzFEWTdBMlZTOEUxdGVTejNpVGJYdGhOTjU3VkZ3c2RoOXhLdFIrNGRVV2VyOU5UOXg3VkxQWE5YUlFwCnEzamtWbGVxVHJNaVZ6SWZiZWIvRzJucDF5TXZKcVVRajMzdkw1dS9tcy8yRXBpVXZGNjBlalZrUHQvd3REaUcKMjN2TzVPTEdqbnozU1N4Q28xemJmM3UrelIySW9heVg0ODJwWndJREFRQUJBb0lCQUJxdGRySWdha1lSbm84WApkcmp3bk5jc3FkbGV3cnpnT3VZNWRRZ2NQM2ZMMFpreTJWMnNrdFJiMjFIcGc0a1VEU1F3VDNVZ3dzL3lxckZECjNxOEtrL3g2blNiYzJRNmowdktxZmZ3Nk5JL1h3bEpickx4OGU2UVBRVEtTbFdzUThLb09ZUFQ2blZONHlHTUkKcUdUaXVySFh0cHNPT2kveEZHL1M1Y3c2YmpBZWxyaExUdVdiTmNPQ1hIRXVUdGhNTEhGUVpoSHRSaTdvbVUzWQo5dFdxOEJzMXY2QTQvbzA2cGpTbjhWc3NiakluR0FxQW1MRmJqVVNOTG5FVnNndWRIMGQzWjRtZ0V2NGZVT1R5CnVoaGM0M3hKU0JnOGYxdEN4OG1keGh2UjVncnNMV2Z2Wk96cG1jbXJIZ2FIYkh6UEZuVVFRcVoxbkdUUDQyS3QKaSs2TTlta0NnWUVBNFZNKzBjMm5hclZlTTEvUWxyOE5VcUpSZ3lSNVRMU0d3Wlk2Z3RvdEl0ZHg0NjZoWm5NRgo0Vmd6Q1ZjeVVRMnlQWThVL1hrNndKbkh5R1pPNjBJc0pDYmt2UHdkZ2VOVjBvRmVzTE11ZnJvREVKRU05MDgzCmJKbGNYUGZKUGRtV2RkenpLQ1JPeDd2bWNUbmlVVG4ranJkb05HV0l2cUFZaXVUQmUwZ3Nsb1VDZ1lFQTRVcFUKZjhpN2kwNytsTlpJeUI3cjV4a2dEbDRkQmF4NU0yamg0SVRoUzdpVUlWZTNBTHZjM1FvWlR1c2hXVWRoc2JxawpIU0RtM3k2dlU4Mjd4OGhkMkJIeFBtZXFITTMxK3lzRk1LVzVycDRxTWZoYVIwVXBRMnIveTNVUTlLS2FLSGRDCk5aQjFDd09RQTJlTkFIZUt3RzVxMVRBUThKblZkSmNQR09OK1Vmc0NnWUFhbUErbkJZWEg4MllOM0RZclJKdFcKOEc5OGNmYWJGZ2Q5bTdTR015ZjJuOFVDWVY4TlQzQVhPNml5Wm9jNng4b010L0Y3UlM2cEFyMXdxcHFQNjd4MworOXN0YnZnd2wxdE93QlFqK05INUJRMU5qRUVpZzBnQVdrMXJiNWRoNUdkOHU3bzdONlhRcngyd3FXdEx1UE9SCmRwWW04UURsdHRHT3V4Y1c3TnJPWFFLQmdEeFE5REtLQVh3WW1Cd3RDcXRaYS9zaFJPM1QwSjFXUWRTN3ZjMm8KaGRFS0I4NnRkemRoRkk2eFIzbFRoa2dxemtNUkh5TVZUZnB1dTA0S2hMM0dMU25PRS9LTE9vWWZ0ajJhbFBjagpSNFV5bjBWbG9uWDJWRWZTZTgxeStDa201M0x5Q3UzZ1VSV3p6SGk4M29sRGVBaHhCM1V3T3pqUFZ0Q3lLTDZYCkdaakZBb0dCQUtUYkpRVFhtYmtzc0NUUlBvbVlsZGZtYUptalI2Ukk2TG1WNnFPVDBpTlQwRnhXZE9QVTZDMysKMHpXdTZqdnU5bTc4TXpSaVNvb1ZsT2hjWVhRYzZXeFk2WUh4NWNDTGowWkZtVFgzZ0w4S00vZ1djREo5L0hRLwp5ZVNWN0xqbnB2ZDdiNHZxMWVkb2crbEsvb3c1NHhVeXpKbW8vRzJnaFMwY0dXbmdHT3RHCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQUlIUXBkV2djSFl2OEx1d1prRks0RU13RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUwTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0x6RXRNQ3NHQTFVRUF4TWtPVE14Ck9URXpOMlF0TTJZM1pTMDBNRGRqTFRnNU9UZ3RNVFE0TURoaE5qaGlOR05oTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBblk3UDh2dW1BZnZvYzZmNTlPUGxZc1hDTnMrYlgzUWoxZGQxdGtTUAovVW5Md21uc3dObGZkN0o1QzU0S2JmcGtkWURhNnFEYUFGKzF1RFo1bXo4WkJ5N1RlSWRYVkR5bmozWnZsVU5VClZaRlkvNkpaYXlsYVFLSlBrQWdMay9ZVFVWNWplK3V5T05MeFMvZU5WN2YvcmEvdUM3YXNYRjdaUGUwdUFpUWcKYXN1YTE0MWluRkFQNE04N0NzM054K3R6N09EaWlwb05nNzhEOWNUNENGSjE4S05CTWJmamZrVG5CeEVsdEFBbgpEMnJITzhnVGRtMTVnazB4ZXFCZHJ6UjA0OHI1V3FMblU1c3pSaEw5bXdLRW1LeEtLeUdaQjdWUVYwOTYrd2paCkltUmVYQ2ZmeXpZVHhOTkVzZXV2eUtraGsxUFFTcWlwUXlLdlZpZE5tVUwrOVFJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVBMZUpwMWdqS1BvUApWY2Uwa1ppd1NoOCtoczh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUIxaGltWTBBWmEzdmpTOXRqdmRybTFiCm02NWozd2hRbm5GS3k2d3N0bWd1azFBMU5vNVlqWUtqUGJsRVFCU09RUlNEbG9mVElNdE5WZmVYK3Qzb1lJaEcKOXd6U012MWRMcGYzRGlnd1h1QXZkWWFjaEcxSFFOT1pucURzUDRXcVgrb3hwbmsyemZBazdwMUw3elk1b0pWQQphUlBrUE5yRnNZdEJBMENub0h6N2Rwbk5NaE9QVXNTWnRybnA3SU51aVpBK3ZqQ3ZWbGlnTStzWk8yU2lsWXA0CmVtcXp2OGp3RExDbVVONG5BSzlCcHJ6ZGpPSzdCbzhTZmIzek5BZ0kybmdGRFJGSWQ2eWtOeHAwVlZNNHJtTmQKOGFhUVJ5VEtFdm05UFk3b0FQNTNXSVVvNnA4WDE1anczN3dJQTBqa1BFRW5naENUZHNJeTRrdys1UWhrTXlJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                "password": "",
                "username": ""
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.18.16-gke.1200",
            "min_master_version": "1.18",
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "lrc-portfolio-cluster",
            "network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "network_policy": [
              {
                "enabled": true,
                "provider": "CALICO"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "n1-standard-4",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-a1f2aa25-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-33e54daa-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-5e71b261-grp"
                ],
                "management": [
                  {
                    "auto_repair": true,
                    "auto_upgrade": true
                  }
                ],
                "max_pods_per_node": 110,
                "name": "lrc-portfolio-cluster",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "local_ssd_count": 0,
                    "machine_type": "n1-standard-4",
                    "metadata": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "disable-legacy-endpoints": "true",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/cloud-platform"
                    ],
                    "preemptible": false,
                    "service_account": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "gke-lrc-portfolio-cluster",
                      "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                    ],
                    "taint": [],
                    "workload_metadata_config": [
                      {
                        "node_metadata": "GKE_METADATA_SERVER"
                      }
                    ]
                  }
                ],
                "node_count": 1,
                "node_locations": [
                  "us-central1-a",
                  "us-central1-c",
                  "us-central1-f"
                ],
                "upgrade_settings": [
                  {
                    "max_surge": 1,
                    "max_unavailable": 0
                  }
                ],
                "version": "1.18.16-gke.1200"
              }
            ],
            "node_version": "1.18.16-gke.1200",
            "operation": null,
            "pod_security_policy_config": [],
            "private_cluster_config": [],
            "project": "lrc-portfolio-1138",
            "release_channel": [
              {
                "channel": "UNSPECIFIED"
              }
            ],
            "remove_default_node_pool": true,
            "resource_labels": {},
            "resource_usage_export_config": [],
            "self_link": "https://container.googleapis.com/v1beta1/projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "services_ipv4_cidr": "10.2.0.0/16",
            "subnetwork": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "timeouts": {
              "create": "45m",
              "delete": "45m",
              "read": null,
              "update": "45m"
            },
            "tpu_ipv4_cidr_block": "",
            "vertical_pod_autoscaling": [
              {
                "enabled": false
              }
            ],
            "workload_identity_config": [
              {
                "identity_namespace": "lrc-portfolio-1138.svc.id.goog"
              }
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInJlYWQiOjI0MDAwMDAwMDAwMDAsInVwZGF0ZSI6MjcwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_container_node_pool",
      "name": "pools",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "lrc-portfolio-cluster",
          "schema_version": 1,
          "attributes": {
            "autoscaling": [],
            "cluster": "lrc-portfolio-cluster",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster/nodePools/lrc-portfolio-cluster",
            "initial_node_count": 1,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-a1f2aa25-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-33e54daa-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-5e71b261-grp"
            ],
            "location": "us-central1",
            "management": [
              {
                "auto_repair": true,
                "auto_upgrade": true
              }
            ],
            "max_pods_per_node": 110,
            "name": "lrc-portfolio-cluster",
            "name_prefix": "",
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "n1-standard-4",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_count": 1,
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "operation": null,
            "project": "lrc-portfolio-1138",
            "timeouts": {
              "create": "45m",
              "delete": "45m",
              "update": "45m"
            },
            "upgrade_settings": [
              {
                "max_surge": 1,
                "max_unavailable": 0
              }
            ],
            "version": "1.18.16-gke.1200"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoyNzAwMDAwMDAwMDAwLCJkZWxldGUiOjI3MDAwMDAwMDAwMDAsInVwZGF0ZSI6MjcwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "module.gke.google_container_cluster.primary",
            "module.gke.google_service_account.cluster_service_account",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-log_writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+him/05w=",
            "id": "lrc-portfolio-1138/roles/logging.logWriter/serviceaccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/logging.logWriter"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-metric_writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+him/05w=",
            "id": "lrc-portfolio-1138/roles/monitoring.metricWriter/serviceaccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/monitoring.metricWriter"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-monitoring_viewer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+him/05w=",
            "id": "lrc-portfolio-1138/roles/monitoring.viewer/serviceaccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/monitoring.viewer"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_project_iam_member.cluster_service_account-metric_writer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_project_iam_member",
      "name": "cluster_service_account-resourceMetadata-writer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "condition": [],
            "etag": "BwW+him/05w=",
            "id": "lrc-portfolio-1138/roles/stackdriver.resourceMetadata.writer/serviceaccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "member": "serviceAccount:tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "role": "roles/stackdriver.resourceMetadata.writer"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.google_project_iam_member.cluster_service_account-log_writer",
            "module.gke.google_project_iam_member.cluster_service_account-metric_writer",
            "module.gke.google_project_iam_member.cluster_service_account-monitoring_viewer",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "google_service_account",
      "name": "cluster_service_account",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "account_id": "tf-gke-lrc-portfolio-c-qyx1",
            "description": "",
            "display_name": "Terraform-managed service account for cluster lrc-portfolio-cluster",
            "email": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "id": "projects/lrc-portfolio-1138/serviceAccounts/tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "name": "projects/lrc-portfolio-1138/serviceAccounts/tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
            "project": "lrc-portfolio-1138",
            "timeouts": null,
            "unique_id": "104583784751969193453"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "random_shuffle",
      "name": "available_zones",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "input": [
              "us-central1-a",
              "us-central1-b",
              "us-central1-c",
              "us-central1-f"
            ],
            "keepers": null,
            "result": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "result_count": 3,
            "seed": null
          },
          "private": "bnVsbA==",
          "dependencies": [
            "module.gke.data.google_compute_zones.available",
            "module.project_services.google_project_service.project_services"
          ]
        }
      ]
    },
    {
      "module": "module.gke",
      "mode": "managed",
      "type": "random_string",
      "name": "cluster_service_account_suffix",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "id": "qyx1",
            "keepers": null,
            "length": 4,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "override_special": null,
            "result": "qyx1",
            "special": false,
            "upper": false
          },
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ=="
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_delete_default_kube_dns_configmap.module.gcloud_kubectl",
      "mode": "managed",
      "type": "null_resource",
      "name": "module_depends_on",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "2955525845010939577",
            "triggers": {
              "value": "3"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_client_config.default",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "data",
      "type": "external",
      "name": "env_override",
      "provider": "provider[\"registry.terraform.io/hashicorp/external\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "-",
            "program": [
              ".terraform/modules/gke.gcloud_wait_for_cluster/scripts/check_env.sh"
            ],
            "query": null,
            "result": {
              "download": ""
            },
            "working_dir": null
          }
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "module_depends_on",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "6933350647155607594",
            "triggers": {
              "value": "2"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "run_command",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "516461627003371627",
            "triggers": {
              "arguments": "8e18d164bb831016bb1db642c1ed966d",
              "create_cmd_body": "lrc-portfolio-1138 lrc-portfolio-cluster us-central1 ",
              "create_cmd_entrypoint": ".terraform/modules/gke/scripts/wait-for-cluster.sh",
              "gcloud_bin_abs_path": "/google-cloud-sdk/bin",
              "md5": "32cb86db260b1384045ee58ba7b8f4cf"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke.module.gcloud_wait_for_cluster",
      "mode": "managed",
      "type": "null_resource",
      "name": "run_destroy_command",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "8397450204388626611",
            "triggers": {
              "destroy_cmd_body": "lrc-portfolio-1138 lrc-portfolio-cluster us-central1 ",
              "destroy_cmd_entrypoint": ".terraform/modules/gke/scripts/wait-for-cluster.sh",
              "gcloud_bin_abs_path": "/google-cloud-sdk/bin"
            }
          },
          "private": "bnVsbA==",
          "dependencies": [
            "google_compute_network.gitlab_network",
            "google_compute_subnetwork.gitlab_subnetwork",
            "module.gke.data.google_compute_zones.available",
            "module.gke.data.google_container_engine_versions.region",
            "module.gke.data.google_container_engine_versions.zone",
            "module.gke.google_container_cluster.primary",
            "module.gke.google_container_node_pool.pools",
            "module.gke.google_service_account.cluster_service_account",
            "module.gke.module.gcloud_wait_for_cluster.data.external.env_override",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.additional_components",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.decompress",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_google_credentials",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.gcloud_auth_service_account_key_file",
            "module.gke.module.gcloud_wait_for_cluster.null_resource.module_depends_on",
            "module.gke.module.gcloud_wait_for_cluster.random_id.cache",
            "module.gke.random_shuffle.available_zones",
            "module.gke.random_string.cluster_service_account_suffix",
            "module.project_services.google_project_iam_member.project_service_identity_roles",
            "module.project_services.google_project_service.project_services",
            "module.project_services.google_project_service_identity.project_service_identities"
          ]
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "google_client_config",
      "name": "provider",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "access_token": "ya29.a0AfH6SMDGu2Niz5gj7eloeHTiCaxgrp1ZhvQ-nWKX8TPu4pwG9RLI8Ar4KpS0WK-aBMF7-_Uxz4hAjQGvEEr8XbaioE9nbQIJMzcJNdp3GoPV_laQOkis3QZf91B1LV6BZTsVecoDHJXfnBjQS6sLMSEUP1nINw",
            "id": "projects/lrc-portfolio-1138/regions/us-central1/zones/",
            "project": "lrc-portfolio-1138",
            "region": "us-central1",
            "zone": ""
          }
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "google_container_cluster",
      "name": "gke_cluster",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "addons_config": [
              {
                "cloudrun_config": [],
                "horizontal_pod_autoscaling": [
                  {
                    "disabled": false
                  }
                ],
                "http_load_balancing": [
                  {
                    "disabled": false
                  }
                ],
                "network_policy_config": [
                  {
                    "disabled": false
                  }
                ]
              }
            ],
            "authenticator_groups_config": [],
            "cluster_autoscaling": [
              {
                "auto_provisioning_defaults": [],
                "enabled": false,
                "resource_limits": []
              }
            ],
            "cluster_ipv4_cidr": "10.3.0.0/16",
            "database_encryption": [
              {
                "key_name": "",
                "state": "DECRYPTED"
              }
            ],
            "datapath_provider": "",
            "default_max_pods_per_node": 110,
            "default_snat_status": [
              {
                "disabled": false
              }
            ],
            "description": "",
            "enable_binary_authorization": false,
            "enable_intranode_visibility": false,
            "enable_kubernetes_alpha": false,
            "enable_legacy_abac": false,
            "enable_shielded_nodes": true,
            "enable_tpu": false,
            "endpoint": "34.123.190.90",
            "id": "projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "initial_node_count": 0,
            "instance_group_urls": [
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-a1f2aa25-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-33e54daa-grp",
              "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroups/gke-lrc-portfolio-cl-lrc-portfolio-cl-5e71b261-grp"
            ],
            "ip_allocation_policy": [
              {
                "cluster_ipv4_cidr_block": "10.3.0.0/16",
                "cluster_secondary_range_name": "gitlab-cluster-pod-cidr",
                "services_ipv4_cidr_block": "10.2.0.0/16",
                "services_secondary_range_name": "gitlab-cluster-service-cidr"
              }
            ],
            "label_fingerprint": "a9dc16a7",
            "location": "us-central1",
            "logging_service": "logging.googleapis.com/kubernetes",
            "maintenance_policy": [
              {
                "daily_maintenance_window": [
                  {
                    "duration": "PT4H0M0S",
                    "start_time": "05:00"
                  }
                ],
                "maintenance_exclusion": [],
                "recurring_window": []
              }
            ],
            "master_auth": [
              {
                "client_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvRENDQWVTZ0F3SUJBZ0lSQVBCbEZhaVpmT0w4VDdZR0picm9BYXN3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUxTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0VURVBNQTBHQTFVRUF4TUdZMnhwClpXNTBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXhrdVdwbGY4dEQ2N3dvRkIKOHlXMXVRWkZyejRxcTY2VWNHN2tNM3lpWFM1WjNQODdnZTNXdlZPeXM5MnFNTFZibktCK2hIYVRrMVlxTnZOQQpraVBNL010b1A3UFBjRngrTXhYRUY5Qm40MUtxdW1kSGsxUTcwOVhEQlpqdEZwSUpqV2FjQTdRNlhNeG1xV3RpCkdHdi9VZHhxbElJY3NQbVlJOEJuR3paV0UwQWZVZituTlduUzcxRFk3QTJWUzhFMXRlU3ozaVRiWHRoTk41N1YKRndzZGg5eEt0Uis0ZFVXZXI5TlQ5eDdWTFBYTlhSUXBxM2prVmxlcVRyTWlWeklmYmViL0cybnAxeU12SnFVUQpqMzN2TDV1L21zLzJFcGlVdkY2MGVqVmtQdC93dERpRzIzdk81T0xHam56M1NTeENvMXpiZjN1K3pSMklvYXlYCjQ4MnBad0lEQVFBQm96RXdMekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRHkzaWFkWUl5ajYKRDFYSHRKR1lzRW9mUG9iUE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ2NkQmQvand2N2xtRmFEWkdCZk1iVQo2ZEI3dEd0dXdIOWNzVEZSQkdsWGV2Y1IyWkxpeGpIVmhsd1MrNGpIN1F3UUxVWFRHUC9tQ3dwK1FQSzlSWC9PCkZWTGVWYWNNRG04cG0zR2taMVVyNFVzMmpPWVF6Q05DZGtTeE5DejQ4am1wMkNOVC9Lc3VYRk03cExGWERnMW4KSlk1Y2ZTYVNhM3VxcURnUjgvUXRLbitodEtpZ2Q1aXVESUdJTkNubW53N0RsRW10K0xhMWpneFo0WTBCalJzNApVQ05ESzdhNkVrVEd4aEpwbEQ2SFArTE5VcHAzMkFza1E5NzJocDlPRlJMNnlVNWYvUDhJRE51Q2k1YW4zaENiCmtEUUFIWDgzWUkwS2IvREFJR1NNUXBsZGx5OUxuamx6cVlLaGcxeXFZbzN2eWR5T1JMNEcwRENVZlQybWxRclIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
                "client_certificate_config": [
                  {
                    "issue_client_certificate": true
                  }
                ],
                "client_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeGt1V3BsZjh0RDY3d29GQjh5VzF1UVpGcno0cXE2NlVjRzdrTTN5aVhTNVozUDg3CmdlM1d2Vk95czkycU1MVmJuS0IraEhhVGsxWXFOdk5Ba2lQTS9NdG9QN1BQY0Z4K014WEVGOUJuNDFLcXVtZEgKazFRNzA5WERCWmp0RnBJSmpXYWNBN1E2WE14bXFXdGlHR3YvVWR4cWxJSWNzUG1ZSThCbkd6WldFMEFmVWYrbgpOV25TNzFEWTdBMlZTOEUxdGVTejNpVGJYdGhOTjU3VkZ3c2RoOXhLdFIrNGRVV2VyOU5UOXg3VkxQWE5YUlFwCnEzamtWbGVxVHJNaVZ6SWZiZWIvRzJucDF5TXZKcVVRajMzdkw1dS9tcy8yRXBpVXZGNjBlalZrUHQvd3REaUcKMjN2TzVPTEdqbnozU1N4Q28xemJmM3UrelIySW9heVg0ODJwWndJREFRQUJBb0lCQUJxdGRySWdha1lSbm84WApkcmp3bk5jc3FkbGV3cnpnT3VZNWRRZ2NQM2ZMMFpreTJWMnNrdFJiMjFIcGc0a1VEU1F3VDNVZ3dzL3lxckZECjNxOEtrL3g2blNiYzJRNmowdktxZmZ3Nk5JL1h3bEpickx4OGU2UVBRVEtTbFdzUThLb09ZUFQ2blZONHlHTUkKcUdUaXVySFh0cHNPT2kveEZHL1M1Y3c2YmpBZWxyaExUdVdiTmNPQ1hIRXVUdGhNTEhGUVpoSHRSaTdvbVUzWQo5dFdxOEJzMXY2QTQvbzA2cGpTbjhWc3NiakluR0FxQW1MRmJqVVNOTG5FVnNndWRIMGQzWjRtZ0V2NGZVT1R5CnVoaGM0M3hKU0JnOGYxdEN4OG1keGh2UjVncnNMV2Z2Wk96cG1jbXJIZ2FIYkh6UEZuVVFRcVoxbkdUUDQyS3QKaSs2TTlta0NnWUVBNFZNKzBjMm5hclZlTTEvUWxyOE5VcUpSZ3lSNVRMU0d3Wlk2Z3RvdEl0ZHg0NjZoWm5NRgo0Vmd6Q1ZjeVVRMnlQWThVL1hrNndKbkh5R1pPNjBJc0pDYmt2UHdkZ2VOVjBvRmVzTE11ZnJvREVKRU05MDgzCmJKbGNYUGZKUGRtV2RkenpLQ1JPeDd2bWNUbmlVVG4ranJkb05HV0l2cUFZaXVUQmUwZ3Nsb1VDZ1lFQTRVcFUKZjhpN2kwNytsTlpJeUI3cjV4a2dEbDRkQmF4NU0yamg0SVRoUzdpVUlWZTNBTHZjM1FvWlR1c2hXVWRoc2JxawpIU0RtM3k2dlU4Mjd4OGhkMkJIeFBtZXFITTMxK3lzRk1LVzVycDRxTWZoYVIwVXBRMnIveTNVUTlLS2FLSGRDCk5aQjFDd09RQTJlTkFIZUt3RzVxMVRBUThKblZkSmNQR09OK1Vmc0NnWUFhbUErbkJZWEg4MllOM0RZclJKdFcKOEc5OGNmYWJGZ2Q5bTdTR015ZjJuOFVDWVY4TlQzQVhPNml5Wm9jNng4b010L0Y3UlM2cEFyMXdxcHFQNjd4MworOXN0YnZnd2wxdE93QlFqK05INUJRMU5qRUVpZzBnQVdrMXJiNWRoNUdkOHU3bzdONlhRcngyd3FXdEx1UE9SCmRwWW04UURsdHRHT3V4Y1c3TnJPWFFLQmdEeFE5REtLQVh3WW1Cd3RDcXRaYS9zaFJPM1QwSjFXUWRTN3ZjMm8KaGRFS0I4NnRkemRoRkk2eFIzbFRoa2dxemtNUkh5TVZUZnB1dTA0S2hMM0dMU25PRS9LTE9vWWZ0ajJhbFBjagpSNFV5bjBWbG9uWDJWRWZTZTgxeStDa201M0x5Q3UzZ1VSV3p6SGk4M29sRGVBaHhCM1V3T3pqUFZ0Q3lLTDZYCkdaakZBb0dCQUtUYkpRVFhtYmtzc0NUUlBvbVlsZGZtYUptalI2Ukk2TG1WNnFPVDBpTlQwRnhXZE9QVTZDMysKMHpXdTZqdnU5bTc4TXpSaVNvb1ZsT2hjWVhRYzZXeFk2WUh4NWNDTGowWkZtVFgzZ0w4S00vZ1djREo5L0hRLwp5ZVNWN0xqbnB2ZDdiNHZxMWVkb2crbEsvb3c1NHhVeXpKbW8vRzJnaFMwY0dXbmdHT3RHCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
                "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQUlIUXBkV2djSFl2OEx1d1prRks0RU13RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUwTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0x6RXRNQ3NHQTFVRUF4TWtPVE14Ck9URXpOMlF0TTJZM1pTMDBNRGRqTFRnNU9UZ3RNVFE0TURoaE5qaGlOR05oTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBblk3UDh2dW1BZnZvYzZmNTlPUGxZc1hDTnMrYlgzUWoxZGQxdGtTUAovVW5Md21uc3dObGZkN0o1QzU0S2JmcGtkWURhNnFEYUFGKzF1RFo1bXo4WkJ5N1RlSWRYVkR5bmozWnZsVU5VClZaRlkvNkpaYXlsYVFLSlBrQWdMay9ZVFVWNWplK3V5T05MeFMvZU5WN2YvcmEvdUM3YXNYRjdaUGUwdUFpUWcKYXN1YTE0MWluRkFQNE04N0NzM054K3R6N09EaWlwb05nNzhEOWNUNENGSjE4S05CTWJmamZrVG5CeEVsdEFBbgpEMnJITzhnVGRtMTVnazB4ZXFCZHJ6UjA0OHI1V3FMblU1c3pSaEw5bXdLRW1LeEtLeUdaQjdWUVYwOTYrd2paCkltUmVYQ2ZmeXpZVHhOTkVzZXV2eUtraGsxUFFTcWlwUXlLdlZpZE5tVUwrOVFJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVBMZUpwMWdqS1BvUApWY2Uwa1ppd1NoOCtoczh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUIxaGltWTBBWmEzdmpTOXRqdmRybTFiCm02NWozd2hRbm5GS3k2d3N0bWd1azFBMU5vNVlqWUtqUGJsRVFCU09RUlNEbG9mVElNdE5WZmVYK3Qzb1lJaEcKOXd6U012MWRMcGYzRGlnd1h1QXZkWWFjaEcxSFFOT1pucURzUDRXcVgrb3hwbmsyemZBazdwMUw3elk1b0pWQQphUlBrUE5yRnNZdEJBMENub0h6N2Rwbk5NaE9QVXNTWnRybnA3SU51aVpBK3ZqQ3ZWbGlnTStzWk8yU2lsWXA0CmVtcXp2OGp3RExDbVVONG5BSzlCcHJ6ZGpPSzdCbzhTZmIzek5BZ0kybmdGRFJGSWQ2eWtOeHAwVlZNNHJtTmQKOGFhUVJ5VEtFdm05UFk3b0FQNTNXSVVvNnA4WDE1anczN3dJQTBqa1BFRW5naENUZHNJeTRrdys1UWhrTXlJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                "password": "",
                "username": ""
              }
            ],
            "master_authorized_networks_config": [],
            "master_version": "1.18.16-gke.1200",
            "min_master_version": null,
            "monitoring_service": "monitoring.googleapis.com/kubernetes",
            "name": "lrc-portfolio-cluster",
            "network": "projects/lrc-portfolio-1138/global/networks/lrc-portfolio-cluster-gitlab-compute-network",
            "network_policy": [
              {
                "enabled": true,
                "provider": "CALICO"
              }
            ],
            "node_config": [
              {
                "disk_size_gb": 100,
                "disk_type": "pd-standard",
                "guest_accelerator": [],
                "image_type": "COS",
                "labels": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "local_ssd_count": 0,
                "machine_type": "n1-standard-4",
                "metadata": {
                  "cluster_name": "lrc-portfolio-cluster",
                  "disable-legacy-endpoints": "true",
                  "node_pool": "lrc-portfolio-cluster"
                },
                "min_cpu_platform": "",
                "oauth_scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ],
                "preemptible": false,
                "service_account": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
                "shielded_instance_config": [
                  {
                    "enable_integrity_monitoring": true,
                    "enable_secure_boot": false
                  }
                ],
                "tags": [
                  "gke-lrc-portfolio-cluster",
                  "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                ],
                "taint": [],
                "workload_metadata_config": [
                  {
                    "node_metadata": "GKE_METADATA_SERVER"
                  }
                ]
              }
            ],
            "node_locations": [
              "us-central1-a",
              "us-central1-c",
              "us-central1-f"
            ],
            "node_pool": [
              {
                "autoscaling": [],
                "initial_node_count": 1,
                "instance_group_urls": [
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-a/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-a1f2aa25-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-c/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-33e54daa-grp",
                  "https://www.googleapis.com/compute/v1/projects/lrc-portfolio-1138/zones/us-central1-f/instanceGroupManagers/gke-lrc-portfolio-cl-lrc-portfolio-cl-5e71b261-grp"
                ],
                "management": [
                  {
                    "auto_repair": true,
                    "auto_upgrade": true
                  }
                ],
                "max_pods_per_node": 110,
                "name": "lrc-portfolio-cluster",
                "name_prefix": "",
                "node_config": [
                  {
                    "disk_size_gb": 100,
                    "disk_type": "pd-standard",
                    "guest_accelerator": [],
                    "image_type": "COS",
                    "labels": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "local_ssd_count": 0,
                    "machine_type": "n1-standard-4",
                    "metadata": {
                      "cluster_name": "lrc-portfolio-cluster",
                      "disable-legacy-endpoints": "true",
                      "node_pool": "lrc-portfolio-cluster"
                    },
                    "min_cpu_platform": "",
                    "oauth_scopes": [
                      "https://www.googleapis.com/auth/cloud-platform"
                    ],
                    "preemptible": false,
                    "service_account": "tf-gke-lrc-portfolio-c-qyx1@lrc-portfolio-1138.iam.gserviceaccount.com",
                    "shielded_instance_config": [
                      {
                        "enable_integrity_monitoring": true,
                        "enable_secure_boot": false
                      }
                    ],
                    "tags": [
                      "gke-lrc-portfolio-cluster",
                      "gke-lrc-portfolio-cluster-lrc-portfolio-cluster"
                    ],
                    "taint": [],
                    "workload_metadata_config": [
                      {
                        "node_metadata": "GKE_METADATA_SERVER"
                      }
                    ]
                  }
                ],
                "node_count": 1,
                "node_locations": [
                  "us-central1-a",
                  "us-central1-c",
                  "us-central1-f"
                ],
                "upgrade_settings": [
                  {
                    "max_surge": 1,
                    "max_unavailable": 0
                  }
                ],
                "version": "1.18.16-gke.1200"
              }
            ],
            "node_version": "1.18.16-gke.1200",
            "operation": null,
            "pod_security_policy_config": null,
            "private_cluster_config": [],
            "project": "lrc-portfolio-1138",
            "release_channel": [
              {
                "channel": "UNSPECIFIED"
              }
            ],
            "remove_default_node_pool": null,
            "resource_labels": {},
            "resource_usage_export_config": [],
            "self_link": "https://container.googleapis.com/v1beta1/projects/lrc-portfolio-1138/locations/us-central1/clusters/lrc-portfolio-cluster",
            "services_ipv4_cidr": "10.2.0.0/16",
            "subnetwork": "projects/lrc-portfolio-1138/regions/us-central1/subnetworks/lrc-portfolio-cluster-gitlab-compute-subnet",
            "tpu_ipv4_cidr_block": "",
            "vertical_pod_autoscaling": [
              {
                "enabled": false
              }
            ],
            "workload_identity_config": [
              {
                "identity_namespace": "lrc-portfolio-1138.svc.id.goog"
              }
            ]
          }
        }
      ]
    },
    {
      "module": "module.gke_auth",
      "mode": "data",
      "type": "template_file",
      "name": "kubeconfig",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "0d2f2cdeed7f340ba9a5a871851bbc7708fc4941e5c50204ad0840dfc5a90a04",
            "rendered": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQUlIUXBkV2djSFl2OEx1d1prRks0RU13RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUwTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0x6RXRNQ3NHQTFVRUF4TWtPVE14Ck9URXpOMlF0TTJZM1pTMDBNRGRqTFRnNU9UZ3RNVFE0TURoaE5qaGlOR05oTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBblk3UDh2dW1BZnZvYzZmNTlPUGxZc1hDTnMrYlgzUWoxZGQxdGtTUAovVW5Md21uc3dObGZkN0o1QzU0S2JmcGtkWURhNnFEYUFGKzF1RFo1bXo4WkJ5N1RlSWRYVkR5bmozWnZsVU5VClZaRlkvNkpaYXlsYVFLSlBrQWdMay9ZVFVWNWplK3V5T05MeFMvZU5WN2YvcmEvdUM3YXNYRjdaUGUwdUFpUWcKYXN1YTE0MWluRkFQNE04N0NzM054K3R6N09EaWlwb05nNzhEOWNUNENGSjE4S05CTWJmamZrVG5CeEVsdEFBbgpEMnJITzhnVGRtMTVnazB4ZXFCZHJ6UjA0OHI1V3FMblU1c3pSaEw5bXdLRW1LeEtLeUdaQjdWUVYwOTYrd2paCkltUmVYQ2ZmeXpZVHhOTkVzZXV2eUtraGsxUFFTcWlwUXlLdlZpZE5tVUwrOVFJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVBMZUpwMWdqS1BvUApWY2Uwa1ppd1NoOCtoczh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUIxaGltWTBBWmEzdmpTOXRqdmRybTFiCm02NWozd2hRbm5GS3k2d3N0bWd1azFBMU5vNVlqWUtqUGJsRVFCU09RUlNEbG9mVElNdE5WZmVYK3Qzb1lJaEcKOXd6U012MWRMcGYzRGlnd1h1QXZkWWFjaEcxSFFOT1pucURzUDRXcVgrb3hwbmsyemZBazdwMUw3elk1b0pWQQphUlBrUE5yRnNZdEJBMENub0h6N2Rwbk5NaE9QVXNTWnRybnA3SU51aVpBK3ZqQ3ZWbGlnTStzWk8yU2lsWXA0CmVtcXp2OGp3RExDbVVONG5BSzlCcHJ6ZGpPSzdCbzhTZmIzek5BZ0kybmdGRFJGSWQ2eWtOeHAwVlZNNHJtTmQKOGFhUVJ5VEtFdm05UFk3b0FQNTNXSVVvNnA4WDE1anczN3dJQTBqa1BFRW5naENUZHNJeTRrdys1UWhrTXlJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\n    server: https://34.123.190.90\n  name: lrc-portfolio-cluster\ncontexts:\n- context:\n    cluster: lrc-portfolio-cluster\n    user: lrc-portfolio-cluster\n  name: lrc-portfolio-cluster\ncurrent-context: lrc-portfolio-cluster\nkind: Config\npreferences: {}\nusers:\n- name: lrc-portfolio-cluster\n  user:\n    token: ya29.a0AfH6SMDGu2Niz5gj7eloeHTiCaxgrp1ZhvQ-nWKX8TPu4pwG9RLI8Ar4KpS0WK-aBMF7-_Uxz4hAjQGvEEr8XbaioE9nbQIJMzcJNdp3GoPV_laQOkis3QZf91B1LV6BZTsVecoDHJXfnBjQS6sLMSEUP1nINw\n",
            "template": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: ${cluster_ca_certificate}\n    server: https://${endpoint}\n  name: ${context}\ncontexts:\n- context:\n    cluster: ${context}\n    user: ${context}\n  name: ${context}\ncurrent-context: ${context}\nkind: Config\npreferences: {}\nusers:\n- name: ${context}\n  user:\n    token: ${token}\n",
            "vars": {
              "cluster_ca_certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQUlIUXBkV2djSFl2OEx1d1prRks0RU13RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa09UTXhPVEV6TjJRdE0yWTNaUzAwTURkakxUZzVPVGd0TVRRNE1EaGhOamhpTkdOaApNQjRYRFRJeE1ETXlOekUwTVRrd00xb1hEVEkyTURNeU5qRTFNVGt3TTFvd0x6RXRNQ3NHQTFVRUF4TWtPVE14Ck9URXpOMlF0TTJZM1pTMDBNRGRqTFRnNU9UZ3RNVFE0TURoaE5qaGlOR05oTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBblk3UDh2dW1BZnZvYzZmNTlPUGxZc1hDTnMrYlgzUWoxZGQxdGtTUAovVW5Md21uc3dObGZkN0o1QzU0S2JmcGtkWURhNnFEYUFGKzF1RFo1bXo4WkJ5N1RlSWRYVkR5bmozWnZsVU5VClZaRlkvNkpaYXlsYVFLSlBrQWdMay9ZVFVWNWplK3V5T05MeFMvZU5WN2YvcmEvdUM3YXNYRjdaUGUwdUFpUWcKYXN1YTE0MWluRkFQNE04N0NzM054K3R6N09EaWlwb05nNzhEOWNUNENGSjE4S05CTWJmamZrVG5CeEVsdEFBbgpEMnJITzhnVGRtMTVnazB4ZXFCZHJ6UjA0OHI1V3FMblU1c3pSaEw5bXdLRW1LeEtLeUdaQjdWUVYwOTYrd2paCkltUmVYQ2ZmeXpZVHhOTkVzZXV2eUtraGsxUFFTcWlwUXlLdlZpZE5tVUwrOVFJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVBMZUpwMWdqS1BvUApWY2Uwa1ppd1NoOCtoczh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUIxaGltWTBBWmEzdmpTOXRqdmRybTFiCm02NWozd2hRbm5GS3k2d3N0bWd1azFBMU5vNVlqWUtqUGJsRVFCU09RUlNEbG9mVElNdE5WZmVYK3Qzb1lJaEcKOXd6U012MWRMcGYzRGlnd1h1QXZkWWFjaEcxSFFOT1pucURzUDRXcVgrb3hwbmsyemZBazdwMUw3elk1b0pWQQphUlBrUE5yRnNZdEJBMENub0h6N2Rwbk5NaE9QVXNTWnRybnA3SU51aVpBK3ZqQ3ZWbGlnTStzWk8yU2lsWXA0CmVtcXp2OGp3RExDbVVONG5BSzlCcHJ6ZGpPSzdCbzhTZmIzek5BZ0kybmdGRFJGSWQ2eWtOeHAwVlZNNHJtTmQKOGFhUVJ5VEtFdm05UFk3b0FQNTNXSVVvNnA4WDE1anczN3dJQTBqa1BFRW5naENUZHNJeTRrdys1UWhrTXlJPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
              "context": "lrc-portfolio-cluster",
              "endpoint": "34.123.190.90",
              "token": "ya29.a0AfH6SMDGu2Niz5gj7eloeHTiCaxgrp1ZhvQ-nWKX8TPu4pwG9RLI8Ar4KpS0WK-aBMF7-_Uxz4hAjQGvEEr8XbaioE9nbQIJMzcJNdp3GoPV_laQOkis3QZf91B1LV6BZTsVecoDHJXfnBjQS6sLMSEUP1nINw"
            }
          }
        }
      ]
    },
    {
      "module": "module.project_services",
      "mode": "managed",
      "type": "google_project_service",
      "name": "project_services",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": "cloudresourcemanager.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/cloudresourcemanager.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "cloudresourcemanager.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "compute.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/compute.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "compute.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "container.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/container.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "container.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "iam.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/iam.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "iam.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "monitoring.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/monitoring.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "monitoring.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "redis.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/redis.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "redis.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "servicenetworking.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/servicenetworking.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "servicenetworking.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "sql-component.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/sql-component.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "sql-component.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        },
        {
          "index_key": "sqladmin.googleapis.com",
          "schema_version": 0,
          "attributes": {
            "disable_dependent_services": true,
            "disable_on_destroy": false,
            "id": "lrc-portfolio-1138/sqladmin.googleapis.com",
            "project": "lrc-portfolio-1138",
            "service": "sqladmin.googleapis.com",
            "timeouts": null
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInJlYWQiOjYwMDAwMDAwMDAwMCwidXBkYXRlIjoxMjAwMDAwMDAwMDAwfX0="
        }
      ]
    }
  ]
}
